// C++ for the Windows Runtime v1.0.170303.6
// Copyright (c) 2017 Microsoft Corporation. All rights reserved.

#pragma once

#include "base.h"
WINRT_WARNING_PUSH

#include "internal/Windows.Foundation.3.h"
#include "internal/Windows.UI.Xaml.3.h"
#include "internal/Windows.UI.Xaml.Interop.3.h"
#include "internal/Windows.UI.Xaml.Controls.Primitives.3.h"
#include "internal/Windows.Foundation.Collections.3.h"
#include "internal/Windows.ApplicationModel.DataTransfer.3.h"
#include "internal/Windows.UI.Xaml.Media.3.h"
#include "internal/Windows.Media.Capture.3.h"
#include "internal/Windows.UI.Text.3.h"
#include "internal/Windows.Media.PlayTo.3.h"
#include "internal/Windows.Media.Casting.3.h"
#include "internal/Windows.UI.Composition.3.h"
#include "internal/Windows.UI.Xaml.Documents.3.h"
#include "internal/Windows.UI.Xaml.Input.3.h"
#include "internal/Windows.UI.Xaml.Data.3.h"
#include "internal/Windows.ApplicationModel.Search.3.h"
#include "internal/Windows.System.3.h"
#include "internal/Windows.Web.3.h"
#include "internal/Windows.UI.Input.Inking.3.h"
#include "internal/Windows.Media.Protection.3.h"
#include "internal/Windows.Storage.Streams.3.h"
#include "internal/Windows.Media.Core.3.h"
#include "internal/Windows.Media.Playback.3.h"
#include "internal/Windows.UI.Xaml.Navigation.3.h"
#include "internal/Windows.UI.3.h"
#include "internal/Windows.Web.Http.3.h"
#include "internal/Windows.Globalization.3.h"
#include "internal/Windows.UI.Xaml.Media.Animation.3.h"
#include "internal/Windows.UI.Core.3.h"
#include "internal/Windows.UI.Xaml.Controls.3.h"
#include "Windows.UI.Xaml.h"
#include "Windows.Foundation.Collections.h"
#include "Windows.UI.Xaml.Controls.Primitives.h"
#include "Windows.UI.Xaml.Data.h"
#include "Windows.UI.Xaml.Media.h"
#include "internal/Windows.UI.Xaml.Controls.4.h"
#include "internal/Windows.UI.Xaml.Controls.5.h"

WINRT_EXPORT namespace winrt {

namespace Windows::UI::Xaml::Controls {

template <typename L> BackClickEventHandler::BackClickEventHandler(L lambda) :
    BackClickEventHandler(impl::make_delegate<impl_BackClickEventHandler<L>, BackClickEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> BackClickEventHandler::BackClickEventHandler(F * function) :
    BackClickEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> BackClickEventHandler::BackClickEventHandler(O * object, M method) :
    BackClickEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void BackClickEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::BackClickEventArgs & e) const
{
    check_hresult((*(abi<BackClickEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> CalendarViewDayItemChangingEventHandler::CalendarViewDayItemChangingEventHandler(L lambda) :
    CalendarViewDayItemChangingEventHandler(impl::make_delegate<impl_CalendarViewDayItemChangingEventHandler<L>, CalendarViewDayItemChangingEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> CalendarViewDayItemChangingEventHandler::CalendarViewDayItemChangingEventHandler(F * function) :
    CalendarViewDayItemChangingEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> CalendarViewDayItemChangingEventHandler::CalendarViewDayItemChangingEventHandler(O * object, M method) :
    CalendarViewDayItemChangingEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void CalendarViewDayItemChangingEventHandler::operator()(const Windows::UI::Xaml::Controls::CalendarView & sender, const Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs & e) const
{
    check_hresult((*(abi<CalendarViewDayItemChangingEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> CleanUpVirtualizedItemEventHandler::CleanUpVirtualizedItemEventHandler(L lambda) :
    CleanUpVirtualizedItemEventHandler(impl::make_delegate<impl_CleanUpVirtualizedItemEventHandler<L>, CleanUpVirtualizedItemEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> CleanUpVirtualizedItemEventHandler::CleanUpVirtualizedItemEventHandler(F * function) :
    CleanUpVirtualizedItemEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> CleanUpVirtualizedItemEventHandler::CleanUpVirtualizedItemEventHandler(O * object, M method) :
    CleanUpVirtualizedItemEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void CleanUpVirtualizedItemEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs & e) const
{
    check_hresult((*(abi<CleanUpVirtualizedItemEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> ContextMenuOpeningEventHandler::ContextMenuOpeningEventHandler(L lambda) :
    ContextMenuOpeningEventHandler(impl::make_delegate<impl_ContextMenuOpeningEventHandler<L>, ContextMenuOpeningEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> ContextMenuOpeningEventHandler::ContextMenuOpeningEventHandler(F * function) :
    ContextMenuOpeningEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> ContextMenuOpeningEventHandler::ContextMenuOpeningEventHandler(O * object, M method) :
    ContextMenuOpeningEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void ContextMenuOpeningEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::ContextMenuEventArgs & e) const
{
    check_hresult((*(abi<ContextMenuOpeningEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> DragItemsStartingEventHandler::DragItemsStartingEventHandler(L lambda) :
    DragItemsStartingEventHandler(impl::make_delegate<impl_DragItemsStartingEventHandler<L>, DragItemsStartingEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> DragItemsStartingEventHandler::DragItemsStartingEventHandler(F * function) :
    DragItemsStartingEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> DragItemsStartingEventHandler::DragItemsStartingEventHandler(O * object, M method) :
    DragItemsStartingEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void DragItemsStartingEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::DragItemsStartingEventArgs & e) const
{
    check_hresult((*(abi<DragItemsStartingEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> HubSectionHeaderClickEventHandler::HubSectionHeaderClickEventHandler(L lambda) :
    HubSectionHeaderClickEventHandler(impl::make_delegate<impl_HubSectionHeaderClickEventHandler<L>, HubSectionHeaderClickEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> HubSectionHeaderClickEventHandler::HubSectionHeaderClickEventHandler(F * function) :
    HubSectionHeaderClickEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> HubSectionHeaderClickEventHandler::HubSectionHeaderClickEventHandler(O * object, M method) :
    HubSectionHeaderClickEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void HubSectionHeaderClickEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs & e) const
{
    check_hresult((*(abi<HubSectionHeaderClickEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> ItemClickEventHandler::ItemClickEventHandler(L lambda) :
    ItemClickEventHandler(impl::make_delegate<impl_ItemClickEventHandler<L>, ItemClickEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> ItemClickEventHandler::ItemClickEventHandler(F * function) :
    ItemClickEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> ItemClickEventHandler::ItemClickEventHandler(O * object, M method) :
    ItemClickEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void ItemClickEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::ItemClickEventArgs & e) const
{
    check_hresult((*(abi<ItemClickEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> ListViewItemToKeyHandler::ListViewItemToKeyHandler(L lambda) :
    ListViewItemToKeyHandler(impl::make_delegate<impl_ListViewItemToKeyHandler<L>, ListViewItemToKeyHandler>(std::forward<L>(lambda)))
{}

template <typename F> ListViewItemToKeyHandler::ListViewItemToKeyHandler(F * function) :
    ListViewItemToKeyHandler([=](auto && ... args) { return function(args ...); })
{}

template <typename O, typename M> ListViewItemToKeyHandler::ListViewItemToKeyHandler(O * object, M method) :
    ListViewItemToKeyHandler([=](auto && ... args) { return ((*object).*(method))(args ...); })
{}

inline hstring ListViewItemToKeyHandler::operator()(const Windows::Foundation::IInspectable & item) const
{
    hstring returnValue;
    check_hresult((*(abi<ListViewItemToKeyHandler> **)this)->abi_Invoke(get_abi(item), put_abi(returnValue)));
    return returnValue;
}

template <typename L> ListViewKeyToItemHandler::ListViewKeyToItemHandler(L lambda) :
    ListViewKeyToItemHandler(impl::make_delegate<impl_ListViewKeyToItemHandler<L>, ListViewKeyToItemHandler>(std::forward<L>(lambda)))
{}

template <typename F> ListViewKeyToItemHandler::ListViewKeyToItemHandler(F * function) :
    ListViewKeyToItemHandler([=](auto && ... args) { return function(args ...); })
{}

template <typename O, typename M> ListViewKeyToItemHandler::ListViewKeyToItemHandler(O * object, M method) :
    ListViewKeyToItemHandler([=](auto && ... args) { return ((*object).*(method))(args ...); })
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::IInspectable> ListViewKeyToItemHandler::operator()(hstring_view key) const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::IInspectable> returnValue;
    check_hresult((*(abi<ListViewKeyToItemHandler> **)this)->abi_Invoke(get_abi(key), put_abi(returnValue)));
    return returnValue;
}

template <typename L> NotifyEventHandler::NotifyEventHandler(L lambda) :
    NotifyEventHandler(impl::make_delegate<impl_NotifyEventHandler<L>, NotifyEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> NotifyEventHandler::NotifyEventHandler(F * function) :
    NotifyEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> NotifyEventHandler::NotifyEventHandler(O * object, M method) :
    NotifyEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void NotifyEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::NotifyEventArgs & e) const
{
    check_hresult((*(abi<NotifyEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> SectionsInViewChangedEventHandler::SectionsInViewChangedEventHandler(L lambda) :
    SectionsInViewChangedEventHandler(impl::make_delegate<impl_SectionsInViewChangedEventHandler<L>, SectionsInViewChangedEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> SectionsInViewChangedEventHandler::SectionsInViewChangedEventHandler(F * function) :
    SectionsInViewChangedEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> SectionsInViewChangedEventHandler::SectionsInViewChangedEventHandler(O * object, M method) :
    SectionsInViewChangedEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void SectionsInViewChangedEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs & e) const
{
    check_hresult((*(abi<SectionsInViewChangedEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> SelectionChangedEventHandler::SelectionChangedEventHandler(L lambda) :
    SelectionChangedEventHandler(impl::make_delegate<impl_SelectionChangedEventHandler<L>, SelectionChangedEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> SelectionChangedEventHandler::SelectionChangedEventHandler(F * function) :
    SelectionChangedEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> SelectionChangedEventHandler::SelectionChangedEventHandler(O * object, M method) :
    SelectionChangedEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void SelectionChangedEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::SelectionChangedEventArgs & e) const
{
    check_hresult((*(abi<SelectionChangedEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> SemanticZoomViewChangedEventHandler::SemanticZoomViewChangedEventHandler(L lambda) :
    SemanticZoomViewChangedEventHandler(impl::make_delegate<impl_SemanticZoomViewChangedEventHandler<L>, SemanticZoomViewChangedEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> SemanticZoomViewChangedEventHandler::SemanticZoomViewChangedEventHandler(F * function) :
    SemanticZoomViewChangedEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> SemanticZoomViewChangedEventHandler::SemanticZoomViewChangedEventHandler(O * object, M method) :
    SemanticZoomViewChangedEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void SemanticZoomViewChangedEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs & e) const
{
    check_hresult((*(abi<SemanticZoomViewChangedEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> TextChangedEventHandler::TextChangedEventHandler(L lambda) :
    TextChangedEventHandler(impl::make_delegate<impl_TextChangedEventHandler<L>, TextChangedEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> TextChangedEventHandler::TextChangedEventHandler(F * function) :
    TextChangedEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> TextChangedEventHandler::TextChangedEventHandler(O * object, M method) :
    TextChangedEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void TextChangedEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::TextChangedEventArgs & e) const
{
    check_hresult((*(abi<TextChangedEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> TextControlPasteEventHandler::TextControlPasteEventHandler(L lambda) :
    TextControlPasteEventHandler(impl::make_delegate<impl_TextControlPasteEventHandler<L>, TextControlPasteEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> TextControlPasteEventHandler::TextControlPasteEventHandler(F * function) :
    TextControlPasteEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> TextControlPasteEventHandler::TextControlPasteEventHandler(O * object, M method) :
    TextControlPasteEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void TextControlPasteEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::TextControlPasteEventArgs & e) const
{
    check_hresult((*(abi<TextControlPasteEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

template <typename L> WebViewNavigationFailedEventHandler::WebViewNavigationFailedEventHandler(L lambda) :
    WebViewNavigationFailedEventHandler(impl::make_delegate<impl_WebViewNavigationFailedEventHandler<L>, WebViewNavigationFailedEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> WebViewNavigationFailedEventHandler::WebViewNavigationFailedEventHandler(F * function) :
    WebViewNavigationFailedEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> WebViewNavigationFailedEventHandler::WebViewNavigationFailedEventHandler(O * object, M method) :
    WebViewNavigationFailedEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void WebViewNavigationFailedEventHandler::operator()(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs & e) const
{
    check_hresult((*(abi<WebViewNavigationFailedEventHandler> **)this)->abi_Invoke(get_abi(sender), get_abi(e)));
}

}

namespace impl {

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBar> : produce_base<D, Windows::UI::Xaml::Controls::IAppBar>
{
    HRESULT __stdcall get_IsOpen(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsOpen(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSticky(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSticky());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSticky(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSticky(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Opened(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Opened(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Opened(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Opened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closed(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Closed(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Closed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBar2> : produce_base<D, Windows::UI::Xaml::Controls::IAppBar2>
{
    HRESULT __stdcall get_ClosedDisplayMode(Windows::UI::Xaml::Controls::AppBarClosedDisplayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ClosedDisplayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ClosedDisplayMode(Windows::UI::Xaml::Controls::AppBarClosedDisplayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClosedDisplayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBar3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBar3>
{
    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Opening(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Opening(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Opening(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Opening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closing(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Closing(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closing(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Closing(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBar4> : produce_base<D, Windows::UI::Xaml::Controls::IAppBar4>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarButton> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarButton>
{
    HRESULT __stdcall get_Label(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Label());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Label(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Label(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Icon(impl::abi_arg_out<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Icon());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Icon(impl::abi_arg_in<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Icon(*reinterpret_cast<const Windows::UI::Xaml::Controls::IconElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarButton3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarButton3>
{
    HRESULT __stdcall get_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LabelPosition());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LabelPosition(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IAppBarButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarButtonStatics>
{
    HRESULT __stdcall get_LabelProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LabelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IconProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IconProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCompactProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsCompactProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarButtonStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarButtonStatics3>
{
    HRESULT __stdcall get_LabelPositionProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LabelPositionProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsInOverflowProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsInOverflowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DynamicOverflowOrderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DynamicOverflowOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarFactory> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IAppBar> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarOverrides>
{
    HRESULT __stdcall abi_OnClosed(impl::abi_arg_in<Windows::Foundation::IInspectable> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnClosed(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnOpened(impl::abi_arg_in<Windows::Foundation::IInspectable> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnOpened(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarOverrides3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarOverrides3>
{
    HRESULT __stdcall abi_OnClosing(impl::abi_arg_in<Windows::Foundation::IInspectable> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnClosing(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnOpening(impl::abi_arg_in<Windows::Foundation::IInspectable> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnOpening(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarSeparator> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarSeparator>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarSeparatorFactory> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IAppBarSeparator> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarSeparatorStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>
{
    HRESULT __stdcall get_IsCompactProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsCompactProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>
{
    HRESULT __stdcall get_IsInOverflowProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsInOverflowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DynamicOverflowOrderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DynamicOverflowOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarStatics>
{
    HRESULT __stdcall get_IsOpenProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStickyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsStickyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarStatics2>
{
    HRESULT __stdcall get_ClosedDisplayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ClosedDisplayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarStatics4>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarToggleButton> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarToggleButton>
{
    HRESULT __stdcall get_Label(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Label());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Label(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Label(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Icon(impl::abi_arg_out<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Icon());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Icon(impl::abi_arg_in<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Icon(*reinterpret_cast<const Windows::UI::Xaml::Controls::IconElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarToggleButton3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarToggleButton3>
{
    HRESULT __stdcall get_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LabelPosition());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LabelPosition(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IAppBarToggleButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>
{
    HRESULT __stdcall get_LabelProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LabelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IconProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IconProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCompactProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsCompactProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>
{
    HRESULT __stdcall get_LabelPositionProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LabelPositionProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsInOverflowProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsInOverflowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DynamicOverflowOrderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DynamicOverflowOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBox> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBox>
{
    HRESULT __stdcall get_MaxSuggestionListHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxSuggestionListHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxSuggestionListHeight(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxSuggestionListHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSuggestionListOpen(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSuggestionListOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSuggestionListOpen(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSuggestionListOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextMemberPath(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextMemberPath());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextMemberPath(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextMemberPath(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Text(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Text());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Text(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Text(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_UpdateTextOnSelect(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().UpdateTextOnSelect());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_UpdateTextOnSelect(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UpdateTextOnSelect(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoMaximizeSuggestionArea(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AutoMaximizeSuggestionArea());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AutoMaximizeSuggestionArea(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AutoMaximizeSuggestionArea(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextBoxStyle(impl::abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextBoxStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextBoxStyle(impl::abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextBoxStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SuggestionChosen(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SuggestionChosen(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SuggestionChosen(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SuggestionChosen(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBox2> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBox2>
{
    HRESULT __stdcall get_QueryIcon(impl::abi_arg_out<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().QueryIcon());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_QueryIcon(impl::abi_arg_in<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().QueryIcon(*reinterpret_cast<const Windows::UI::Xaml::Controls::IconElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_QuerySubmitted(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().QuerySubmitted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_QuerySubmitted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().QuerySubmitted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBox3> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBox3>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>
{
    HRESULT __stdcall get_QueryText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().QueryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChosenSuggestion(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ChosenSuggestion());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>
{
    HRESULT __stdcall get_MaxSuggestionListHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxSuggestionListHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSuggestionListOpenProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSuggestionListOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextMemberPathProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextMemberPathProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_UpdateTextOnSelectProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().UpdateTextOnSelectProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoMaximizeSuggestionAreaProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AutoMaximizeSuggestionAreaProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextBoxStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextBoxStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>
{
    HRESULT __stdcall get_QueryIconProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().QueryIconProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>
{
    HRESULT __stdcall get_SelectedItem(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>
{
    HRESULT __stdcall get_Reason(Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Reason());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Reason(Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Reason(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CheckCurrent(bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().CheckCurrent());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>
{
    HRESULT __stdcall get_ReasonProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ReasonProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBackClickEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IBackClickEventArgs>
{
    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBitmapIcon> : produce_base<D, Windows::UI::Xaml::Controls::IBitmapIcon>
{
    HRESULT __stdcall get_UriSource(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().UriSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_UriSource(impl::abi_arg_in<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UriSource(*reinterpret_cast<const Windows::Foundation::Uri *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBitmapIconFactory> : produce_base<D, Windows::UI::Xaml::Controls::IBitmapIconFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IBitmapIcon> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBitmapIconStatics> : produce_base<D, Windows::UI::Xaml::Controls::IBitmapIconStatics>
{
    HRESULT __stdcall get_UriSourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().UriSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBorder> : produce_base<D, Windows::UI::Xaml::Controls::IBorder>
{
    HRESULT __stdcall get_BorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Background(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Background());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Background(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Background(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadius(impl::abi_arg_out<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CornerRadius());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CornerRadius(impl::abi_arg_in<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CornerRadius(*reinterpret_cast<const Windows::UI::Xaml::CornerRadius *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Child(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Child());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Child(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Child(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChildTransitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ChildTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ChildTransitions(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ChildTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBorderStatics> : produce_base<D, Windows::UI::Xaml::Controls::IBorderStatics>
{
    HRESULT __stdcall get_BorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BackgroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadiusProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CornerRadiusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChildTransitionsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ChildTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IButton> : produce_base<D, Windows::UI::Xaml::Controls::IButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>
{
    HRESULT __stdcall get_FlyoutProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FlyoutProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IButtonWithFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IButtonWithFlyout>
{
    HRESULT __stdcall get_Flyout(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IFlyoutBase> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Flyout());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Flyout(impl::abi_arg_in<Windows::UI::Xaml::Controls::Primitives::IFlyoutBase> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Flyout(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::FlyoutBase *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePicker> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePicker>
{
    HRESULT __stdcall get_Date(impl::abi_arg_out<Windows::Foundation::IReference<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Date());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Date(impl::abi_arg_in<Windows::Foundation::IReference<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Date(*reinterpret_cast<const Windows::Foundation::IReference<Windows::Foundation::DateTime> *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCalendarOpen(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsCalendarOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsCalendarOpen(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsCalendarOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DateFormat(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DateFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DateFormat(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DateFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarViewStyle(impl::abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarViewStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarViewStyle(impl::abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarViewStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinDate(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinDate(impl::abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDate(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxDate(impl::abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTodayHighlighted(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTodayHighlighted());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTodayHighlighted(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTodayHighlighted(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DisplayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstDayOfWeek(Windows::Globalization::DayOfWeek * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstDayOfWeek());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstDayOfWeek(Windows::Globalization::DayOfWeek value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstDayOfWeek(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayOfWeekFormat(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayOfWeekFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayOfWeekFormat(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DayOfWeekFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarIdentifier(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarIdentifier(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOutOfScopeEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsOutOfScopeEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsOutOfScopeEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsOutOfScopeEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGroupLabelVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsGroupLabelVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsGroupLabelVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsGroupLabelVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CalendarViewDayItemChanging(impl::abi_arg_in<Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().CalendarViewDayItemChanging(*reinterpret_cast<const Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CalendarViewDayItemChanging(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarViewDayItemChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DateChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarDatePicker, Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DateChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarDatePicker, Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DateChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DateChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Opened(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Opened(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Opened(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Opened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closed(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Closed(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Closed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetDisplayDate(impl::abi_arg_in<Windows::Foundation::DateTime> date) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDisplayDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&date));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetYearDecadeDisplayDimensions(columns, rows);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePicker2> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePicker2>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>
{
    HRESULT __stdcall get_NewDate(impl::abi_arg_out<Windows::Foundation::IReference<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NewDate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OldDate(impl::abi_arg_out<Windows::Foundation::IReference<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OldDate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePickerFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ICalendarDatePicker> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePickerStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>
{
    HRESULT __stdcall get_DateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCalendarOpenProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsCalendarOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DateFormatProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DateFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarViewStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarViewStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinDateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinDateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxDateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTodayHighlightedProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTodayHighlightedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DisplayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstDayOfWeekProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstDayOfWeekProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayOfWeekFormatProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayOfWeekFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarIdentifierProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOutOfScopeEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsOutOfScopeEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGroupLabelVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsGroupLabelVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarView> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarView>
{
    HRESULT __stdcall get_CalendarIdentifier(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarIdentifier(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayOfWeekFormat(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayOfWeekFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayOfWeekFormat(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DayOfWeekFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGroupLabelVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsGroupLabelVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsGroupLabelVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsGroupLabelVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DisplayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstDayOfWeek(Windows::Globalization::DayOfWeek * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstDayOfWeek());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstDayOfWeek(Windows::Globalization::DayOfWeek value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstDayOfWeek(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOutOfScopeEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsOutOfScopeEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsOutOfScopeEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsOutOfScopeEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTodayHighlighted(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTodayHighlighted());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTodayHighlighted(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTodayHighlighted(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDate(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxDate(impl::abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinDate(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinDate(impl::abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NumberOfWeeksInView(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NumberOfWeeksInView());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_NumberOfWeeksInView(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NumberOfWeeksInView(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedDates(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedDates());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::CalendarViewSelectionMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::CalendarViewSelectionMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusBorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FocusBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FocusBorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FocusBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedHoverBorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedHoverBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedHoverBorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedHoverBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedPressedBorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedPressedBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedPressedBorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedPressedBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedBorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HoverBorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HoverBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HoverBorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HoverBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PressedBorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PressedBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PressedBorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PressedBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarItemBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarItemBorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarItemBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OutOfScopeBackground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OutOfScopeBackground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OutOfScopeBackground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OutOfScopeBackground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBackground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarItemBackground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarItemBackground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarItemBackground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PressedForeground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PressedForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PressedForeground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PressedForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TodayForeground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TodayForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TodayForeground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TodayForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BlackoutForeground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BlackoutForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BlackoutForeground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlackoutForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedForeground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedForeground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OutOfScopeForeground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OutOfScopeForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OutOfScopeForeground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OutOfScopeForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemForeground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarItemForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarItemForeground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarItemForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontFamily(impl::abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayItemFontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayItemFontFamily(impl::abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DayItemFontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontSize(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayItemFontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayItemFontSize(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DayItemFontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayItemFontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayItemFontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DayItemFontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontWeight(impl::abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayItemFontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayItemFontWeight(impl::abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DayItemFontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TodayFontWeight(impl::abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TodayFontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TodayFontWeight(impl::abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TodayFontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontFamily(impl::abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfMonthLabelFontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfMonthLabelFontFamily(impl::abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstOfMonthLabelFontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontSize(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfMonthLabelFontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfMonthLabelFontSize(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstOfMonthLabelFontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfMonthLabelFontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfMonthLabelFontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstOfMonthLabelFontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontWeight(impl::abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfMonthLabelFontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfMonthLabelFontWeight(impl::abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstOfMonthLabelFontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontFamily(impl::abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthYearItemFontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthYearItemFontFamily(impl::abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MonthYearItemFontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontSize(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthYearItemFontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthYearItemFontSize(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MonthYearItemFontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthYearItemFontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthYearItemFontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MonthYearItemFontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontWeight(impl::abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthYearItemFontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthYearItemFontWeight(impl::abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MonthYearItemFontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontFamily(impl::abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfYearDecadeLabelFontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfYearDecadeLabelFontFamily(impl::abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstOfYearDecadeLabelFontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontSize(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfYearDecadeLabelFontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfYearDecadeLabelFontSize(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstOfYearDecadeLabelFontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfYearDecadeLabelFontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfYearDecadeLabelFontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstOfYearDecadeLabelFontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontWeight(impl::abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfYearDecadeLabelFontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfYearDecadeLabelFontWeight(impl::abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstOfYearDecadeLabelFontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalDayItemAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalDayItemAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalDayItemAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalDayItemAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalDayItemAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalDayItemAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalDayItemAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalDayItemAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalFirstOfMonthLabelAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalFirstOfMonthLabelAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalFirstOfMonthLabelAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalFirstOfMonthLabelAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalFirstOfMonthLabelAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalFirstOfMonthLabelAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalFirstOfMonthLabelAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalFirstOfMonthLabelAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBorderThickness(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarItemBorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarItemBorderThickness(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarItemBorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarViewDayItemStyle(impl::abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarViewDayItemStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarViewDayItemStyle(impl::abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarViewDayItemStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CalendarViewDayItemChanging(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().CalendarViewDayItemChanging(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CalendarViewDayItemChanging(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarViewDayItemChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectedDatesChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SelectedDatesChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectedDatesChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedDatesChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetDisplayDate(impl::abi_arg_in<Windows::Foundation::DateTime> date) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDisplayDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&date));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetYearDecadeDisplayDimensions(columns, rows);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewDayItem> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewDayItem>
{
    HRESULT __stdcall get_IsBlackout(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsBlackout());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsBlackout(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsBlackout(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Date(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Date());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetDensityColors(impl::abi_arg_in<Windows::Foundation::Collections::IIterable<Windows::UI::Color>> colors) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDensityColors(*reinterpret_cast<const Windows::Foundation::Collections::IIterable<Windows::UI::Color> *>(&colors));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>
{
    HRESULT __stdcall get_InRecycleQueue(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InRecycleQueue());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Item(impl::abi_arg_out<Windows::UI::Xaml::Controls::ICalendarViewDayItem> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Item());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Phase(uint32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Phase());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RegisterUpdateCallback(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>> callback) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RegisterUpdateCallback(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> *>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RegisterUpdateCallbackWithPhase(uint32_t callbackPhase, impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>> callback) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RegisterUpdateCallback(callbackPhase, *reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> *>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ICalendarViewDayItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>
{
    HRESULT __stdcall get_IsBlackoutProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsBlackoutProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ICalendarView> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>
{
    HRESULT __stdcall get_AddedDates(impl::abi_arg_out<Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AddedDates());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RemovedDates(impl::abi_arg_out<Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RemovedDates());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewStatics>
{
    HRESULT __stdcall get_CalendarIdentifierProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayOfWeekFormatProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayOfWeekFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGroupLabelVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsGroupLabelVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DisplayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstDayOfWeekProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstDayOfWeekProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOutOfScopeEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsOutOfScopeEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTodayHighlightedProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTodayHighlightedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxDateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinDateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinDateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NumberOfWeeksInViewProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NumberOfWeeksInViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedDatesProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedDatesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettingsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettingsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusBorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FocusBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedHoverBorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedHoverBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedPressedBorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedPressedBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HoverBorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HoverBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PressedBorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PressedBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarItemBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OutOfScopeBackgroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OutOfScopeBackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBackgroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarItemBackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PressedForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PressedForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TodayForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TodayForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BlackoutForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BlackoutForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OutOfScopeForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OutOfScopeForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarItemForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontFamilyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayItemFontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayItemFontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayItemFontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontWeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayItemFontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TodayFontWeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TodayFontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontFamilyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfMonthLabelFontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfMonthLabelFontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfMonthLabelFontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontWeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfMonthLabelFontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontFamilyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthYearItemFontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthYearItemFontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthYearItemFontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontWeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthYearItemFontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontFamilyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfYearDecadeLabelFontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfYearDecadeLabelFontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfYearDecadeLabelFontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontWeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstOfYearDecadeLabelFontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalDayItemAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalDayItemAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalDayItemAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalDayItemAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalFirstOfMonthLabelAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalFirstOfMonthLabelAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalFirstOfMonthLabelAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalFirstOfMonthLabelAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBorderThicknessProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarItemBorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarViewDayItemStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarViewDayItemStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>
{
    HRESULT __stdcall get_Bounds(impl::abi_arg_out<Windows::Foundation::Rect> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Bounds());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICanvas> : produce_base<D, Windows::UI::Xaml::Controls::ICanvas>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICanvasFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICanvasFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ICanvas> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICanvasStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICanvasStatics>
{
    HRESULT __stdcall get_LeftProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LeftProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetLeft(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, double * length) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *length = detach_abi(this->shim().GetLeft(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetLeft(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, double length) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetLeft(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), length);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TopProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TopProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetTop(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, double * length) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *length = detach_abi(this->shim().GetTop(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetTop(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, double length) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetTop(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), length);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZIndexProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetZIndex(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetZIndex(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetZIndex(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetZIndex(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICaptureElement> : produce_base<D, Windows::UI::Xaml::Controls::ICaptureElement>
{
    HRESULT __stdcall get_Source(impl::abi_arg_out<Windows::Media::Capture::IMediaCapture> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Source());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Source(impl::abi_arg_in<Windows::Media::Capture::IMediaCapture> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<const Windows::Media::Capture::MediaCapture *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICaptureElementStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICaptureElementStatics>
{
    HRESULT __stdcall get_SourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICheckBox> : produce_base<D, Windows::UI::Xaml::Controls::ICheckBox>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICheckBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICheckBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ICheckBox> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>
{
    HRESULT __stdcall get_GroupHeaderContainer(impl::abi_arg_out<Windows::UI::Xaml::Controls::IListViewBaseHeaderItem> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupHeaderContainer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupHeaderContainer(impl::abi_arg_in<Windows::UI::Xaml::Controls::IListViewBaseHeaderItem> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GroupHeaderContainer(*reinterpret_cast<const Windows::UI::Xaml::Controls::ListViewBaseHeaderItem *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Group(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Group());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>
{
    HRESULT __stdcall get_ItemIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Item(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Item());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainer(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ISelectorItem> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemContainer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemContainer(impl::abi_arg_in<Windows::UI::Xaml::Controls::Primitives::ISelectorItem> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemContainer(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::SelectorItem *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsContainerPrepared(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsContainerPrepared());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsContainerPrepared(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsContainerPrepared(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>
{
    HRESULT __stdcall get_Value(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Value());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_UIElement(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().UIElement());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IColumnDefinition> : produce_base<D, Windows::UI::Xaml::Controls::IColumnDefinition>
{
    HRESULT __stdcall get_Width(impl::abi_arg_out<Windows::UI::Xaml::GridLength> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Width());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Width(impl::abi_arg_in<Windows::UI::Xaml::GridLength> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Width(*reinterpret_cast<const Windows::UI::Xaml::GridLength *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxWidth(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinWidth(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActualWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ActualWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IColumnDefinitionStatics> : produce_base<D, Windows::UI::Xaml::Controls::IColumnDefinitionStatics>
{
    HRESULT __stdcall get_WidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().WidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBox> : produce_base<D, Windows::UI::Xaml::Controls::IComboBox>
{
    HRESULT __stdcall get_IsDropDownOpen(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsDropDownOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsDropDownOpen(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsDropDownOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsEditable(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsEditable());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSelectionBoxHighlighted(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSelectionBoxHighlighted());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDropDownHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxDropDownHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxDropDownHeight(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxDropDownHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionBoxItem(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionBoxItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionBoxItemTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionBoxItemTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DropDownClosed(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DropDownClosed(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DropDownClosed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DropDownClosed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DropDownOpened(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DropDownOpened(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DropDownOpened(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DropDownOpened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBox2> : produce_base<D, Windows::UI::Xaml::Controls::IComboBox2>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBox3> : produce_base<D, Windows::UI::Xaml::Controls::IComboBox3>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSearchEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextSearchEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextSearchEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTextSearchEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IComboBox> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxItem> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IComboBoxItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxOverrides>
{
    HRESULT __stdcall abi_OnDropDownClosed(impl::abi_arg_in<Windows::Foundation::IInspectable> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDropDownClosed(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDropDownOpened(impl::abi_arg_in<Windows::Foundation::IInspectable> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDropDownOpened(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxStatics>
{
    HRESULT __stdcall get_IsDropDownOpenProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsDropDownOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDropDownHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxDropDownHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxStatics2>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxStatics3>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSearchEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextSearchEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBar> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBar>
{
    HRESULT __stdcall get_PrimaryCommands(impl::abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PrimaryCommands());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryCommands(impl::abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SecondaryCommands());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBar2> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBar2>
{
    HRESULT __stdcall get_CommandBarOverflowPresenterStyle(impl::abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CommandBarOverflowPresenterStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CommandBarOverflowPresenterStyle(impl::abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CommandBarOverflowPresenterStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CommandBarTemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ICommandBarTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CommandBarTemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBar3> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBar3>
{
    HRESULT __stdcall get_DefaultLabelPosition(Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultLabelPosition());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DefaultLabelPosition(Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultLabelPosition(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OverflowButtonVisibility(Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OverflowButtonVisibility());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OverflowButtonVisibility(Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OverflowButtonVisibility(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDynamicOverflowEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsDynamicOverflowEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsDynamicOverflowEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsDynamicOverflowEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DynamicOverflowItemsChanging(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DynamicOverflowItemsChanging(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DynamicOverflowItemsChanging(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DynamicOverflowItemsChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarElement> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarElement>
{
    HRESULT __stdcall get_IsCompact(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsCompact());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsCompact(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsCompact(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarElement2> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarElement2>
{
    HRESULT __stdcall get_IsInOverflow(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsInOverflow());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DynamicOverflowOrder(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DynamicOverflowOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DynamicOverflowOrder(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DynamicOverflowOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ICommandBar> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarStatics>
{
    HRESULT __stdcall get_PrimaryCommandsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PrimaryCommandsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryCommandsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SecondaryCommandsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarStatics2>
{
    HRESULT __stdcall get_CommandBarOverflowPresenterStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CommandBarOverflowPresenterStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarStatics3> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarStatics3>
{
    HRESULT __stdcall get_DefaultLabelPositionProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultLabelPositionProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OverflowButtonVisibilityProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OverflowButtonVisibilityProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDynamicOverflowEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsDynamicOverflowEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>
{
    HRESULT __stdcall get_ItemContainer(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ISelectorItem> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemContainer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InRecycleQueue(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InRecycleQueue());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Item(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Item());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Phase(uint32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Phase());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RegisterUpdateCallback(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>> callback) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RegisterUpdateCallback(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> *>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RegisterUpdateCallbackWithPhase(uint32_t callbackPhase, impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>> callback) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RegisterUpdateCallback(callbackPhase, *reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> *>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentControl> : produce_base<D, Windows::UI::Xaml::Controls::IContentControl>
{
    HRESULT __stdcall get_Content(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Content(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateSelector(impl::abi_arg_out<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplateSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTemplateSelector(impl::abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentTemplateSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTransitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTransitions(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentControl2> : produce_base<D, Windows::UI::Xaml::Controls::IContentControl2>
{
    HRESULT __stdcall get_ContentTemplateRoot(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplateRoot());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentControlFactory> : produce_base<D, Windows::UI::Xaml::Controls::IContentControlFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IContentControl> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentControlOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IContentControlOverrides>
{
    HRESULT __stdcall abi_OnContentChanged(impl::abi_arg_in<Windows::Foundation::IInspectable> oldContent, impl::abi_arg_in<Windows::Foundation::IInspectable> newContent) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnContentChanged(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&oldContent), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&newContent));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnContentTemplateChanged(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> oldContentTemplate, impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> newContentTemplate) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnContentTemplateChanged(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&oldContentTemplate), *reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&newContentTemplate));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnContentTemplateSelectorChanged(impl::abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> oldContentTemplateSelector, impl::abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> newContentTemplateSelector) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnContentTemplateSelectorChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&oldContentTemplateSelector), *reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&newContentTemplateSelector));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentControlStatics> : produce_base<D, Windows::UI::Xaml::Controls::IContentControlStatics>
{
    HRESULT __stdcall get_ContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateSelectorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplateSelectorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTransitionsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialog> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialog>
{
    HRESULT __stdcall get_Title(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Title());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Title(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Title(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TitleTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TitleTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TitleTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TitleTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FullSizeDesired(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FullSizeDesired());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FullSizeDesired(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FullSizeDesired(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PrimaryButtonText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PrimaryButtonText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PrimaryButtonText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SecondaryButtonText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SecondaryButtonText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SecondaryButtonText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonCommand(impl::abi_arg_out<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PrimaryButtonCommand());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PrimaryButtonCommand(impl::abi_arg_in<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PrimaryButtonCommand(*reinterpret_cast<const Windows::UI::Xaml::Input::ICommand *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonCommand(impl::abi_arg_out<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SecondaryButtonCommand());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SecondaryButtonCommand(impl::abi_arg_in<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SecondaryButtonCommand(*reinterpret_cast<const Windows::UI::Xaml::Input::ICommand *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonCommandParameter(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PrimaryButtonCommandParameter());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PrimaryButtonCommandParameter(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PrimaryButtonCommandParameter(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonCommandParameter(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SecondaryButtonCommandParameter());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SecondaryButtonCommandParameter(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SecondaryButtonCommandParameter(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPrimaryButtonEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPrimaryButtonEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPrimaryButtonEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsPrimaryButtonEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSecondaryButtonEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSecondaryButtonEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSecondaryButtonEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSecondaryButtonEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closing(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Closing(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closing(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Closing(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closed(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Closed(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Closed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Opened(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Opened(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Opened(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Opened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PrimaryButtonClick(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PrimaryButtonClick(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PrimaryButtonClick(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PrimaryButtonClick(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SecondaryButtonClick(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SecondaryButtonClick(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SecondaryButtonClick(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SecondaryButtonClick(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Hide() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Hide();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowAsync(impl::abi_arg_out<Windows::Foundation::IAsyncOperation<winrt::Windows::UI::Xaml::Controls::ContentDialogResult>> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ShowAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>
{
    HRESULT __stdcall abi_Complete() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Complete();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>
{
    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetDeferral(impl::abi_arg_out<Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetDeferral());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>
{
    HRESULT __stdcall get_Result(Windows::UI::Xaml::Controls::ContentDialogResult * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Result());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogClosingDeferral> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>
{
    HRESULT __stdcall abi_Complete() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Complete();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>
{
    HRESULT __stdcall get_Result(Windows::UI::Xaml::Controls::ContentDialogResult * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Result());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetDeferral(impl::abi_arg_out<Windows::UI::Xaml::Controls::IContentDialogClosingDeferral> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetDeferral());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogFactory> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IContentDialog> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogStatics> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogStatics>
{
    HRESULT __stdcall get_TitleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TitleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TitleTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TitleTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FullSizeDesiredProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FullSizeDesiredProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PrimaryButtonTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SecondaryButtonTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonCommandProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PrimaryButtonCommandProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonCommandProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SecondaryButtonCommandProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonCommandParameterProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PrimaryButtonCommandParameterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonCommandParameterProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SecondaryButtonCommandParameterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPrimaryButtonEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPrimaryButtonEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSecondaryButtonEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSecondaryButtonEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenter>
{
    HRESULT __stdcall get_Content(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Content(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateSelector(impl::abi_arg_out<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplateSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTemplateSelector(impl::abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentTemplateSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTransitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTransitions(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontSize(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontSize(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamily(impl::abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontFamily(impl::abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeight(impl::abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontWeight(impl::abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontStretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacing(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CharacterSpacing());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CharacterSpacing(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Foreground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Foreground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Foreground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Foreground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenter2> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenter2>
{
    HRESULT __stdcall get_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OpticalMarginAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OpticalMarginAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBounds(Windows::UI::Xaml::TextLineBounds * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextLineBounds());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextLineBounds(Windows::UI::Xaml::TextLineBounds value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextLineBounds(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenter3> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenter3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextScaleFactorEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTextScaleFactorEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenter4> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenter4>
{
    HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextWrapping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextWrapping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLines(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLines());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLines(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxLines(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineStackingStrategy());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LineStackingStrategy(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineHeight(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LineHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadius(impl::abi_arg_out<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CornerRadius());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CornerRadius(impl::abi_arg_in<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CornerRadius(*reinterpret_cast<const Windows::UI::Xaml::CornerRadius *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Background(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Background());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Background(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Background(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalContentAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalContentAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalContentAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalContentAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterFactory> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IContentPresenter> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterOverrides>
{
    HRESULT __stdcall abi_OnContentTemplateChanged(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> oldContentTemplate, impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> newContentTemplate) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnContentTemplateChanged(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&oldContentTemplate), *reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&newContentTemplate));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnContentTemplateSelectorChanged(impl::abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> oldContentTemplateSelector, impl::abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> newContentTemplateSelector) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnContentTemplateSelectorChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&oldContentTemplateSelector), *reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&newContentTemplateSelector));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterStatics> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterStatics>
{
    HRESULT __stdcall get_ContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateSelectorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplateSelectorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTransitionsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamilyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretchProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CharacterSpacingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterStatics2>
{
    HRESULT __stdcall get_OpticalMarginAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OpticalMarginAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBoundsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextLineBoundsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterStatics3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextScaleFactorEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterStatics4>
{
    HRESULT __stdcall get_TextWrappingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextWrappingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLinesProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLinesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineStackingStrategyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadiusProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CornerRadiusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BackgroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalContentAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalContentAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalContentAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalContentAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContextMenuEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContextMenuEventArgs>
{
    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CursorLeft(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CursorLeft());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CursorTop(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CursorTop());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControl> : produce_base<D, Windows::UI::Xaml::Controls::IControl>
{
    HRESULT __stdcall get_FontSize(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontSize(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamily(impl::abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontFamily(impl::abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeight(impl::abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontWeight(impl::abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontStretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacing(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CharacterSpacing());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CharacterSpacing(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Foreground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Foreground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Foreground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Foreground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTabStop(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTabStop());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTabStop(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTabStop(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TabIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TabIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TabIndex(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TabIndex(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TabNavigation(Windows::UI::Xaml::Input::KeyboardNavigationMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TabNavigation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TabNavigation(Windows::UI::Xaml::Input::KeyboardNavigationMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TabNavigation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Template(impl::abi_arg_out<Windows::UI::Xaml::Controls::IControlTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Template());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Template(impl::abi_arg_in<Windows::UI::Xaml::Controls::IControlTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Template(*reinterpret_cast<const Windows::UI::Xaml::Controls::ControlTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalContentAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalContentAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalContentAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalContentAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Background(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Background());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Background(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Background(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusState(Windows::UI::Xaml::FocusState * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FocusState());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_IsEnabledChanged(impl::abi_arg_in<Windows::UI::Xaml::DependencyPropertyChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().IsEnabledChanged(*reinterpret_cast<const Windows::UI::Xaml::DependencyPropertyChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_IsEnabledChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsEnabledChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ApplyTemplate(bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ApplyTemplate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Focus(Windows::UI::Xaml::FocusState value, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().Focus(value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControl2> : produce_base<D, Windows::UI::Xaml::Controls::IControl2>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextScaleFactorEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTextScaleFactorEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControl3> : produce_base<D, Windows::UI::Xaml::Controls::IControl3>
{
    HRESULT __stdcall get_UseSystemFocusVisuals(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().UseSystemFocusVisuals());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_UseSystemFocusVisuals(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UseSystemFocusVisuals(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControl4> : produce_base<D, Windows::UI::Xaml::Controls::IControl4>
{
    HRESULT __stdcall get_IsFocusEngagementEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFocusEngagementEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFocusEngagementEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFocusEngagementEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFocusEngaged(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFocusEngaged());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFocusEngaged(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFocusEngaged(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RequiresPointer(Windows::UI::Xaml::Controls::RequiresPointer * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RequiresPointer());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_RequiresPointer(Windows::UI::Xaml::Controls::RequiresPointer value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RequiresPointer(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusLeft(impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusLeft());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusLeft(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().XYFocusLeft(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusRight(impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusRight());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusRight(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().XYFocusRight(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusUp(impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusUp());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusUp(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().XYFocusUp(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusDown(impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusDown());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusDown(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().XYFocusDown(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ElementSoundMode(Windows::UI::Xaml::ElementSoundMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ElementSoundMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ElementSoundMode(Windows::UI::Xaml::ElementSoundMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ElementSoundMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FocusEngaged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusEngagedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().FocusEngaged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusEngagedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FocusEngaged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FocusEngaged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FocusDisengaged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusDisengagedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().FocusDisengaged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FocusDisengaged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FocusDisengaged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RemoveFocusEngagement() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveFocusEngagement();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlFactory> : produce_base<D, Windows::UI::Xaml::Controls::IControlFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IControl> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IControlOverrides>
{
    HRESULT __stdcall abi_OnPointerEntered(impl::abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnPointerEntered(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerPressed(impl::abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnPointerPressed(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerMoved(impl::abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnPointerMoved(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerReleased(impl::abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnPointerReleased(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerExited(impl::abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnPointerExited(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerCaptureLost(impl::abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnPointerCaptureLost(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerCanceled(impl::abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnPointerCanceled(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerWheelChanged(impl::abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnPointerWheelChanged(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnTapped(impl::abi_arg_in<Windows::UI::Xaml::Input::ITappedRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnTapped(*reinterpret_cast<const Windows::UI::Xaml::Input::TappedRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDoubleTapped(impl::abi_arg_in<Windows::UI::Xaml::Input::IDoubleTappedRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDoubleTapped(*reinterpret_cast<const Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnHolding(impl::abi_arg_in<Windows::UI::Xaml::Input::IHoldingRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnHolding(*reinterpret_cast<const Windows::UI::Xaml::Input::HoldingRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnRightTapped(impl::abi_arg_in<Windows::UI::Xaml::Input::IRightTappedRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnRightTapped(*reinterpret_cast<const Windows::UI::Xaml::Input::RightTappedRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnManipulationStarting(impl::abi_arg_in<Windows::UI::Xaml::Input::IManipulationStartingRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnManipulationStarting(*reinterpret_cast<const Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnManipulationInertiaStarting(impl::abi_arg_in<Windows::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnManipulationInertiaStarting(*reinterpret_cast<const Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnManipulationStarted(impl::abi_arg_in<Windows::UI::Xaml::Input::IManipulationStartedRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnManipulationStarted(*reinterpret_cast<const Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnManipulationDelta(impl::abi_arg_in<Windows::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnManipulationDelta(*reinterpret_cast<const Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnManipulationCompleted(impl::abi_arg_in<Windows::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnManipulationCompleted(*reinterpret_cast<const Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnKeyUp(impl::abi_arg_in<Windows::UI::Xaml::Input::IKeyRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnKeyUp(*reinterpret_cast<const Windows::UI::Xaml::Input::KeyRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnKeyDown(impl::abi_arg_in<Windows::UI::Xaml::Input::IKeyRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnKeyDown(*reinterpret_cast<const Windows::UI::Xaml::Input::KeyRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnGotFocus(impl::abi_arg_in<Windows::UI::Xaml::IRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnGotFocus(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnLostFocus(impl::abi_arg_in<Windows::UI::Xaml::IRoutedEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnLostFocus(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDragEnter(impl::abi_arg_in<Windows::UI::Xaml::IDragEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDragEnter(*reinterpret_cast<const Windows::UI::Xaml::DragEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDragLeave(impl::abi_arg_in<Windows::UI::Xaml::IDragEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDragLeave(*reinterpret_cast<const Windows::UI::Xaml::DragEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDragOver(impl::abi_arg_in<Windows::UI::Xaml::IDragEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDragOver(*reinterpret_cast<const Windows::UI::Xaml::DragEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDrop(impl::abi_arg_in<Windows::UI::Xaml::IDragEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDrop(*reinterpret_cast<const Windows::UI::Xaml::DragEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlProtected> : produce_base<D, Windows::UI::Xaml::Controls::IControlProtected>
{
    HRESULT __stdcall get_DefaultStyleKey(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultStyleKey());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DefaultStyleKey(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultStyleKey(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetTemplateChild(impl::abi_arg_in<hstring> childName, impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetTemplateChild(*reinterpret_cast<const hstring *>(&childName)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlStatics> : produce_base<D, Windows::UI::Xaml::Controls::IControlStatics>
{
    HRESULT __stdcall get_FontSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamilyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretchProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CharacterSpacingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTabStopProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTabStopProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TabIndexProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TabIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TabNavigationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TabNavigationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalContentAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalContentAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalContentAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalContentAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BackgroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultStyleKeyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultStyleKeyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusStateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FocusStateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IControlStatics2>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextScaleFactorEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IControlStatics3>
{
    HRESULT __stdcall get_UseSystemFocusVisualsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().UseSystemFocusVisualsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTemplateFocusTargetProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTemplateFocusTargetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsTemplateFocusTarget(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetIsTemplateFocusTarget(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsTemplateFocusTarget(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIsTemplateFocusTarget(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IControlStatics4>
{
    HRESULT __stdcall get_IsFocusEngagementEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFocusEngagementEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFocusEngagedProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFocusEngagedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RequiresPointerProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RequiresPointerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusLeftProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusLeftProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusRightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusRightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusUpProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusUpProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusDownProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusDownProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ElementSoundModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ElementSoundModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlTemplate> : produce_base<D, Windows::UI::Xaml::Controls::IControlTemplate>
{
    HRESULT __stdcall get_TargetType(impl::abi_arg_out<Windows::UI::Xaml::Interop::TypeName> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TargetType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TargetType(impl::abi_arg_in<Windows::UI::Xaml::Interop::TypeName> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TargetType(*reinterpret_cast<const Windows::UI::Xaml::Interop::TypeName *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDataTemplateSelector> : produce_base<D, Windows::UI::Xaml::Controls::IDataTemplateSelector>
{
    HRESULT __stdcall abi_SelectTemplate(impl::abi_arg_in<Windows::Foundation::IInspectable> item, impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().SelectTemplate(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item), *reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDataTemplateSelector2> : produce_base<D, Windows::UI::Xaml::Controls::IDataTemplateSelector2>
{
    HRESULT __stdcall abi_SelectTemplateForItem(impl::abi_arg_in<Windows::Foundation::IInspectable> item, impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().SelectTemplate(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory> : produce_base<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IDataTemplateSelector> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>
{
    HRESULT __stdcall abi_SelectTemplateCore(impl::abi_arg_in<Windows::Foundation::IInspectable> item, impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().SelectTemplateCore(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item), *reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2> : produce_base<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>
{
    HRESULT __stdcall abi_SelectTemplateForItemCore(impl::abi_arg_in<Windows::Foundation::IInspectable> item, impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().SelectTemplateCore(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickedEventArgs>
{
    HRESULT __stdcall get_OldDate(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OldDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NewDate(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NewDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePicker> : produce_base<D, Windows::UI::Xaml::Controls::IDatePicker>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarIdentifier(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarIdentifier(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Date(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Date());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Date(impl::abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Date(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DayVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MonthVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().YearVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_YearVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().YearVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayFormat(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayFormat(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DayFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthFormat(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthFormat(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MonthFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearFormat(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().YearFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_YearFormat(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().YearFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinYear(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinYear());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinYear(impl::abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinYear(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxYear(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxYear());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxYear(impl::abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxYear(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DateChanged(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DateChanged(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DateChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DateChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePicker2> : produce_base<D, Windows::UI::Xaml::Controls::IDatePicker2>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFactory> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IDatePicker> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyout>
{
    HRESULT __stdcall get_CalendarIdentifier(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarIdentifier(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CalendarIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Date(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Date());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Date(impl::abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Date(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DayVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MonthVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().YearVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_YearVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().YearVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinYear(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinYear());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinYear(impl::abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinYear(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxYear(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxYear());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxYear(impl::abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxYear(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DatePicked(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::DatePickerFlyout, Windows::UI::Xaml::Controls::DatePickedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DatePicked(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::DatePickerFlyout, Windows::UI::Xaml::Controls::DatePickedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DatePicked(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DatePicked(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowAtAsync(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> target, impl::abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::DateTime>>> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ShowAtAsync(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&target)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyout2> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyout2>
{
    HRESULT __stdcall get_DayFormat(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayFormat(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DayFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthFormat(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthFormat(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MonthFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearFormat(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().YearFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_YearFormat(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().YearFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutItem> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>
{
    HRESULT __stdcall get_PrimaryText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PrimaryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PrimaryText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PrimaryText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SecondaryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SecondaryText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SecondaryText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>
{
    HRESULT __stdcall get_PrimaryTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PrimaryTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SecondaryTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>
{
    HRESULT __stdcall get_CalendarIdentifierProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().YearVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinYearProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinYearProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxYearProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxYearProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>
{
    HRESULT __stdcall get_DayFormatProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthFormatProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearFormatProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().YearFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerStatics> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerStatics>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarIdentifierProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CalendarIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().YearVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayFormatProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DayFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthFormatProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MonthFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearFormatProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().YearFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinYearProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinYearProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxYearProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxYearProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerStatics2>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>
{
    HRESULT __stdcall get_OldDate(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OldDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NewDate(impl::abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NewDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>
{
    HRESULT __stdcall get_Items(impl::abi_arg_out<Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Items());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DropResult(Windows::ApplicationModel::DataTransfer::DataPackageOperation * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DropResult());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>
{
    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Items(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Items());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Data(impl::abi_arg_out<Windows::ApplicationModel::DataTransfer::IDataPackage> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Data());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>
{
    HRESULT __stdcall get_Action(Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Action());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipView> : produce_base<D, Windows::UI::Xaml::Controls::IFlipView>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipView2> : produce_base<D, Windows::UI::Xaml::Controls::IFlipView2>
{
    HRESULT __stdcall get_UseTouchAnimationsForAllNavigation(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().UseTouchAnimationsForAllNavigation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_UseTouchAnimationsForAllNavigation(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UseTouchAnimationsForAllNavigation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipViewFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFlipViewFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IFlipView> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipViewItem> : produce_base<D, Windows::UI::Xaml::Controls::IFlipViewItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipViewItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFlipViewItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IFlipViewItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipViewStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IFlipViewStatics2>
{
    HRESULT __stdcall get_UseTouchAnimationsForAllNavigationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().UseTouchAnimationsForAllNavigationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IFlyout>
{
    HRESULT __stdcall get_Content(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Content(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FlyoutPresenterStyle(impl::abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FlyoutPresenterStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FlyoutPresenterStyle(impl::abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FlyoutPresenterStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlyoutFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFlyoutFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IFlyout> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlyoutPresenterFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IFlyoutPresenter> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::IFlyoutStatics>
{
    HRESULT __stdcall get_ContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FlyoutPresenterStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FlyoutPresenterStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFocusEngagedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIcon> : produce_base<D, Windows::UI::Xaml::Controls::IFontIcon>
{
    HRESULT __stdcall get_Glyph(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Glyph());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Glyph(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Glyph(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontSize(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontSize(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamily(impl::abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontFamily(impl::abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeight(impl::abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontWeight(impl::abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIcon2> : produce_base<D, Windows::UI::Xaml::Controls::IFontIcon2>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextScaleFactorEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTextScaleFactorEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIcon3> : produce_base<D, Windows::UI::Xaml::Controls::IFontIcon3>
{
    HRESULT __stdcall get_MirroredWhenRightToLeft(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MirroredWhenRightToLeft());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MirroredWhenRightToLeft(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MirroredWhenRightToLeft(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIconFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFontIconFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IFontIcon> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIconStatics> : produce_base<D, Windows::UI::Xaml::Controls::IFontIconStatics>
{
    HRESULT __stdcall get_GlyphProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GlyphProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamilyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIconStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IFontIconStatics2>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextScaleFactorEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIconStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IFontIconStatics3>
{
    HRESULT __stdcall get_MirroredWhenRightToLeftProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MirroredWhenRightToLeftProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrame> : produce_base<D, Windows::UI::Xaml::Controls::IFrame>
{
    HRESULT __stdcall get_CacheSize(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CacheSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CacheSize(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CacheSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoBack(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanGoBack());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoForward(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanGoForward());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CurrentSourcePageType(impl::abi_arg_out<Windows::UI::Xaml::Interop::TypeName> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CurrentSourcePageType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SourcePageType(impl::abi_arg_out<Windows::UI::Xaml::Interop::TypeName> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SourcePageType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SourcePageType(impl::abi_arg_in<Windows::UI::Xaml::Interop::TypeName> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourcePageType(*reinterpret_cast<const Windows::UI::Xaml::Interop::TypeName *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BackStackDepth(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BackStackDepth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Navigated(impl::abi_arg_in<Windows::UI::Xaml::Navigation::NavigatedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Navigated(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigatedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Navigated(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Navigated(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Navigating(impl::abi_arg_in<Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Navigating(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Navigating(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Navigating(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NavigationFailed(impl::abi_arg_in<Windows::UI::Xaml::Navigation::NavigationFailedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().NavigationFailed(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigationFailedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NavigationFailed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigationFailed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NavigationStopped(impl::abi_arg_in<Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().NavigationStopped(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NavigationStopped(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigationStopped(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GoBack() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GoBack();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GoForward() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GoForward();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Navigate(impl::abi_arg_in<Windows::UI::Xaml::Interop::TypeName> sourcePageType, impl::abi_arg_in<Windows::Foundation::IInspectable> parameter, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().Navigate(*reinterpret_cast<const Windows::UI::Xaml::Interop::TypeName *>(&sourcePageType), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&parameter)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetNavigationState(impl::abi_arg_out<hstring> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetNavigationState());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetNavigationState(impl::abi_arg_in<hstring> navigationState) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetNavigationState(*reinterpret_cast<const hstring *>(&navigationState));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrame2> : produce_base<D, Windows::UI::Xaml::Controls::IFrame2>
{
    HRESULT __stdcall get_BackStack(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BackStack());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForwardStack(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ForwardStack());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Navigate(impl::abi_arg_in<Windows::UI::Xaml::Interop::TypeName> sourcePageType, impl::abi_arg_in<Windows::Foundation::IInspectable> parameter, impl::abi_arg_in<Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo> infoOverride, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().Navigate(*reinterpret_cast<const Windows::UI::Xaml::Interop::TypeName *>(&sourcePageType), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&parameter), *reinterpret_cast<const Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo *>(&infoOverride)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrame3> : produce_base<D, Windows::UI::Xaml::Controls::IFrame3>
{
    HRESULT __stdcall abi_GoBack(impl::abi_arg_in<Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo> transitionInfoOverride) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GoBack(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo *>(&transitionInfoOverride));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrameFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFrameFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IFrame> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrameStatics> : produce_base<D, Windows::UI::Xaml::Controls::IFrameStatics>
{
    HRESULT __stdcall get_CacheSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CacheSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoBackProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanGoBackProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoForwardProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanGoForwardProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CurrentSourcePageTypeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CurrentSourcePageTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SourcePageTypeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SourcePageTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BackStackDepthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BackStackDepthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrameStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IFrameStatics2>
{
    HRESULT __stdcall get_BackStackProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BackStackProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForwardStackProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ForwardStackProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGrid> : produce_base<D, Windows::UI::Xaml::Controls::IGrid>
{
    HRESULT __stdcall get_RowDefinitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::RowDefinition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RowDefinitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ColumnDefinitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::ColumnDefinition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ColumnDefinitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGrid2> : produce_base<D, Windows::UI::Xaml::Controls::IGrid2>
{
    HRESULT __stdcall get_BorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadius(impl::abi_arg_out<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CornerRadius());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CornerRadius(impl::abi_arg_in<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CornerRadius(*reinterpret_cast<const Windows::UI::Xaml::CornerRadius *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGridFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IGrid> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridStatics> : produce_base<D, Windows::UI::Xaml::Controls::IGridStatics>
{
    HRESULT __stdcall get_RowProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetRow(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetRow(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetRow(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetRow(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ColumnProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ColumnProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetColumn(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetColumn(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetColumn(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetColumn(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RowSpanProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RowSpanProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetRowSpan(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetRowSpan(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetRowSpan(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetRowSpan(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ColumnSpanProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ColumnSpanProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetColumnSpan(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetColumnSpan(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetColumnSpan(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetColumnSpan(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IGridStatics2>
{
    HRESULT __stdcall get_BorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadiusProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CornerRadiusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridView> : produce_base<D, Windows::UI::Xaml::Controls::IGridView>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridViewFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGridViewFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IGridView> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridViewHeaderItem> : produce_base<D, Windows::UI::Xaml::Controls::IGridViewHeaderItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IGridViewHeaderItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridViewItem> : produce_base<D, Windows::UI::Xaml::Controls::IGridViewItem>
{
    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridViewItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGridViewItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IGridViewItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupItem> : produce_base<D, Windows::UI::Xaml::Controls::IGroupItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGroupItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IGroupItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyle> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyle>
{
    HRESULT __stdcall get_Panel(impl::abi_arg_out<Windows::UI::Xaml::Controls::IItemsPanelTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Panel());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Panel(impl::abi_arg_in<Windows::UI::Xaml::Controls::IItemsPanelTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Panel(*reinterpret_cast<const Windows::UI::Xaml::Controls::ItemsPanelTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContainerStyle(impl::abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContainerStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContainerStyle(impl::abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContainerStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContainerStyleSelector(impl::abi_arg_out<Windows::UI::Xaml::Controls::IStyleSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContainerStyleSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContainerStyleSelector(impl::abi_arg_in<Windows::UI::Xaml::Controls::IStyleSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContainerStyleSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::StyleSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateSelector(impl::abi_arg_out<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplateSelector(impl::abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplateSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HidesIfEmpty(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HidesIfEmpty());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HidesIfEmpty(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HidesIfEmpty(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyle2> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyle2>
{
    HRESULT __stdcall get_HeaderContainerStyle(impl::abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderContainerStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderContainerStyle(impl::abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderContainerStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyleFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyleFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IGroupStyle> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyleSelector> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyleSelector>
{
    HRESULT __stdcall abi_SelectGroupStyle(impl::abi_arg_in<Windows::Foundation::IInspectable> group, uint32_t level, impl::abi_arg_out<Windows::UI::Xaml::Controls::IGroupStyle> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().SelectGroupStyle(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&group), level));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IGroupStyleSelector> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>
{
    HRESULT __stdcall abi_SelectGroupStyleCore(impl::abi_arg_in<Windows::Foundation::IInspectable> group, uint32_t level, impl::abi_arg_out<Windows::UI::Xaml::Controls::IGroupStyle> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().SelectGroupStyleCore(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&group), level));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHub> : produce_base<D, Windows::UI::Xaml::Controls::IHub>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultSectionIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultSectionIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DefaultSectionIndex(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultSectionIndex(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Sections(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Sections());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SectionsInView(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SectionsInView());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SectionHeaders(impl::abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SectionHeaders());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SectionHeaderClick(impl::abi_arg_in<Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SectionHeaderClick(*reinterpret_cast<const Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SectionHeaderClick(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SectionHeaderClick(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SectionsInViewChanged(impl::abi_arg_in<Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SectionsInViewChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SectionsInViewChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SectionsInViewChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollToSection(impl::abi_arg_in<Windows::UI::Xaml::Controls::IHubSection> section) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScrollToSection(*reinterpret_cast<const Windows::UI::Xaml::Controls::HubSection *>(&section));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubFactory> : produce_base<D, Windows::UI::Xaml::Controls::IHubFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IHub> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubSection> : produce_base<D, Windows::UI::Xaml::Controls::IHubSection>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHeaderInteractive(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsHeaderInteractive());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsHeaderInteractive(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsHeaderInteractive(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubSectionFactory> : produce_base<D, Windows::UI::Xaml::Controls::IHubSectionFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IHubSection> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>
{
    HRESULT __stdcall get_Section(impl::abi_arg_out<Windows::UI::Xaml::Controls::IHubSection> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Section());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubSectionStatics> : produce_base<D, Windows::UI::Xaml::Controls::IHubSectionStatics>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHeaderInteractiveProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsHeaderInteractiveProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubStatics> : produce_base<D, Windows::UI::Xaml::Controls::IHubStatics>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultSectionIndexProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultSectionIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SemanticZoomOwnerProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SemanticZoomOwnerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsActiveViewProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsActiveViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomedInViewProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomedInViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHyperlinkButton> : produce_base<D, Windows::UI::Xaml::Controls::IHyperlinkButton>
{
    HRESULT __stdcall get_NavigateUri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NavigateUri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_NavigateUri(impl::abi_arg_in<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigateUri(*reinterpret_cast<const Windows::Foundation::Uri *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHyperlinkButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IHyperlinkButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHyperlinkButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>
{
    HRESULT __stdcall get_NavigateUriProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NavigateUriProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IIconElement> : produce_base<D, Windows::UI::Xaml::Controls::IIconElement>
{
    HRESULT __stdcall get_Foreground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Foreground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Foreground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Foreground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IIconElementFactory> : produce_base<D, Windows::UI::Xaml::Controls::IIconElementFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IIconElementStatics> : produce_base<D, Windows::UI::Xaml::Controls::IIconElementStatics>
{
    HRESULT __stdcall get_ForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IImage> : produce_base<D, Windows::UI::Xaml::Controls::IImage>
{
    HRESULT __stdcall get_Source(impl::abi_arg_out<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Source());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Source(impl::abi_arg_in<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<const Windows::UI::Xaml::Media::ImageSource *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NineGrid(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NineGrid());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_NineGrid(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NineGrid(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToSource(impl::abi_arg_out<Windows::Media::PlayTo::IPlayToSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlayToSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ImageFailed(impl::abi_arg_in<Windows::UI::Xaml::ExceptionRoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ImageFailed(*reinterpret_cast<const Windows::UI::Xaml::ExceptionRoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ImageFailed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ImageFailed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ImageOpened(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ImageOpened(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ImageOpened(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ImageOpened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IImage2> : produce_base<D, Windows::UI::Xaml::Controls::IImage2>
{
    HRESULT __stdcall abi_GetAsCastingSource(impl::abi_arg_out<Windows::Media::Casting::ICastingSource> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetAsCastingSource());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IImage3> : produce_base<D, Windows::UI::Xaml::Controls::IImage3>
{
    HRESULT __stdcall abi_GetAlphaMask(impl::abi_arg_out<Windows::UI::Composition::ICompositionBrush> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetAlphaMask());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IImageStatics> : produce_base<D, Windows::UI::Xaml::Controls::IImageStatics>
{
    HRESULT __stdcall get_SourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NineGridProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NineGridProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToSourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlayToSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkCanvas> : produce_base<D, Windows::UI::Xaml::Controls::IInkCanvas>
{
    HRESULT __stdcall get_InkPresenter(impl::abi_arg_out<Windows::UI::Input::Inking::IInkPresenter> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InkPresenter());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkCanvasFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkCanvasFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkCanvas> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbar> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbar>
{
    HRESULT __stdcall get_InitialControls(Windows::UI::Xaml::Controls::InkToolbarInitialControls * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InitialControls());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_InitialControls(Windows::UI::Xaml::Controls::InkToolbarInitialControls value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InitialControls(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Children(impl::abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::DependencyObject>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Children());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActiveTool(impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarToolButton> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ActiveTool());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ActiveTool(impl::abi_arg_in<Windows::UI::Xaml::Controls::IInkToolbarToolButton> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActiveTool(*reinterpret_cast<const Windows::UI::Xaml::Controls::InkToolbarToolButton *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InkDrawingAttributes(impl::abi_arg_out<Windows::UI::Input::Inking::IInkDrawingAttributes> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InkDrawingAttributes());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsRulerButtonChecked(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsRulerButtonChecked());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsRulerButtonChecked(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsRulerButtonChecked(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TargetInkCanvas(impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkCanvas> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TargetInkCanvas());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TargetInkCanvas(impl::abi_arg_in<Windows::UI::Xaml::Controls::IInkCanvas> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TargetInkCanvas(*reinterpret_cast<const Windows::UI::Xaml::Controls::InkCanvas *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ActiveToolChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ActiveToolChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ActiveToolChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActiveToolChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_InkDrawingAttributesChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().InkDrawingAttributesChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_InkDrawingAttributesChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InkDrawingAttributesChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_EraseAllClicked(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().EraseAllClicked(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_EraseAllClicked(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EraseAllClicked(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_IsRulerButtonCheckedChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().IsRulerButtonCheckedChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_IsRulerButtonCheckedChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsRulerButtonCheckedChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetToolButton(Windows::UI::Xaml::Controls::InkToolbarTool tool, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarToolButton> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetToolButton(tool));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetToggleButton(Windows::UI::Xaml::Controls::InkToolbarToggle tool, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarToggleButton> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetToggleButton(tool));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPen> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPen>
{
    HRESULT __stdcall abi_CreateInkDrawingAttributes(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> brush, double strokeWidth, impl::abi_arg_out<Windows::UI::Input::Inking::IInkDrawingAttributes> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().CreateInkDrawingAttributes(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&brush), strokeWidth));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>
{
    HRESULT __stdcall get_CustomPen(impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarCustomPen> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CustomPen());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CustomPen(impl::abi_arg_in<Windows::UI::Xaml::Controls::IInkToolbarCustomPen> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CustomPen(*reinterpret_cast<const Windows::UI::Xaml::Controls::InkToolbarCustomPen *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ConfigurationContent(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ConfigurationContent());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ConfigurationContent(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ConfigurationContent(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>
{
    HRESULT __stdcall get_CustomPenProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CustomPenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ConfigurationContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ConfigurationContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarCustomPen> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>
{
    HRESULT __stdcall abi_CreateInkDrawingAttributesCore(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> brush, double strokeWidth, impl::abi_arg_out<Windows::UI::Input::Inking::IInkDrawingAttributes> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().CreateInkDrawingAttributesCore(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&brush), strokeWidth));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>
{
    HRESULT __stdcall get_ConfigurationContent(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ConfigurationContent());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ConfigurationContent(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ConfigurationContent(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>
{
    HRESULT __stdcall get_ConfigurationContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ConfigurationContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarEraserButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarEraserButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarEraserButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbar> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenButton>
{
    HRESULT __stdcall get_Palette(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Palette());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Palette(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Palette(*reinterpret_cast<const Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush> *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinStrokeWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinStrokeWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinStrokeWidth(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinStrokeWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxStrokeWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxStrokeWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxStrokeWidth(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxStrokeWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBrushIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedBrushIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedBrushIndex(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedBrushIndex(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedStrokeWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedStrokeWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedStrokeWidth(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedStrokeWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>
{
    HRESULT __stdcall get_PaletteProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaletteProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinStrokeWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinStrokeWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxStrokeWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxStrokeWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBrushIndexProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedBrushIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedStrokeWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedStrokeWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>
{
    HRESULT __stdcall get_PenButton(impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarPenButton> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PenButton());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>
{
    HRESULT __stdcall get_PenButtonProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PenButtonProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPencilButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPencilButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarPencilButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButton>
{
    HRESULT __stdcall get_Ruler(impl::abi_arg_out<Windows::UI::Input::Inking::IInkPresenterRuler> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Ruler());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarRulerButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>
{
    HRESULT __stdcall get_RulerProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RulerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarStatics>
{
    HRESULT __stdcall get_InitialControlsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InitialControlsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChildrenProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ChildrenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActiveToolProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ActiveToolProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InkDrawingAttributesProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InkDrawingAttributesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsRulerButtonCheckedProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsRulerButtonCheckedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TargetInkCanvasProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TargetInkCanvasProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarToggleButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarToggleButton>
{
    HRESULT __stdcall get_ToggleKind(Windows::UI::Xaml::Controls::InkToolbarToggle * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ToggleKind());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarToolButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarToolButton>
{
    HRESULT __stdcall get_ToolKind(Windows::UI::Xaml::Controls::InkToolbarTool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ToolKind());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsExtensionGlyphShown(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsExtensionGlyphShown());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsExtensionGlyphShown(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsExtensionGlyphShown(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>
{
    HRESULT __stdcall get_IsExtensionGlyphShownProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsExtensionGlyphShownProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInsertionPanel> : produce_base<D, Windows::UI::Xaml::Controls::IInsertionPanel>
{
    HRESULT __stdcall abi_GetInsertionIndexes(impl::abi_arg_in<Windows::Foundation::Point> position, int32_t * first, int32_t * second) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GetInsertionIndexes(*reinterpret_cast<const Windows::Foundation::Point *>(&position), *first, *second);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemClickEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IItemClickEventArgs>
{
    HRESULT __stdcall get_ClickedItem(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ClickedItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemContainerGenerator> : produce_base<D, Windows::UI::Xaml::Controls::IItemContainerGenerator>
{
    HRESULT __stdcall add_ItemsChanged(impl::abi_arg_in<Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ItemsChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ItemsChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemsChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ItemFromContainer(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, impl::abi_arg_out<Windows::Foundation::IInspectable> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ItemFromContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ContainerFromItem(impl::abi_arg_in<Windows::Foundation::IInspectable> item, impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ContainerFromItem(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_IndexFromContainer(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, int32_t * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().IndexFromContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ContainerFromIndex(int32_t index, impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ContainerFromIndex(index));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetItemContainerGeneratorForPanel(impl::abi_arg_in<Windows::UI::Xaml::Controls::IPanel> panel, impl::abi_arg_out<Windows::UI::Xaml::Controls::IItemContainerGenerator> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetItemContainerGeneratorForPanel(*reinterpret_cast<const Windows::UI::Xaml::Controls::Panel *>(&panel)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_StartAt(impl::abi_arg_in<Windows::UI::Xaml::Controls::Primitives::GeneratorPosition> position, Windows::UI::Xaml::Controls::Primitives::GeneratorDirection direction, bool allowStartAtRealizedItem) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StartAt(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition *>(&position), direction, allowStartAtRealizedItem);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Stop() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stop();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GenerateNext(bool * isNewlyRealized, impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GenerateNext(*isNewlyRealized));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PrepareItemContainer(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> container) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PrepareItemContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RemoveAll() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Remove(impl::abi_arg_in<Windows::UI::Xaml::Controls::Primitives::GeneratorPosition> position, int32_t count) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Remove(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition *>(&position), count);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GeneratorPositionFromIndex(int32_t itemIndex, impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::GeneratorPosition> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GeneratorPositionFromIndex(itemIndex));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_IndexFromGeneratorPosition(impl::abi_arg_in<Windows::UI::Xaml::Controls::Primitives::GeneratorPosition> position, int32_t * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().IndexFromGeneratorPosition(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition *>(&position)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Recycle(impl::abi_arg_in<Windows::UI::Xaml::Controls::Primitives::GeneratorPosition> position, int32_t count) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Recycle(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition *>(&position), count);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemContainerMapping> : produce_base<D, Windows::UI::Xaml::Controls::IItemContainerMapping>
{
    HRESULT __stdcall abi_ItemFromContainer(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, impl::abi_arg_out<Windows::Foundation::IInspectable> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ItemFromContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ContainerFromItem(impl::abi_arg_in<Windows::Foundation::IInspectable> item, impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ContainerFromItem(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_IndexFromContainer(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, int32_t * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().IndexFromContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ContainerFromIndex(int32_t index, impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ContainerFromIndex(index));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControl> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControl>
{
    HRESULT __stdcall get_ItemsSource(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemsSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemsSource(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemsSource(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Items(impl::abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Items());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplateSelector(impl::abi_arg_out<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemTemplateSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemTemplateSelector(impl::abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemTemplateSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemsPanel(impl::abi_arg_out<Windows::UI::Xaml::Controls::IItemsPanelTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemsPanel());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemsPanel(impl::abi_arg_in<Windows::UI::Xaml::Controls::IItemsPanelTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemsPanel(*reinterpret_cast<const Windows::UI::Xaml::Controls::ItemsPanelTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMemberPath(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DisplayMemberPath());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DisplayMemberPath(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayMemberPath(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerStyle(impl::abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemContainerStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemContainerStyle(impl::abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemContainerStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerStyleSelector(impl::abi_arg_out<Windows::UI::Xaml::Controls::IStyleSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemContainerStyleSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemContainerStyleSelector(impl::abi_arg_in<Windows::UI::Xaml::Controls::IStyleSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemContainerStyleSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::StyleSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerGenerator(impl::abi_arg_out<Windows::UI::Xaml::Controls::IItemContainerGenerator> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemContainerGenerator());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerTransitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemContainerTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemContainerTransitions(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemContainerTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupStyle(impl::abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::GroupStyle>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupStyleSelector(impl::abi_arg_out<Windows::UI::Xaml::Controls::IGroupStyleSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupStyleSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupStyleSelector(impl::abi_arg_in<Windows::UI::Xaml::Controls::IGroupStyleSelector> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GroupStyleSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::GroupStyleSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGrouping(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsGrouping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControl2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControl2>
{
    HRESULT __stdcall get_ItemsPanelRoot(impl::abi_arg_out<Windows::UI::Xaml::Controls::IPanel> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemsPanelRoot());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControl3> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControl3>
{
    HRESULT __stdcall abi_GroupHeaderContainerFromItemContainer(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> itemContainer, impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GroupHeaderContainerFromItemContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&itemContainer)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControlFactory> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControlFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IItemsControl> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControlOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControlOverrides>
{
    HRESULT __stdcall abi_IsItemItsOwnContainerOverride(impl::abi_arg_in<Windows::Foundation::IInspectable> item, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().IsItemItsOwnContainerOverride(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetContainerForItemOverride(impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetContainerForItemOverride());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ClearContainerForItemOverride(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, impl::abi_arg_in<Windows::Foundation::IInspectable> item) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClearContainerForItemOverride(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&item));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PrepareContainerForItemOverride(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, impl::abi_arg_in<Windows::Foundation::IInspectable> item) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PrepareContainerForItemOverride(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&item));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnItemsChanged(impl::abi_arg_in<Windows::Foundation::IInspectable> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnItemsChanged(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnItemContainerStyleChanged(impl::abi_arg_in<Windows::UI::Xaml::IStyle> oldItemContainerStyle, impl::abi_arg_in<Windows::UI::Xaml::IStyle> newItemContainerStyle) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnItemContainerStyleChanged(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&oldItemContainerStyle), *reinterpret_cast<const Windows::UI::Xaml::Style *>(&newItemContainerStyle));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnItemContainerStyleSelectorChanged(impl::abi_arg_in<Windows::UI::Xaml::Controls::IStyleSelector> oldItemContainerStyleSelector, impl::abi_arg_in<Windows::UI::Xaml::Controls::IStyleSelector> newItemContainerStyleSelector) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnItemContainerStyleSelectorChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::StyleSelector *>(&oldItemContainerStyleSelector), *reinterpret_cast<const Windows::UI::Xaml::Controls::StyleSelector *>(&newItemContainerStyleSelector));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnItemTemplateChanged(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> oldItemTemplate, impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> newItemTemplate) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnItemTemplateChanged(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&oldItemTemplate), *reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&newItemTemplate));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnItemTemplateSelectorChanged(impl::abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> oldItemTemplateSelector, impl::abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> newItemTemplateSelector) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnItemTemplateSelectorChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&oldItemTemplateSelector), *reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&newItemTemplateSelector));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnGroupStyleSelectorChanged(impl::abi_arg_in<Windows::UI::Xaml::Controls::IGroupStyleSelector> oldGroupStyleSelector, impl::abi_arg_in<Windows::UI::Xaml::Controls::IGroupStyleSelector> newGroupStyleSelector) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnGroupStyleSelectorChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::GroupStyleSelector *>(&oldGroupStyleSelector), *reinterpret_cast<const Windows::UI::Xaml::Controls::GroupStyleSelector *>(&newGroupStyleSelector));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControlStatics> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControlStatics>
{
    HRESULT __stdcall get_ItemsSourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemsSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplateSelectorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemTemplateSelectorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemsPanelProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemsPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMemberPathProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DisplayMemberPathProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemContainerStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerStyleSelectorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemContainerStyleSelectorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerTransitionsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemContainerTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupStyleSelectorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupStyleSelectorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGroupingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsGroupingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetItemsOwner(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, impl::abi_arg_out<Windows::UI::Xaml::Controls::IItemsControl> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetItemsOwner(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ItemsControlFromItemContainer(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, impl::abi_arg_out<Windows::UI::Xaml::Controls::IItemsControl> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ItemsControlFromItemContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPanelTemplate> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPanelTemplate>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPickedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPickedEventArgs>
{
    HRESULT __stdcall get_AddedItems(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AddedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RemovedItems(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RemovedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPresenter>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTransitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTransitions(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPresenter2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPresenter2>
{
    HRESULT __stdcall get_Footer(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Footer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Footer(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Footer(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FooterTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FooterTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FooterTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTransitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FooterTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FooterTransitions(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FooterTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPresenterStatics> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPresenterStatics>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTransitionsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPresenterStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPresenterStatics2>
{
    HRESULT __stdcall get_FooterProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FooterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FooterTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTransitionsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FooterTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsStackPanel> : produce_base<D, Windows::UI::Xaml::Controls::IItemsStackPanel>
{
    HRESULT __stdcall get_GroupPadding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupPadding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupPadding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GroupPadding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstCacheIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstCacheIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstVisibleIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstVisibleIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LastVisibleIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LastVisibleIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LastCacheIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LastCacheIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollingDirection(Windows::UI::Xaml::Controls::PanelScrollingDirection * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ScrollingDirection());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupHeaderPlacement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GroupHeaderPlacement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemsUpdatingScrollMode(Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemsUpdatingScrollMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemsUpdatingScrollMode(Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemsUpdatingScrollMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CacheLength(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CacheLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CacheLength(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CacheLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsStackPanel2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsStackPanel2>
{
    HRESULT __stdcall get_AreStickyGroupHeadersEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreStickyGroupHeadersEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreStickyGroupHeadersEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreStickyGroupHeadersEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsStackPanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::IItemsStackPanelStatics>
{
    HRESULT __stdcall get_GroupPaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupPaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupHeaderPlacementProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupHeaderPlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CacheLengthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CacheLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsStackPanelStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>
{
    HRESULT __stdcall get_AreStickyGroupHeadersEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreStickyGroupHeadersEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsWrapGrid> : produce_base<D, Windows::UI::Xaml::Controls::IItemsWrapGrid>
{
    HRESULT __stdcall get_GroupPadding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupPadding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupPadding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GroupPadding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumns(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaximumRowsOrColumns());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaximumRowsOrColumns(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaximumRowsOrColumns(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemWidth(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemHeight(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstCacheIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstCacheIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstVisibleIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FirstVisibleIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LastVisibleIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LastVisibleIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LastCacheIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LastCacheIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollingDirection(Windows::UI::Xaml::Controls::PanelScrollingDirection * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ScrollingDirection());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupHeaderPlacement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GroupHeaderPlacement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CacheLength(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CacheLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CacheLength(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CacheLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsWrapGrid2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsWrapGrid2>
{
    HRESULT __stdcall get_AreStickyGroupHeadersEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreStickyGroupHeadersEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreStickyGroupHeadersEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreStickyGroupHeadersEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsWrapGridStatics> : produce_base<D, Windows::UI::Xaml::Controls::IItemsWrapGridStatics>
{
    HRESULT __stdcall get_GroupPaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupPaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumnsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaximumRowsOrColumnsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupHeaderPlacementProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupHeaderPlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CacheLengthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CacheLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsWrapGridStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>
{
    HRESULT __stdcall get_AreStickyGroupHeadersEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreStickyGroupHeadersEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBox> : produce_base<D, Windows::UI::Xaml::Controls::IListBox>
{
    HRESULT __stdcall get_SelectedItems(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::SelectionMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::SelectionMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollIntoView(impl::abi_arg_in<Windows::Foundation::IInspectable> item) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScrollIntoView(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBox2> : produce_base<D, Windows::UI::Xaml::Controls::IListBox2>
{
    HRESULT __stdcall get_SingleSelectionFollowsFocus(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SingleSelectionFollowsFocus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SingleSelectionFollowsFocus(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SingleSelectionFollowsFocus(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IListBox> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBoxItem> : produce_base<D, Windows::UI::Xaml::Controls::IListBoxItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBoxItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListBoxItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IListBoxItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IListBoxStatics>
{
    HRESULT __stdcall get_SelectionModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IListBoxStatics2>
{
    HRESULT __stdcall get_SingleSelectionFollowsFocusProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SingleSelectionFollowsFocusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListPickerFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IListPickerFlyout>
{
    HRESULT __stdcall get_ItemsSource(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemsSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemsSource(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemsSource(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMemberPath(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DisplayMemberPath());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DisplayMemberPath(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayMemberPath(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedIndex(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedIndex(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedItem(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedItem(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedItem(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedValue(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedValue());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedValue(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedValue(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedValuePath(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedValuePath());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedValuePath(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedValuePath(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedItems(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ItemsPicked(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListPickerFlyout, Windows::UI::Xaml::Controls::ItemsPickedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ItemsPicked(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListPickerFlyout, Windows::UI::Xaml::Controls::ItemsPickedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ItemsPicked(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemsPicked(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowAtAsync(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> target, impl::abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable>>> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ShowAtAsync(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&target)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListPickerFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>
{
    HRESULT __stdcall get_ItemsSourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemsSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMemberPathProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DisplayMemberPathProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedIndexProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedItemProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedItemProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedValueProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedValueProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedValuePathProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedValuePathProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListView> : produce_base<D, Windows::UI::Xaml::Controls::IListView>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBase> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBase>
{
    HRESULT __stdcall get_SelectedItems(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::ListViewSelectionMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::ListViewSelectionMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSwipeEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSwipeEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSwipeEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSwipeEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanDragItems(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanDragItems());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CanDragItems(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CanDragItems(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanReorderItems(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanReorderItems());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CanReorderItems(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CanReorderItems(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsItemClickEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsItemClickEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsItemClickEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsItemClickEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DataFetchSize(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DataFetchSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DataFetchSize(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DataFetchSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IncrementalLoadingThreshold(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IncrementalLoadingThreshold());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IncrementalLoadingThreshold(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IncrementalLoadingThreshold(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IncrementalLoadingTrigger(Windows::UI::Xaml::Controls::IncrementalLoadingTrigger * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IncrementalLoadingTrigger());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IncrementalLoadingTrigger(Windows::UI::Xaml::Controls::IncrementalLoadingTrigger value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IncrementalLoadingTrigger(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ItemClick(impl::abi_arg_in<Windows::UI::Xaml::Controls::ItemClickEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ItemClick(*reinterpret_cast<const Windows::UI::Xaml::Controls::ItemClickEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ItemClick(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemClick(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DragItemsStarting(impl::abi_arg_in<Windows::UI::Xaml::Controls::DragItemsStartingEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DragItemsStarting(*reinterpret_cast<const Windows::UI::Xaml::Controls::DragItemsStartingEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DragItemsStarting(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DragItemsStarting(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollIntoView(impl::abi_arg_in<Windows::Foundation::IInspectable> item) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScrollIntoView(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_LoadMoreItemsAsync(impl::abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::UI::Xaml::Data::LoadMoreItemsResult>> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().LoadMoreItemsAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollIntoViewWithAlignment(impl::abi_arg_in<Windows::Foundation::IInspectable> item, Windows::UI::Xaml::Controls::ScrollIntoViewAlignment alignment) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScrollIntoView(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item), alignment);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTransitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTransitions(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBase2> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBase2>
{
    HRESULT __stdcall get_ShowsScrollingPlaceholders(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ShowsScrollingPlaceholders());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ShowsScrollingPlaceholders(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShowsScrollingPlaceholders(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContainerContentChanging(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ContainerContentChanging(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContainerContentChanging(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContainerContentChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetDesiredContainerUpdateDuration(impl::abi_arg_in<Windows::Foundation::TimeSpan> duration) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDesiredContainerUpdateDuration(*reinterpret_cast<const Windows::Foundation::TimeSpan *>(&duration));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Footer(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Footer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Footer(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Footer(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FooterTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FooterTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FooterTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTransitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FooterTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FooterTransitions(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FooterTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBase3> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBase3>
{
    HRESULT __stdcall get_ReorderMode(Windows::UI::Xaml::Controls::ListViewReorderMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ReorderMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ReorderMode(Windows::UI::Xaml::Controls::ListViewReorderMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ReorderMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBase4> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBase4>
{
    HRESULT __stdcall get_SelectedRanges(impl::abi_arg_out<Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Data::ItemIndexRange>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedRanges());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsMultiSelectCheckBoxEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsMultiSelectCheckBoxEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsMultiSelectCheckBoxEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsMultiSelectCheckBoxEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DragItemsCompleted(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DragItemsCompleted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DragItemsCompleted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DragItemsCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ChoosingItemContainer(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ChoosingItemContainer(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ChoosingItemContainer(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ChoosingItemContainer(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ChoosingGroupHeaderContainer(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ChoosingGroupHeaderContainer(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ChoosingGroupHeaderContainer(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ChoosingGroupHeaderContainer(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectRange(impl::abi_arg_in<Windows::UI::Xaml::Data::IItemIndexRange> itemIndexRange) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectRange(*reinterpret_cast<const Windows::UI::Xaml::Data::ItemIndexRange *>(&itemIndexRange));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_DeselectRange(impl::abi_arg_in<Windows::UI::Xaml::Data::IItemIndexRange> itemIndexRange) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DeselectRange(*reinterpret_cast<const Windows::UI::Xaml::Data::ItemIndexRange *>(&itemIndexRange));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBase5> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBase5>
{
    HRESULT __stdcall get_SingleSelectionFollowsFocus(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SingleSelectionFollowsFocus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SingleSelectionFollowsFocus(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SingleSelectionFollowsFocus(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_IsDragSource(bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().IsDragSource());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IListViewBase> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseHeaderItem> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseStatics> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseStatics>
{
    HRESULT __stdcall get_SelectionModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSwipeEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSwipeEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanDragItemsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanDragItemsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanReorderItemsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanReorderItemsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsItemClickEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsItemClickEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DataFetchSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DataFetchSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IncrementalLoadingThresholdProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IncrementalLoadingThresholdProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IncrementalLoadingTriggerProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IncrementalLoadingTriggerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SemanticZoomOwnerProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SemanticZoomOwnerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsActiveViewProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsActiveViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomedInViewProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomedInViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTransitionsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseStatics2>
{
    HRESULT __stdcall get_ShowsScrollingPlaceholdersProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ShowsScrollingPlaceholdersProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FooterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FooterTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTransitionsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FooterTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseStatics3>
{
    HRESULT __stdcall get_ReorderModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ReorderModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseStatics4>
{
    HRESULT __stdcall get_IsMultiSelectCheckBoxEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsMultiSelectCheckBoxEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseStatics5> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseStatics5>
{
    HRESULT __stdcall get_SingleSelectionFollowsFocusProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SingleSelectionFollowsFocusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListViewFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IListView> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewHeaderItem> : produce_base<D, Windows::UI::Xaml::Controls::IListViewHeaderItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewHeaderItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IListViewHeaderItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewItem> : produce_base<D, Windows::UI::Xaml::Controls::IListViewItem>
{
    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListViewItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IListViewItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewPersistenceHelper> : produce_base<D, Windows::UI::Xaml::Controls::IListViewPersistenceHelper>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics> : produce_base<D, Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>
{
    HRESULT __stdcall abi_GetRelativeScrollPosition(impl::abi_arg_in<Windows::UI::Xaml::Controls::IListViewBase> listViewBase, impl::abi_arg_in<Windows::UI::Xaml::Controls::ListViewItemToKeyHandler> itemToKeyHandler, impl::abi_arg_out<hstring> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetRelativeScrollPosition(*reinterpret_cast<const Windows::UI::Xaml::Controls::ListViewBase *>(&listViewBase), *reinterpret_cast<const Windows::UI::Xaml::Controls::ListViewItemToKeyHandler *>(&itemToKeyHandler)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetRelativeScrollPositionAsync(impl::abi_arg_in<Windows::UI::Xaml::Controls::IListViewBase> listViewBase, impl::abi_arg_in<hstring> relativeScrollPosition, impl::abi_arg_in<Windows::UI::Xaml::Controls::ListViewKeyToItemHandler> keyToItemHandler, impl::abi_arg_out<Windows::Foundation::IAsyncAction> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().SetRelativeScrollPositionAsync(*reinterpret_cast<const Windows::UI::Xaml::Controls::ListViewBase *>(&listViewBase), *reinterpret_cast<const hstring *>(&relativeScrollPosition), *reinterpret_cast<const Windows::UI::Xaml::Controls::ListViewKeyToItemHandler *>(&keyToItemHandler)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaElement> : produce_base<D, Windows::UI::Xaml::Controls::IMediaElement>
{
    HRESULT __stdcall get_PosterSource(impl::abi_arg_out<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PosterSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PosterSource(impl::abi_arg_in<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PosterSource(*reinterpret_cast<const Windows::UI::Xaml::Media::ImageSource *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Source(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Source());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Source(impl::abi_arg_in<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<const Windows::Foundation::Uri *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsMuted(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsMuted());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsMuted(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsMuted(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsAudioOnly(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsAudioOnly());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoPlay(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AutoPlay());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AutoPlay(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AutoPlay(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Volume(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Volume());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Volume(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Volume(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Balance(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Balance());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Balance(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Balance(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalVideoHeight(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NaturalVideoHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalVideoWidth(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NaturalVideoWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalDuration(impl::abi_arg_out<Windows::UI::Xaml::Duration> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NaturalDuration());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Position(impl::abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Position());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Position(impl::abi_arg_in<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Position(*reinterpret_cast<const Windows::Foundation::TimeSpan *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DownloadProgress(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DownloadProgress());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BufferingProgress(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BufferingProgress());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DownloadProgressOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DownloadProgressOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CurrentState(Windows::UI::Xaml::Media::MediaElementState * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CurrentState());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Markers(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::TimelineMarker>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Markers());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanSeek(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanSeek());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanPause(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanPause());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioStreamCount(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AudioStreamCount());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioStreamIndex(impl::abi_arg_out<Windows::Foundation::IReference<int32_t>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AudioStreamIndex());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AudioStreamIndex(impl::abi_arg_in<Windows::Foundation::IReference<int32_t>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AudioStreamIndex(*reinterpret_cast<const Windows::Foundation::IReference<int32_t> *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaybackRate(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaybackRate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaybackRate(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlaybackRate(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsLooping(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsLooping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsLooping(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsLooping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToSource(impl::abi_arg_out<Windows::Media::PlayTo::IPlayToSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlayToSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultPlaybackRate(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultPlaybackRate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DefaultPlaybackRate(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultPlaybackRate(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AspectRatioWidth(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AspectRatioWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AspectRatioHeight(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AspectRatioHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RealTimePlayback(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RealTimePlayback());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_RealTimePlayback(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RealTimePlayback(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioCategory(Windows::UI::Xaml::Media::AudioCategory * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AudioCategory());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AudioCategory(Windows::UI::Xaml::Media::AudioCategory value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AudioCategory(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioDeviceType(Windows::UI::Xaml::Media::AudioDeviceType * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AudioDeviceType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AudioDeviceType(Windows::UI::Xaml::Media::AudioDeviceType value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AudioDeviceType(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ProtectionManager(impl::abi_arg_out<Windows::Media::Protection::IMediaProtectionManager> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ProtectionManager());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ProtectionManager(impl::abi_arg_in<Windows::Media::Protection::IMediaProtectionManager> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProtectionManager(*reinterpret_cast<const Windows::Media::Protection::MediaProtectionManager *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Stereo3DVideoPackingMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stereo3DVideoPackingMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stereo3DVideoRenderMode(Windows::UI::Xaml::Media::Stereo3DVideoRenderMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Stereo3DVideoRenderMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stereo3DVideoRenderMode(Windows::UI::Xaml::Media::Stereo3DVideoRenderMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stereo3DVideoRenderMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStereo3DVideo(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsStereo3DVideo());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_MediaOpened(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().MediaOpened(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_MediaOpened(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MediaOpened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_MediaEnded(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().MediaEnded(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_MediaEnded(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MediaEnded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_MediaFailed(impl::abi_arg_in<Windows::UI::Xaml::ExceptionRoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().MediaFailed(*reinterpret_cast<const Windows::UI::Xaml::ExceptionRoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_MediaFailed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MediaFailed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DownloadProgressChanged(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DownloadProgressChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DownloadProgressChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DownloadProgressChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_BufferingProgressChanged(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().BufferingProgressChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_BufferingProgressChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BufferingProgressChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CurrentStateChanged(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().CurrentStateChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CurrentStateChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CurrentStateChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_MarkerReached(impl::abi_arg_in<Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().MarkerReached(*reinterpret_cast<const Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_MarkerReached(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MarkerReached(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_RateChanged(impl::abi_arg_in<Windows::UI::Xaml::Media::RateChangedRoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().RateChanged(*reinterpret_cast<const Windows::UI::Xaml::Media::RateChangedRoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_RateChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RateChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_VolumeChanged(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().VolumeChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_VolumeChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VolumeChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SeekCompleted(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SeekCompleted(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SeekCompleted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SeekCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Stop() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stop();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Play() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Play();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Pause() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Pause();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CanPlayType(impl::abi_arg_in<hstring> type, Windows::UI::Xaml::Media::MediaCanPlayResponse * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().CanPlayType(*reinterpret_cast<const hstring *>(&type)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetSource(impl::abi_arg_in<Windows::Storage::Streams::IRandomAccessStream> stream, impl::abi_arg_in<hstring> mimeType) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetSource(*reinterpret_cast<const Windows::Storage::Streams::IRandomAccessStream *>(&stream), *reinterpret_cast<const hstring *>(&mimeType));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAudioStreamLanguage(impl::abi_arg_in<Windows::Foundation::IReference<int32_t>> index, impl::abi_arg_out<hstring> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetAudioStreamLanguage(*reinterpret_cast<const Windows::Foundation::IReference<int32_t> *>(&index)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_AddAudioEffect(impl::abi_arg_in<hstring> effectID, bool effectOptional, impl::abi_arg_in<Windows::Foundation::Collections::IPropertySet> effectConfiguration) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddAudioEffect(*reinterpret_cast<const hstring *>(&effectID), effectOptional, *reinterpret_cast<const Windows::Foundation::Collections::IPropertySet *>(&effectConfiguration));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_AddVideoEffect(impl::abi_arg_in<hstring> effectID, bool effectOptional, impl::abi_arg_in<Windows::Foundation::Collections::IPropertySet> effectConfiguration) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddVideoEffect(*reinterpret_cast<const hstring *>(&effectID), effectOptional, *reinterpret_cast<const Windows::Foundation::Collections::IPropertySet *>(&effectConfiguration));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RemoveAllEffects() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveAllEffects();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActualStereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ActualStereo3DVideoPackingMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaElement2> : produce_base<D, Windows::UI::Xaml::Controls::IMediaElement2>
{
    HRESULT __stdcall get_AreTransportControlsEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreTransportControlsEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreTransportControlsEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreTransportControlsEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindow(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFullWindow());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFullWindow(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFullWindow(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetMediaStreamSource(impl::abi_arg_in<Windows::Media::Core::IMediaSource> source) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetMediaStreamSource(*reinterpret_cast<const Windows::Media::Core::IMediaSource *>(&source));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToPreferredSourceUri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlayToPreferredSourceUri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlayToPreferredSourceUri(impl::abi_arg_in<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlayToPreferredSourceUri(*reinterpret_cast<const Windows::Foundation::Uri *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaElement3> : produce_base<D, Windows::UI::Xaml::Controls::IMediaElement3>
{
    HRESULT __stdcall get_TransportControls(impl::abi_arg_out<Windows::UI::Xaml::Controls::IMediaTransportControls> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TransportControls());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TransportControls(impl::abi_arg_in<Windows::UI::Xaml::Controls::IMediaTransportControls> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TransportControls(*reinterpret_cast<const Windows::UI::Xaml::Controls::MediaTransportControls *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PartialMediaFailureDetected(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaElement, Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PartialMediaFailureDetected(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaElement, Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PartialMediaFailureDetected(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PartialMediaFailureDetected(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetPlaybackSource(impl::abi_arg_in<Windows::Media::Playback::IMediaPlaybackSource> source) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPlaybackSource(*reinterpret_cast<const Windows::Media::Playback::IMediaPlaybackSource *>(&source));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAsCastingSource(impl::abi_arg_out<Windows::Media::Casting::ICastingSource> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetAsCastingSource());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaElementStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMediaElementStatics>
{
    HRESULT __stdcall get_PosterSourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PosterSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsMutedProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsMutedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsAudioOnlyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsAudioOnlyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoPlayProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AutoPlayProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VolumeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VolumeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BalanceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BalanceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalVideoHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NaturalVideoHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalVideoWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NaturalVideoWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalDurationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NaturalDurationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PositionProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PositionProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DownloadProgressProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DownloadProgressProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BufferingProgressProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BufferingProgressProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DownloadProgressOffsetProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DownloadProgressOffsetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CurrentStateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CurrentStateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanSeekProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanSeekProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanPauseProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanPauseProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioStreamCountProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AudioStreamCountProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioStreamIndexProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AudioStreamIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaybackRateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaybackRateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsLoopingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsLoopingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToSourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlayToSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultPlaybackRateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultPlaybackRateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AspectRatioWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AspectRatioWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AspectRatioHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AspectRatioHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RealTimePlaybackProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RealTimePlaybackProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioCategoryProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AudioCategoryProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioDeviceTypeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AudioDeviceTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ProtectionManagerProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ProtectionManagerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stereo3DVideoPackingModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Stereo3DVideoPackingModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stereo3DVideoRenderModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Stereo3DVideoRenderModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStereo3DVideoProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsStereo3DVideoProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActualStereo3DVideoPackingModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ActualStereo3DVideoPackingModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaElementStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IMediaElementStatics2>
{
    HRESULT __stdcall get_AreTransportControlsEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreTransportControlsEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindowProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFullWindowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToPreferredSourceUriProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlayToPreferredSourceUriProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerElement> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerElement>
{
    HRESULT __stdcall get_Source(impl::abi_arg_out<Windows::Media::Playback::IMediaPlaybackSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Source());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Source(impl::abi_arg_in<Windows::Media::Playback::IMediaPlaybackSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<const Windows::Media::Playback::IMediaPlaybackSource *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TransportControls(impl::abi_arg_out<Windows::UI::Xaml::Controls::IMediaTransportControls> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TransportControls());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TransportControls(impl::abi_arg_in<Windows::UI::Xaml::Controls::IMediaTransportControls> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TransportControls(*reinterpret_cast<const Windows::UI::Xaml::Controls::MediaTransportControls *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AreTransportControlsEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreTransportControlsEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreTransportControlsEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreTransportControlsEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PosterSource(impl::abi_arg_out<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PosterSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PosterSource(impl::abi_arg_in<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PosterSource(*reinterpret_cast<const Windows::UI::Xaml::Media::ImageSource *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoPlay(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AutoPlay());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AutoPlay(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AutoPlay(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindow(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFullWindow());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFullWindow(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFullWindow(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MediaPlayer(impl::abi_arg_out<Windows::Media::Playback::IMediaPlayer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MediaPlayer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetMediaPlayer(impl::abi_arg_in<Windows::Media::Playback::IMediaPlayer> mediaPlayer) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetMediaPlayer(*reinterpret_cast<const Windows::Media::Playback::MediaPlayer *>(&mediaPlayer));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerElementFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IMediaPlayerElement> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerElementStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>
{
    HRESULT __stdcall get_SourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AreTransportControlsEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreTransportControlsEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PosterSourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PosterSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoPlayProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AutoPlayProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindowProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFullWindowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MediaPlayerProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MediaPlayerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenter>
{
    HRESULT __stdcall get_MediaPlayer(impl::abi_arg_out<Windows::Media::Playback::IMediaPlayer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MediaPlayer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MediaPlayer(impl::abi_arg_in<Windows::Media::Playback::IMediaPlayer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MediaPlayer(*reinterpret_cast<const Windows::Media::Playback::MediaPlayer *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindow(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFullWindow());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFullWindow(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFullWindow(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IMediaPlayerPresenter> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>
{
    HRESULT __stdcall get_MediaPlayerProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MediaPlayerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindowProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFullWindowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControls> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControls>
{
    HRESULT __stdcall get_IsFullWindowButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFullWindowButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFullWindowButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFullWindowButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindowEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFullWindowEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFullWindowEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFullWindowEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsZoomButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsZoomEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastForwardButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFastForwardButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFastForwardButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFastForwardButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastForwardEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFastForwardEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFastForwardEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFastForwardEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastRewindButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFastRewindButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFastRewindButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFastRewindButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastRewindEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFastRewindEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFastRewindEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsFastRewindEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStopButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsStopButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsStopButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsStopButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStopEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsStopEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsStopEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsStopEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVolumeButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsVolumeButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsVolumeButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsVolumeButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVolumeEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsVolumeEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsVolumeEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsVolumeEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPlaybackRateButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPlaybackRateButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPlaybackRateButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsPlaybackRateButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPlaybackRateEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPlaybackRateEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPlaybackRateEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsPlaybackRateEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSeekBarVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSeekBarVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSeekBarVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSeekBarVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSeekEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSeekEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSeekEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSeekEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCompact(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsCompact());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsCompact(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsCompact(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControls2> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControls2>
{
    HRESULT __stdcall get_IsSkipForwardButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSkipForwardButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSkipForwardButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSkipForwardButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipForwardEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSkipForwardEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSkipForwardEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSkipForwardEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipBackwardButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSkipBackwardButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSkipBackwardButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSkipBackwardButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipBackwardEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSkipBackwardEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSkipBackwardEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSkipBackwardEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsNextTrackButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsNextTrackButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsNextTrackButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsNextTrackButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPreviousTrackButtonVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPreviousTrackButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPreviousTrackButtonVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsPreviousTrackButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FastPlayFallbackBehaviour(Windows::UI::Xaml::Media::FastPlayFallbackBehaviour * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FastPlayFallbackBehaviour());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FastPlayFallbackBehaviour(Windows::UI::Xaml::Media::FastPlayFallbackBehaviour value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FastPlayFallbackBehaviour(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ThumbnailRequested(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaTransportControls, Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ThumbnailRequested(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaTransportControls, Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ThumbnailRequested(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ThumbnailRequested(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControlsFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IMediaTransportControls> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControlsHelper> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>
{
    HRESULT __stdcall get_DropoutOrderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DropoutOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetDropoutOrder(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IReference<int32_t>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetDropoutOrder(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetDropoutOrder(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IReference<int32_t>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDropoutOrder(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IReference<int32_t> *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControlsStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>
{
    HRESULT __stdcall get_IsFullWindowButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFullWindowButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindowEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFullWindowEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastForwardButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFastForwardButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastForwardEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFastForwardEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastRewindButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFastRewindButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastRewindEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsFastRewindEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStopButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsStopButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStopEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsStopEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVolumeButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsVolumeButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVolumeEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsVolumeEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPlaybackRateButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPlaybackRateButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPlaybackRateEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPlaybackRateEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSeekBarVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSeekBarVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSeekEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSeekEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCompactProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsCompactProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>
{
    HRESULT __stdcall get_IsSkipForwardButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSkipForwardButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipForwardEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSkipForwardEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipBackwardButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSkipBackwardButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipBackwardEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSkipBackwardEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsNextTrackButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsNextTrackButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPreviousTrackButtonVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPreviousTrackButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FastPlayFallbackBehaviourProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FastPlayFallbackBehaviourProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyout>
{
    HRESULT __stdcall get_Items(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Items());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MenuFlyoutPresenterStyle(impl::abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MenuFlyoutPresenterStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MenuFlyoutPresenterStyle(impl::abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MenuFlyoutPresenterStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyout2> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyout2>
{
    HRESULT __stdcall abi_ShowAt(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> targetElement, impl::abi_arg_in<Windows::Foundation::Point> point) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShowAt(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&targetElement), *reinterpret_cast<const Windows::Foundation::Point *>(&point));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IMenuFlyout> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutItem> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutItem>
{
    HRESULT __stdcall get_Text(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Text());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Text(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Text(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Command(impl::abi_arg_out<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Command());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Command(impl::abi_arg_in<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Command(*reinterpret_cast<const Windows::UI::Xaml::Input::ICommand *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CommandParameter(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CommandParameter());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CommandParameter(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CommandParameter(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Click(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Click(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Click(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Click(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemBase> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IMenuFlyoutItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>
{
    HRESULT __stdcall get_TextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CommandProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CommandProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CommandParameterProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CommandParameterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>
{
    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IMenuFlyoutPresenterTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutSeparator> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IMenuFlyoutSeparator> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutStatics>
{
    HRESULT __stdcall get_MenuFlyoutPresenterStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MenuFlyoutPresenterStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutSubItem> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>
{
    HRESULT __stdcall get_Items(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Items());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Text(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Text());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Text(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Text(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>
{
    HRESULT __stdcall get_TextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::INavigate> : produce_base<D, Windows::UI::Xaml::Controls::INavigate>
{
    HRESULT __stdcall abi_Navigate(impl::abi_arg_in<Windows::UI::Xaml::Interop::TypeName> sourcePageType, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().Navigate(*reinterpret_cast<const Windows::UI::Xaml::Interop::TypeName *>(&sourcePageType)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::INotifyEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::INotifyEventArgs>
{
    HRESULT __stdcall get_Value(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Value());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::INotifyEventArgs2> : produce_base<D, Windows::UI::Xaml::Controls::INotifyEventArgs2>
{
    HRESULT __stdcall get_CallingUri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CallingUri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPage> : produce_base<D, Windows::UI::Xaml::Controls::IPage>
{
    HRESULT __stdcall get_Frame(impl::abi_arg_out<Windows::UI::Xaml::Controls::IFrame> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Frame());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NavigationCacheMode(Windows::UI::Xaml::Navigation::NavigationCacheMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NavigationCacheMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_NavigationCacheMode(Windows::UI::Xaml::Navigation::NavigationCacheMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigationCacheMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TopAppBar(impl::abi_arg_out<Windows::UI::Xaml::Controls::IAppBar> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TopAppBar());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TopAppBar(impl::abi_arg_in<Windows::UI::Xaml::Controls::IAppBar> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TopAppBar(*reinterpret_cast<const Windows::UI::Xaml::Controls::AppBar *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BottomAppBar(impl::abi_arg_out<Windows::UI::Xaml::Controls::IAppBar> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BottomAppBar());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BottomAppBar(impl::abi_arg_in<Windows::UI::Xaml::Controls::IAppBar> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BottomAppBar(*reinterpret_cast<const Windows::UI::Xaml::Controls::AppBar *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPageFactory> : produce_base<D, Windows::UI::Xaml::Controls::IPageFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IPage> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPageOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IPageOverrides>
{
    HRESULT __stdcall abi_OnNavigatedFrom(impl::abi_arg_in<Windows::UI::Xaml::Navigation::INavigationEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnNavigatedFrom(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigationEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnNavigatedTo(impl::abi_arg_in<Windows::UI::Xaml::Navigation::INavigationEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnNavigatedTo(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigationEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnNavigatingFrom(impl::abi_arg_in<Windows::UI::Xaml::Navigation::INavigatingCancelEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnNavigatingFrom(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPageStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPageStatics>
{
    HRESULT __stdcall get_FrameProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FrameProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TopAppBarProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TopAppBarProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BottomAppBarProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BottomAppBarProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPanel> : produce_base<D, Windows::UI::Xaml::Controls::IPanel>
{
    HRESULT __stdcall get_Children(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Children());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Background(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Background());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Background(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Background(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsItemsHost(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsItemsHost());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChildrenTransitions(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ChildrenTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ChildrenTransitions(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ChildrenTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::IPanelFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IPanel> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPanelStatics>
{
    HRESULT __stdcall get_BackgroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsItemsHostProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsItemsHostProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChildrenTransitionsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ChildrenTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBox> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBox>
{
    HRESULT __stdcall get_Password(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Password());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Password(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Password(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PasswordChar(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PasswordChar());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PasswordChar(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PasswordChar(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPasswordRevealButtonEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPasswordRevealButtonEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPasswordRevealButtonEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsPasswordRevealButtonEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLength(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLength(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PasswordChanged(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PasswordChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PasswordChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PasswordChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContextMenuOpening(impl::abi_arg_in<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ContextMenuOpening(*reinterpret_cast<const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContextMenuOpening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBox2> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBox2>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColor(impl::abi_arg_out<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionHighlightColor());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionHighlightColor(impl::abi_arg_in<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionHighlightColor(*reinterpret_cast<const Windows::UI::Xaml::Media::SolidColorBrush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PreventKeyboardDisplayOnProgrammaticFocus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreventKeyboardDisplayOnProgrammaticFocus(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Paste(impl::abi_arg_in<Windows::UI::Xaml::Controls::TextControlPasteEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Paste(*reinterpret_cast<const Windows::UI::Xaml::Controls::TextControlPasteEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Paste(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Paste(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBox3> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBox3>
{
    HRESULT __stdcall get_PasswordRevealMode(Windows::UI::Xaml::Controls::PasswordRevealMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PasswordRevealMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PasswordRevealMode(Windows::UI::Xaml::Controls::PasswordRevealMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PasswordRevealMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextReadingOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextReadingOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScope(impl::abi_arg_out<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InputScope());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_InputScope(impl::abi_arg_in<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InputScope(*reinterpret_cast<const Windows::UI::Xaml::Input::InputScope *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics>
{
    HRESULT __stdcall get_PasswordProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PasswordProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PasswordCharProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PasswordCharProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPasswordRevealButtonEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPasswordRevealButtonEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLengthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics2>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionHighlightColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PreventKeyboardDisplayOnProgrammaticFocusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics3>
{
    HRESULT __stdcall get_PasswordRevealModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PasswordRevealModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextReadingOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScopeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InputScopeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPathIcon> : produce_base<D, Windows::UI::Xaml::Controls::IPathIcon>
{
    HRESULT __stdcall get_Data(impl::abi_arg_out<Windows::UI::Xaml::Media::IGeometry> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Data());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Data(impl::abi_arg_in<Windows::UI::Xaml::Media::IGeometry> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Data(*reinterpret_cast<const Windows::UI::Xaml::Media::Geometry *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPathIconFactory> : produce_base<D, Windows::UI::Xaml::Controls::IPathIconFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IPathIcon> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPathIconStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPathIconStatics>
{
    HRESULT __stdcall get_DataProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DataProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPickerFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IPickerFlyout>
{
    HRESULT __stdcall get_Content(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Content(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ConfirmationButtonsVisible(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ConfirmationButtonsVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ConfirmationButtonsVisible(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ConfirmationButtonsVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Confirmed(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PickerFlyout, Windows::UI::Xaml::Controls::PickerConfirmedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Confirmed(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PickerFlyout, Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Confirmed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Confirmed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowAtAsync(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> target, impl::abi_arg_out<Windows::Foundation::IAsyncOperation<bool>> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ShowAtAsync(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&target)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPickerFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPickerFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPickerFlyoutStatics>
{
    HRESULT __stdcall get_ContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ConfirmationButtonsVisibleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ConfirmationButtonsVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivot> : produce_base<D, Windows::UI::Xaml::Controls::IPivot>
{
    HRESULT __stdcall get_Title(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Title());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Title(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Title(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TitleTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TitleTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TitleTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TitleTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedIndex(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedIndex(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedItem(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedItem(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedItem(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsLocked(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsLocked());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsLocked(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsLocked(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectionChanged(impl::abi_arg_in<Windows::UI::Xaml::Controls::SelectionChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SelectionChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::SelectionChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PivotItemLoading(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PivotItemLoading(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PivotItemLoading(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PivotItemLoading(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PivotItemLoaded(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PivotItemLoaded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PivotItemLoaded(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PivotItemLoaded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PivotItemUnloading(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PivotItemUnloading(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PivotItemUnloading(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PivotItemUnloading(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PivotItemUnloaded(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PivotItemUnloaded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PivotItemUnloaded(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PivotItemUnloaded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivot2> : produce_base<D, Windows::UI::Xaml::Controls::IPivot2>
{
    HRESULT __stdcall get_LeftHeader(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LeftHeader());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LeftHeader(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LeftHeader(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LeftHeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LeftHeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LeftHeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LeftHeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RightHeader(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RightHeader());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_RightHeader(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RightHeader(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RightHeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RightHeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_RightHeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RightHeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivot3> : produce_base<D, Windows::UI::Xaml::Controls::IPivot3>
{
    HRESULT __stdcall get_HeaderFocusVisualPlacement(Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderFocusVisualPlacement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderFocusVisualPlacement(Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderFocusVisualPlacement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHeaderItemsCarouselEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsHeaderItemsCarouselEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsHeaderItemsCarouselEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsHeaderItemsCarouselEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotFactory> : produce_base<D, Windows::UI::Xaml::Controls::IPivotFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IPivot> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotItem> : produce_base<D, Windows::UI::Xaml::Controls::IPivotItem>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotItemEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IPivotItemEventArgs>
{
    HRESULT __stdcall get_Item(impl::abi_arg_out<Windows::UI::Xaml::Controls::IPivotItem> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Item());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Item(impl::abi_arg_in<Windows::UI::Xaml::Controls::IPivotItem> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Item(*reinterpret_cast<const Windows::UI::Xaml::Controls::PivotItem *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IPivotItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IPivotItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPivotItemStatics>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPivotStatics>
{
    HRESULT __stdcall get_TitleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TitleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TitleTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TitleTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedIndexProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedItemProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedItemProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsLockedProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsLockedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SlideInAnimationGroupProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SlideInAnimationGroupProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetSlideInAnimationGroup(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetSlideInAnimationGroup(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetSlideInAnimationGroup(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetSlideInAnimationGroup(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IPivotStatics2>
{
    HRESULT __stdcall get_LeftHeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LeftHeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LeftHeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LeftHeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RightHeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RightHeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RightHeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RightHeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IPivotStatics3>
{
    HRESULT __stdcall get_HeaderFocusVisualPlacementProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderFocusVisualPlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHeaderItemsCarouselEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsHeaderItemsCarouselEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IProgressBar> : produce_base<D, Windows::UI::Xaml::Controls::IProgressBar>
{
    HRESULT __stdcall get_IsIndeterminate(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsIndeterminate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsIndeterminate(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsIndeterminate(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ShowError(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ShowError());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ShowError(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShowError(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ShowPaused(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ShowPaused());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ShowPaused(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShowPaused(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IProgressBarTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IProgressBarFactory> : produce_base<D, Windows::UI::Xaml::Controls::IProgressBarFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IProgressBar> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IProgressBarStatics> : produce_base<D, Windows::UI::Xaml::Controls::IProgressBarStatics>
{
    HRESULT __stdcall get_IsIndeterminateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsIndeterminateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ShowErrorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ShowErrorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ShowPausedProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ShowPausedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IProgressRing> : produce_base<D, Windows::UI::Xaml::Controls::IProgressRing>
{
    HRESULT __stdcall get_IsActive(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsActive());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsActive(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsActive(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IProgressRingTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IProgressRingStatics> : produce_base<D, Windows::UI::Xaml::Controls::IProgressRingStatics>
{
    HRESULT __stdcall get_IsActiveProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsActiveProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRadioButton> : produce_base<D, Windows::UI::Xaml::Controls::IRadioButton>
{
    HRESULT __stdcall get_GroupName(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupName());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupName(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GroupName(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRadioButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IRadioButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IRadioButton> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRadioButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRadioButtonStatics>
{
    HRESULT __stdcall get_GroupNameProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GroupNameProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRelativePanel> : produce_base<D, Windows::UI::Xaml::Controls::IRelativePanel>
{
    HRESULT __stdcall get_BorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadius(impl::abi_arg_out<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CornerRadius());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CornerRadius(impl::abi_arg_in<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CornerRadius(*reinterpret_cast<const Windows::UI::Xaml::CornerRadius *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRelativePanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::IRelativePanelFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IRelativePanel> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRelativePanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRelativePanelStatics>
{
    HRESULT __stdcall get_LeftOfProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LeftOfProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetLeftOf(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetLeftOf(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetLeftOf(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetLeftOf(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AboveProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AboveProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAbove(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAbove(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAbove(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAbove(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RightOfProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RightOfProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetRightOf(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetRightOf(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetRightOf(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetRightOf(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BelowProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BelowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetBelow(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetBelow(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetBelow(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetBelow(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignHorizontalCenterWithProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignHorizontalCenterWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignHorizontalCenterWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignHorizontalCenterWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignHorizontalCenterWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignHorizontalCenterWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignVerticalCenterWithProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignVerticalCenterWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignVerticalCenterWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignVerticalCenterWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignVerticalCenterWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignVerticalCenterWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignLeftWithProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignLeftWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignLeftWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignLeftWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignLeftWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignLeftWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignTopWithProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignTopWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignTopWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignTopWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignTopWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignTopWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignRightWithProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignRightWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignRightWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignRightWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignRightWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignRightWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignBottomWithProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignBottomWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignBottomWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignBottomWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignBottomWith(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignBottomWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignLeftWithPanelProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignLeftWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignLeftWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignLeftWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignLeftWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignLeftWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignTopWithPanelProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignTopWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignTopWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignTopWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignTopWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignTopWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignRightWithPanelProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignRightWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignRightWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignRightWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignRightWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignRightWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignBottomWithPanelProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignBottomWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignBottomWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignBottomWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignBottomWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignBottomWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignHorizontalCenterWithPanelProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignHorizontalCenterWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignHorizontalCenterWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignHorizontalCenterWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignHorizontalCenterWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignHorizontalCenterWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignVerticalCenterWithPanelProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AlignVerticalCenterWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignVerticalCenterWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetAlignVerticalCenterWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignVerticalCenterWithPanel(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAlignVerticalCenterWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadiusProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CornerRadiusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBox> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBox>
{
    HRESULT __stdcall get_IsReadOnly(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsReadOnly());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsReadOnly(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsReadOnly(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AcceptsReturn(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AcceptsReturn());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AcceptsReturn(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AcceptsReturn(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextWrapping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextWrapping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSpellCheckEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSpellCheckEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSpellCheckEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSpellCheckEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextPredictionEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextPredictionEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextPredictionEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTextPredictionEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Document(impl::abi_arg_out<Windows::UI::Text::ITextDocument> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Document());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScope(impl::abi_arg_out<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InputScope());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_InputScope(impl::abi_arg_in<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InputScope(*reinterpret_cast<const Windows::UI::Xaml::Input::InputScope *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextChanged(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectionChanged(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SelectionChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContextMenuOpening(impl::abi_arg_in<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ContextMenuOpening(*reinterpret_cast<const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContextMenuOpening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBox2> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBox2>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColor(impl::abi_arg_out<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionHighlightColor());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionHighlightColor(impl::abi_arg_in<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionHighlightColor(*reinterpret_cast<const Windows::UI::Xaml::Media::SolidColorBrush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PreventKeyboardDisplayOnProgrammaticFocus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreventKeyboardDisplayOnProgrammaticFocus(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsColorFontEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsColorFontEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Paste(impl::abi_arg_in<Windows::UI::Xaml::Controls::TextControlPasteEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Paste(*reinterpret_cast<const Windows::UI::Xaml::Controls::TextControlPasteEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Paste(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Paste(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBox3> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBox3>
{
    HRESULT __stdcall add_TextCompositionStarted(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextCompositionStarted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionStarted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextCompositionStarted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextCompositionChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextCompositionChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextCompositionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextCompositionEnded(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextCompositionEnded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionEnded(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextCompositionEnded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextReadingOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextReadingOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DesiredCandidateWindowAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DesiredCandidateWindowAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CandidateWindowBoundsChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().CandidateWindowBoundsChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CandidateWindowBoundsChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CandidateWindowBoundsChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextChanging(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextChanging(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextChanging(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBox4> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBox4>
{
    HRESULT __stdcall abi_GetLinguisticAlternativesAsync(impl::abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>>> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetLinguisticAlternativesAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ClipboardCopyFormat(Windows::UI::Xaml::Controls::RichEditClipboardFormat * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ClipboardCopyFormat());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ClipboardCopyFormat(Windows::UI::Xaml::Controls::RichEditClipboardFormat value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClipboardCopyFormat(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IRichEditBox> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics>
{
    HRESULT __stdcall get_IsReadOnlyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsReadOnlyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AcceptsReturnProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AcceptsReturnProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrappingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextWrappingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSpellCheckEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSpellCheckEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextPredictionEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextPredictionEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScopeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InputScopeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics2>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionHighlightColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PreventKeyboardDisplayOnProgrammaticFocusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsColorFontEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics3>
{
    HRESULT __stdcall get_DesiredCandidateWindowAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DesiredCandidateWindowAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextReadingOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics4>
{
    HRESULT __stdcall get_ClipboardCopyFormatProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ClipboardCopyFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlock> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlock>
{
    HRESULT __stdcall get_FontSize(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontSize(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamily(impl::abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontFamily(impl::abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeight(impl::abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontWeight(impl::abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontStretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Foreground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Foreground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Foreground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Foreground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextWrapping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextWrapping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextTrimming(Windows::UI::Xaml::TextTrimming * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextTrimming());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextTrimming(Windows::UI::Xaml::TextTrimming value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextTrimming(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Blocks(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Documents::Block>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Blocks());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineHeight(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LineHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineStackingStrategy());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LineStackingStrategy(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacing(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CharacterSpacing());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CharacterSpacing(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OverflowContentTarget(impl::abi_arg_out<Windows::UI::Xaml::Controls::IRichTextBlockOverflow> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OverflowContentTarget());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OverflowContentTarget(impl::abi_arg_in<Windows::UI::Xaml::Controls::IRichTextBlockOverflow> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OverflowContentTarget(*reinterpret_cast<const Windows::UI::Xaml::Controls::RichTextBlockOverflow *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSelectionEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextSelectionEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextSelectionEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTextSelectionEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HasOverflowContent(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HasOverflowContent());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentStart(impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentStart());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentEnd(impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentEnd());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionStart(impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionStart());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionEnd(impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionEnd());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BaselineOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BaselineOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectionChanged(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SelectionChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContextMenuOpening(impl::abi_arg_in<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ContextMenuOpening(*reinterpret_cast<const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContextMenuOpening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Select(impl::abi_arg_in<Windows::UI::Xaml::Documents::ITextPointer> start, impl::abi_arg_in<Windows::UI::Xaml::Documents::ITextPointer> end) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Select(*reinterpret_cast<const Windows::UI::Xaml::Documents::TextPointer *>(&start), *reinterpret_cast<const Windows::UI::Xaml::Documents::TextPointer *>(&end));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetPositionFromPoint(impl::abi_arg_in<Windows::Foundation::Point> point, impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetPositionFromPoint(*reinterpret_cast<const Windows::Foundation::Point *>(&point)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Focus(Windows::UI::Xaml::FocusState value, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().Focus(value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextIndent(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextIndent());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextIndent(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextIndent(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlock2> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlock2>
{
    HRESULT __stdcall get_MaxLines(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLines());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLines(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxLines(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBounds(Windows::UI::Xaml::TextLineBounds * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextLineBounds());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextLineBounds(Windows::UI::Xaml::TextLineBounds value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextLineBounds(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColor(impl::abi_arg_out<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionHighlightColor());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionHighlightColor(impl::abi_arg_in<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionHighlightColor(*reinterpret_cast<const Windows::UI::Xaml::Media::SolidColorBrush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OpticalMarginAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OpticalMarginAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsColorFontEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsColorFontEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextReadingOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextReadingOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlock3> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlock3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextScaleFactorEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTextScaleFactorEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflow> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflow>
{
    HRESULT __stdcall get_OverflowContentTarget(impl::abi_arg_out<Windows::UI::Xaml::Controls::IRichTextBlockOverflow> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OverflowContentTarget());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OverflowContentTarget(impl::abi_arg_in<Windows::UI::Xaml::Controls::IRichTextBlockOverflow> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OverflowContentTarget(*reinterpret_cast<const Windows::UI::Xaml::Controls::RichTextBlockOverflow *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentSource(impl::abi_arg_out<Windows::UI::Xaml::Controls::IRichTextBlock> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HasOverflowContent(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HasOverflowContent());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentStart(impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentStart());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentEnd(impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentEnd());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BaselineOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BaselineOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetPositionFromPoint(impl::abi_arg_in<Windows::Foundation::Point> point, impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetPositionFromPoint(*reinterpret_cast<const Windows::Foundation::Point *>(&point)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Focus(Windows::UI::Xaml::FocusState value, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().Focus(value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflow2> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>
{
    HRESULT __stdcall get_MaxLines(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLines());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLines(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxLines(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>
{
    HRESULT __stdcall get_OverflowContentTargetProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OverflowContentTargetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HasOverflowContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HasOverflowContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>
{
    HRESULT __stdcall get_MaxLinesProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLinesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics>
{
    HRESULT __stdcall get_FontSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamilyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretchProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrappingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextWrappingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextTrimmingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextTrimmingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineStackingStrategyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CharacterSpacingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OverflowContentTargetProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OverflowContentTargetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSelectionEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextSelectionEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HasOverflowContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HasOverflowContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextIndentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextIndentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics2>
{
    HRESULT __stdcall get_MaxLinesProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLinesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBoundsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextLineBoundsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionHighlightColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpticalMarginAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OpticalMarginAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsColorFontEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextReadingOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextScaleFactorEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRowDefinition> : produce_base<D, Windows::UI::Xaml::Controls::IRowDefinition>
{
    HRESULT __stdcall get_Height(impl::abi_arg_out<Windows::UI::Xaml::GridLength> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Height());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Height(impl::abi_arg_in<Windows::UI::Xaml::GridLength> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Height(*reinterpret_cast<const Windows::UI::Xaml::GridLength *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxHeight(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinHeight(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActualHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ActualHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRowDefinitionStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRowDefinitionStatics>
{
    HRESULT __stdcall get_HeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollContentPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IScrollContentPresenter>
{
    HRESULT __stdcall get_CanVerticallyScroll(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanVerticallyScroll());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CanVerticallyScroll(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CanVerticallyScroll(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanHorizontallyScroll(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanHorizontallyScroll());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CanHorizontallyScroll(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CanHorizontallyScroll(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ExtentWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ExtentHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ViewportWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ViewportHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollOwner(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ScrollOwner());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ScrollOwner(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScrollOwner(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_LineUp() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LineUp();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_LineDown() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LineDown();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_LineLeft() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LineLeft();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_LineRight() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LineRight();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PageUp() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PageUp();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PageDown() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PageDown();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PageLeft() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PageLeft();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PageRight() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PageRight();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MouseWheelUp() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MouseWheelUp();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MouseWheelDown() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MouseWheelDown();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MouseWheelLeft() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MouseWheelLeft();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MouseWheelRight() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MouseWheelRight();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetHorizontalOffset(double offset) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetHorizontalOffset(offset);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetVerticalOffset(double offset) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetVerticalOffset(offset);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MakeVisible(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> visual, impl::abi_arg_in<Windows::Foundation::Rect> rectangle, impl::abi_arg_out<Windows::Foundation::Rect> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().MakeVisible(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&visual), *reinterpret_cast<const Windows::Foundation::Rect *>(&rectangle)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewer> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewer>
{
    HRESULT __stdcall get_HorizontalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalScrollBarVisibility());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalScrollBarVisibility(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalScrollBarVisibility());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalScrollBarVisibility(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHorizontalRailEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsHorizontalRailEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsHorizontalRailEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsHorizontalRailEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVerticalRailEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsVerticalRailEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsVerticalRailEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsVerticalRailEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHorizontalScrollChainingEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsHorizontalScrollChainingEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsHorizontalScrollChainingEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsHorizontalScrollChainingEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVerticalScrollChainingEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsVerticalScrollChainingEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsVerticalScrollChainingEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsVerticalScrollChainingEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomChainingEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomChainingEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomChainingEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsZoomChainingEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsScrollInertiaEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsScrollInertiaEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsScrollInertiaEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsScrollInertiaEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomInertiaEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomInertiaEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomInertiaEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsZoomInertiaEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalScrollMode(Windows::UI::Xaml::Controls::ScrollMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalScrollMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalScrollMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalScrollMode(Windows::UI::Xaml::Controls::ScrollMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalScrollMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalScrollMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomMode(Windows::UI::Xaml::Controls::ZoomMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ZoomMode(Windows::UI::Xaml::Controls::ZoomMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ZoomMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalSnapPointsAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalSnapPointsAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalSnapPointsAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalSnapPointsAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalSnapPointsType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalSnapPointsType(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalSnapPointsType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalSnapPointsType(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomSnapPointsType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ZoomSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ZoomSnapPointsType(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ViewportWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollableWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ScrollableWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ComputedHorizontalScrollBarVisibility(Windows::UI::Xaml::Visibility * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ComputedHorizontalScrollBarVisibility());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ExtentWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ViewportHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollableHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ScrollableHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ComputedVerticalScrollBarVisibility(Windows::UI::Xaml::Visibility * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ComputedVerticalScrollBarVisibility());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ExtentHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinZoomFactor(float * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinZoomFactor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinZoomFactor(float value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinZoomFactor(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxZoomFactor(float * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxZoomFactor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxZoomFactor(float value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxZoomFactor(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomFactor(float * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomFactor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomSnapPoints(impl::abi_arg_out<Windows::Foundation::Collections::IVector<float>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomSnapPoints());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ViewChanged(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ViewChanged(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ViewChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ViewChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollToHorizontalOffset(double offset) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScrollToHorizontalOffset(offset);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollToVerticalOffset(double offset) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScrollToVerticalOffset(offset);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ZoomToFactor(float factor) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ZoomToFactor(factor);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_InvalidateScrollInfo() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InvalidateScrollInfo();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDeferredScrollingEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsDeferredScrollingEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsDeferredScrollingEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsDeferredScrollingEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BringIntoViewOnFocusChange(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BringIntoViewOnFocusChange());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BringIntoViewOnFocusChange(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BringIntoViewOnFocusChange(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewer2> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewer2>
{
    HRESULT __stdcall get_TopLeftHeader(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TopLeftHeader());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TopLeftHeader(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TopLeftHeader(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LeftHeader(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LeftHeader());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LeftHeader(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LeftHeader(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TopHeader(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TopHeader());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TopHeader(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TopHeader(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ViewChanging(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ViewChanging(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ViewChanging(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ViewChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ChangeView(impl::abi_arg_in<Windows::Foundation::IReference<double>> horizontalOffset, impl::abi_arg_in<Windows::Foundation::IReference<double>> verticalOffset, impl::abi_arg_in<Windows::Foundation::IReference<float>> zoomFactor, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ChangeView(*reinterpret_cast<const Windows::Foundation::IReference<double> *>(&horizontalOffset), *reinterpret_cast<const Windows::Foundation::IReference<double> *>(&verticalOffset), *reinterpret_cast<const Windows::Foundation::IReference<float> *>(&zoomFactor)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ChangeViewWithOptionalAnimation(impl::abi_arg_in<Windows::Foundation::IReference<double>> horizontalOffset, impl::abi_arg_in<Windows::Foundation::IReference<double>> verticalOffset, impl::abi_arg_in<Windows::Foundation::IReference<float>> zoomFactor, bool disableAnimation, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ChangeView(*reinterpret_cast<const Windows::Foundation::IReference<double> *>(&horizontalOffset), *reinterpret_cast<const Windows::Foundation::IReference<double> *>(&verticalOffset), *reinterpret_cast<const Windows::Foundation::IReference<float> *>(&zoomFactor), disableAnimation));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewer3> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewer3>
{
    HRESULT __stdcall add_DirectManipulationStarted(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DirectManipulationStarted(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DirectManipulationStarted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DirectManipulationStarted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DirectManipulationCompleted(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DirectManipulationCompleted(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DirectManipulationCompleted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DirectManipulationCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewerStatics> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewerStatics>
{
    HRESULT __stdcall get_HorizontalSnapPointsAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalSnapPointsAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalSnapPointsAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalSnapPointsAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalSnapPointsTypeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalSnapPointsTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalSnapPointsTypeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalSnapPointsTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomSnapPointsTypeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomSnapPointsTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalOffsetProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalOffsetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ViewportWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollableWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ScrollableWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ComputedHorizontalScrollBarVisibilityProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ComputedHorizontalScrollBarVisibilityProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ExtentWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffsetProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalOffsetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ViewportHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollableHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ScrollableHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ComputedVerticalScrollBarVisibilityProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ComputedVerticalScrollBarVisibilityProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ExtentHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinZoomFactorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinZoomFactorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxZoomFactorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxZoomFactorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomFactorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomFactorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomSnapPointsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomSnapPointsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalScrollBarVisibilityProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalScrollBarVisibilityProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetHorizontalScrollBarVisibility(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollBarVisibility * horizontalScrollBarVisibility) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *horizontalScrollBarVisibility = detach_abi(this->shim().GetHorizontalScrollBarVisibility(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetHorizontalScrollBarVisibility(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetHorizontalScrollBarVisibility(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), horizontalScrollBarVisibility);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalScrollBarVisibilityProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalScrollBarVisibilityProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetVerticalScrollBarVisibility(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollBarVisibility * verticalScrollBarVisibility) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *verticalScrollBarVisibility = detach_abi(this->shim().GetVerticalScrollBarVisibility(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetVerticalScrollBarVisibility(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetVerticalScrollBarVisibility(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), verticalScrollBarVisibility);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHorizontalRailEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsHorizontalRailEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsHorizontalRailEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isHorizontalRailEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *isHorizontalRailEnabled = detach_abi(this->shim().GetIsHorizontalRailEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsHorizontalRailEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isHorizontalRailEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIsHorizontalRailEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isHorizontalRailEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVerticalRailEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsVerticalRailEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsVerticalRailEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isVerticalRailEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *isVerticalRailEnabled = detach_abi(this->shim().GetIsVerticalRailEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsVerticalRailEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isVerticalRailEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIsVerticalRailEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isVerticalRailEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHorizontalScrollChainingEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsHorizontalScrollChainingEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsHorizontalScrollChainingEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isHorizontalScrollChainingEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *isHorizontalScrollChainingEnabled = detach_abi(this->shim().GetIsHorizontalScrollChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsHorizontalScrollChainingEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isHorizontalScrollChainingEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIsHorizontalScrollChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isHorizontalScrollChainingEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVerticalScrollChainingEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsVerticalScrollChainingEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsVerticalScrollChainingEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isVerticalScrollChainingEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *isVerticalScrollChainingEnabled = detach_abi(this->shim().GetIsVerticalScrollChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsVerticalScrollChainingEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isVerticalScrollChainingEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIsVerticalScrollChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isVerticalScrollChainingEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomChainingEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomChainingEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsZoomChainingEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isZoomChainingEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *isZoomChainingEnabled = detach_abi(this->shim().GetIsZoomChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsZoomChainingEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isZoomChainingEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIsZoomChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isZoomChainingEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsScrollInertiaEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsScrollInertiaEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsScrollInertiaEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isScrollInertiaEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *isScrollInertiaEnabled = detach_abi(this->shim().GetIsScrollInertiaEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsScrollInertiaEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isScrollInertiaEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIsScrollInertiaEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isScrollInertiaEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomInertiaEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomInertiaEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsZoomInertiaEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isZoomInertiaEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *isZoomInertiaEnabled = detach_abi(this->shim().GetIsZoomInertiaEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsZoomInertiaEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isZoomInertiaEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIsZoomInertiaEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isZoomInertiaEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalScrollModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalScrollModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetHorizontalScrollMode(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollMode * horizontalScrollMode) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *horizontalScrollMode = detach_abi(this->shim().GetHorizontalScrollMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetHorizontalScrollMode(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetHorizontalScrollMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), horizontalScrollMode);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalScrollModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalScrollModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetVerticalScrollMode(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollMode * verticalScrollMode) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *verticalScrollMode = detach_abi(this->shim().GetVerticalScrollMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetVerticalScrollMode(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetVerticalScrollMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), verticalScrollMode);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetZoomMode(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ZoomMode * zoomMode) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *zoomMode = detach_abi(this->shim().GetZoomMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetZoomMode(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ZoomMode zoomMode) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetZoomMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), zoomMode);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDeferredScrollingEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsDeferredScrollingEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsDeferredScrollingEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isDeferredScrollingEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *isDeferredScrollingEnabled = detach_abi(this->shim().GetIsDeferredScrollingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsDeferredScrollingEnabled(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isDeferredScrollingEnabled) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIsDeferredScrollingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isDeferredScrollingEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BringIntoViewOnFocusChangeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BringIntoViewOnFocusChangeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetBringIntoViewOnFocusChange(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * bringIntoViewOnFocusChange) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *bringIntoViewOnFocusChange = detach_abi(this->shim().GetBringIntoViewOnFocusChange(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetBringIntoViewOnFocusChange(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool bringIntoViewOnFocusChange) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetBringIntoViewOnFocusChange(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), bringIntoViewOnFocusChange);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewerStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewerStatics2>
{
    HRESULT __stdcall get_TopLeftHeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TopLeftHeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LeftHeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LeftHeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TopHeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TopHeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewerView> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewerView>
{
    HRESULT __stdcall get_HorizontalOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomFactor(float * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomFactor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>
{
    HRESULT __stdcall get_IsIntermediate(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsIntermediate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>
{
    HRESULT __stdcall get_NextView(impl::abi_arg_out<Windows::UI::Xaml::Controls::IScrollViewerView> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NextView());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FinalView(impl::abi_arg_out<Windows::UI::Xaml::Controls::IScrollViewerView> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FinalView());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsInertial(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsInertial());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBox> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBox>
{
    HRESULT __stdcall get_SearchHistoryEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SearchHistoryEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SearchHistoryEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SearchHistoryEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SearchHistoryContext(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SearchHistoryContext());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SearchHistoryContext(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SearchHistoryContext(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_QueryText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().QueryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_QueryText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().QueryText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusOnKeyboardInput(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FocusOnKeyboardInput());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FocusOnKeyboardInput(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FocusOnKeyboardInput(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChooseSuggestionOnEnter(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ChooseSuggestionOnEnter());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ChooseSuggestionOnEnter(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ChooseSuggestionOnEnter(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_QueryChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().QueryChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_QueryChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().QueryChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SuggestionsRequested(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SuggestionsRequested(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SuggestionsRequested(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SuggestionsRequested(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_QuerySubmitted(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().QuerySubmitted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_QuerySubmitted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().QuerySubmitted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ResultSuggestionChosen(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ResultSuggestionChosen(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ResultSuggestionChosen(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ResultSuggestionChosen(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PrepareForFocusOnKeyboardInput(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PrepareForFocusOnKeyboardInput(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PrepareForFocusOnKeyboardInput(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PrepareForFocusOnKeyboardInput(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetLocalContentSuggestionSettings(impl::abi_arg_in<Windows::ApplicationModel::Search::ILocalContentSuggestionSettings> settings) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetLocalContentSuggestionSettings(*reinterpret_cast<const Windows::ApplicationModel::Search::LocalContentSuggestionSettings *>(&settings));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ISearchBox> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>
{
    HRESULT __stdcall get_QueryText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().QueryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Language(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Language());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LinguisticDetails(impl::abi_arg_out<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LinguisticDetails());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>
{
    HRESULT __stdcall get_QueryText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().QueryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Language(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Language());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LinguisticDetails(impl::abi_arg_out<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LinguisticDetails());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_KeyModifiers(Windows::System::VirtualKeyModifiers * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().KeyModifiers());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>
{
    HRESULT __stdcall get_Tag(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Tag());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_KeyModifiers(Windows::System::VirtualKeyModifiers * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().KeyModifiers());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxStatics>
{
    HRESULT __stdcall get_SearchHistoryEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SearchHistoryEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SearchHistoryContextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SearchHistoryContextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_QueryTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().QueryTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusOnKeyboardInputProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FocusOnKeyboardInputProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChooseSuggestionOnEnterProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ChooseSuggestionOnEnterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>
{
    HRESULT __stdcall get_QueryText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().QueryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Language(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Language());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LinguisticDetails(impl::abi_arg_out<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LinguisticDetails());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Request(impl::abi_arg_out<Windows::ApplicationModel::Search::ISearchSuggestionsRequest> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Request());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>
{
    HRESULT __stdcall get_AddedSections(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AddedSections());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RemovedSections(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RemovedSections());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISelectionChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>
{
    HRESULT __stdcall get_AddedItems(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AddedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RemovedItems(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RemovedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>
{
    HRESULT __stdcall abi_CreateInstanceWithRemovedItemsAndAddedItems(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>> removedItems, impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>> addedItems, impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ISelectionChangedEventArgs> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstanceWithRemovedItemsAndAddedItems(*reinterpret_cast<const Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> *>(&removedItems), *reinterpret_cast<const Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> *>(&addedItems), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISemanticZoom> : produce_base<D, Windows::UI::Xaml::Controls::ISemanticZoom>
{
    HRESULT __stdcall get_ZoomedInView(impl::abi_arg_out<Windows::UI::Xaml::Controls::ISemanticZoomInformation> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomedInView());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ZoomedInView(impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomInformation> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ZoomedInView(*reinterpret_cast<const Windows::UI::Xaml::Controls::ISemanticZoomInformation *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomedOutView(impl::abi_arg_out<Windows::UI::Xaml::Controls::ISemanticZoomInformation> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomedOutView());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ZoomedOutView(impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomInformation> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ZoomedOutView(*reinterpret_cast<const Windows::UI::Xaml::Controls::ISemanticZoomInformation *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomedInViewActive(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomedInViewActive());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomedInViewActive(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsZoomedInViewActive(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanChangeViews(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanChangeViews());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CanChangeViews(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CanChangeViews(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ViewChangeStarted(impl::abi_arg_in<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ViewChangeStarted(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ViewChangeStarted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ViewChangeStarted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ViewChangeCompleted(impl::abi_arg_in<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ViewChangeCompleted(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ViewChangeCompleted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ViewChangeCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ToggleActiveView() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ToggleActiveView();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomOutButtonEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomOutButtonEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomOutButtonEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsZoomOutButtonEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISemanticZoomInformation> : produce_base<D, Windows::UI::Xaml::Controls::ISemanticZoomInformation>
{
    HRESULT __stdcall get_SemanticZoomOwner(impl::abi_arg_out<Windows::UI::Xaml::Controls::ISemanticZoom> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SemanticZoomOwner());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SemanticZoomOwner(impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoom> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SemanticZoomOwner(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoom *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsActiveView(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsActiveView());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsActiveView(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsActiveView(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomedInView(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomedInView());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomedInView(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsZoomedInView(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_InitializeViewChange() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InitializeViewChange();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CompleteViewChange() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CompleteViewChange();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MakeVisible(impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> item) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MakeVisible(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&item));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_StartViewChangeFrom(impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> source, impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> destination) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StartViewChangeFrom(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&source), *reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&destination));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_StartViewChangeTo(impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> source, impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> destination) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StartViewChangeTo(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&source), *reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&destination));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CompleteViewChangeFrom(impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> source, impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> destination) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CompleteViewChangeFrom(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&source), *reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&destination));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CompleteViewChangeTo(impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> source, impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> destination) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CompleteViewChangeTo(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&source), *reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&destination));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISemanticZoomLocation> : produce_base<D, Windows::UI::Xaml::Controls::ISemanticZoomLocation>
{
    HRESULT __stdcall get_Item(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Item());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Item(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Item(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Bounds(impl::abi_arg_out<Windows::Foundation::Rect> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Bounds());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Bounds(impl::abi_arg_in<Windows::Foundation::Rect> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Bounds(*reinterpret_cast<const Windows::Foundation::Rect *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISemanticZoomStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISemanticZoomStatics>
{
    HRESULT __stdcall get_ZoomedInViewProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomedInViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomedOutViewProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ZoomedOutViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomedInViewActiveProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomedInViewActiveProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanChangeViewsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanChangeViewsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomOutButtonEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsZoomOutButtonEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>
{
    HRESULT __stdcall get_IsSourceZoomedInView(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSourceZoomedInView());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSourceZoomedInView(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSourceZoomedInView(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SourceItem(impl::abi_arg_out<Windows::UI::Xaml::Controls::ISemanticZoomLocation> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SourceItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SourceItem(impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceItem(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DestinationItem(impl::abi_arg_out<Windows::UI::Xaml::Controls::ISemanticZoomLocation> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DestinationItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DestinationItem(impl::abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DestinationItem(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISettingsFlyout> : produce_base<D, Windows::UI::Xaml::Controls::ISettingsFlyout>
{
    HRESULT __stdcall get_Title(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Title());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Title(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Title(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderBackground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderBackground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderBackground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderBackground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderForeground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderForeground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IconSource(impl::abi_arg_out<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IconSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IconSource(impl::abi_arg_in<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IconSource(*reinterpret_cast<const Windows::UI::Xaml::Media::ImageSource *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ISettingsFlyoutTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_BackClick(impl::abi_arg_in<Windows::UI::Xaml::Controls::BackClickEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().BackClick(*reinterpret_cast<const Windows::UI::Xaml::Controls::BackClickEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_BackClick(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BackClick(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Show() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Show();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowIndependent() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShowIndependent();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Hide() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Hide();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISettingsFlyoutFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ISettingsFlyout> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISettingsFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>
{
    HRESULT __stdcall get_TitleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TitleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderBackgroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderBackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IconSourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IconSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISlider> : produce_base<D, Windows::UI::Xaml::Controls::ISlider>
{
    HRESULT __stdcall get_IntermediateValue(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IntermediateValue());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IntermediateValue(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IntermediateValue(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StepFrequency(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StepFrequency());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_StepFrequency(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StepFrequency(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SnapsTo(Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SnapsTo());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SnapsTo(Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SnapsTo(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TickFrequency(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TickFrequency());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TickFrequency(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TickFrequency(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TickPlacement(Windows::UI::Xaml::Controls::Primitives::TickPlacement * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TickPlacement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TickPlacement(Windows::UI::Xaml::Controls::Primitives::TickPlacement value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TickPlacement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDirectionReversed(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsDirectionReversed());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsDirectionReversed(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsDirectionReversed(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsThumbToolTipEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsThumbToolTipEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsThumbToolTipEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsThumbToolTipEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ThumbToolTipValueConverter(impl::abi_arg_out<Windows::UI::Xaml::Data::IValueConverter> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ThumbToolTipValueConverter());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ThumbToolTipValueConverter(impl::abi_arg_in<Windows::UI::Xaml::Data::IValueConverter> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ThumbToolTipValueConverter(*reinterpret_cast<const Windows::UI::Xaml::Data::IValueConverter *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISlider2> : produce_base<D, Windows::UI::Xaml::Controls::ISlider2>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISliderFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISliderFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ISlider> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISliderStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISliderStatics>
{
    HRESULT __stdcall get_IntermediateValueProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IntermediateValueProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StepFrequencyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StepFrequencyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SnapsToProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SnapsToProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TickFrequencyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TickFrequencyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TickPlacementProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TickPlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDirectionReversedProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsDirectionReversedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsThumbToolTipEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsThumbToolTipEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ThumbToolTipValueConverterProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ThumbToolTipValueConverterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISliderStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ISliderStatics2>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitView> : produce_base<D, Windows::UI::Xaml::Controls::ISplitView>
{
    HRESULT __stdcall get_Content(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Content(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Pane(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Pane());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Pane(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Pane(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPaneOpen(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPaneOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPaneOpen(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsPaneOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpenPaneLength(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OpenPaneLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OpenPaneLength(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OpenPaneLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CompactPaneLength(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CompactPaneLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CompactPaneLength(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CompactPaneLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PanePlacement(Windows::UI::Xaml::Controls::SplitViewPanePlacement * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PanePlacement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PanePlacement(Windows::UI::Xaml::Controls::SplitViewPanePlacement value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PanePlacement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::SplitViewDisplayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DisplayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DisplayMode(Windows::UI::Xaml::Controls::SplitViewDisplayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaneBackground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaneBackground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PaneBackground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PaneBackground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PaneClosing(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PaneClosing(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PaneClosing(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PaneClosing(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PaneClosed(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PaneClosed(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PaneClosed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PaneClosed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitView2> : produce_base<D, Windows::UI::Xaml::Controls::ISplitView2>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitViewFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISplitViewFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ISplitView> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>
{
    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitViewStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISplitViewStatics>
{
    HRESULT __stdcall get_ContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaneProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaneProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPaneOpenProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsPaneOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpenPaneLengthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OpenPaneLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CompactPaneLengthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CompactPaneLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PanePlacementProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PanePlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DisplayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettingsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettingsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaneBackgroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaneBackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitViewStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ISplitViewStatics2>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStackPanel> : produce_base<D, Windows::UI::Xaml::Controls::IStackPanel>
{
    HRESULT __stdcall get_AreScrollSnapPointsRegular(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreScrollSnapPointsRegular());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreScrollSnapPointsRegular(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreScrollSnapPointsRegular(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStackPanel2> : produce_base<D, Windows::UI::Xaml::Controls::IStackPanel2>
{
    HRESULT __stdcall get_BorderBrush(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadius(impl::abi_arg_out<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CornerRadius());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CornerRadius(impl::abi_arg_in<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CornerRadius(*reinterpret_cast<const Windows::UI::Xaml::CornerRadius *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStackPanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::IStackPanelFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IStackPanel> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStackPanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::IStackPanelStatics>
{
    HRESULT __stdcall get_AreScrollSnapPointsRegularProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreScrollSnapPointsRegularProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStackPanelStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IStackPanelStatics2>
{
    HRESULT __stdcall get_BorderBrushProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadiusProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CornerRadiusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStyleSelector> : produce_base<D, Windows::UI::Xaml::Controls::IStyleSelector>
{
    HRESULT __stdcall abi_SelectStyle(impl::abi_arg_in<Windows::Foundation::IInspectable> item, impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, impl::abi_arg_out<Windows::UI::Xaml::IStyle> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().SelectStyle(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item), *reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStyleSelectorFactory> : produce_base<D, Windows::UI::Xaml::Controls::IStyleSelectorFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IStyleSelector> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStyleSelectorOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IStyleSelectorOverrides>
{
    HRESULT __stdcall abi_SelectStyleCore(impl::abi_arg_in<Windows::Foundation::IInspectable> item, impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, impl::abi_arg_out<Windows::UI::Xaml::IStyle> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().SelectStyleCore(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&item), *reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>
{
    HRESULT __stdcall abi_CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes, impl::abi_arg_out<Windows::UI::Core::ICoreInputSourceBase> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().CreateCoreIndependentInputSource(deviceTypes));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainPanel> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainPanel>
{
    HRESULT __stdcall get_CompositionScaleX(float * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CompositionScaleX());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CompositionScaleY(float * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CompositionScaleY());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CompositionScaleChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().CompositionScaleChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CompositionScaleChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CompositionScaleChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes, impl::abi_arg_out<Windows::UI::Core::ICoreInputSourceBase> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().CreateCoreIndependentInputSource(deviceTypes));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainPanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainPanelFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ISwapChainPanel> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainPanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainPanelStatics>
{
    HRESULT __stdcall get_CompositionScaleXProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CompositionScaleXProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CompositionScaleYProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CompositionScaleYProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISymbolIcon> : produce_base<D, Windows::UI::Xaml::Controls::ISymbolIcon>
{
    HRESULT __stdcall get_Symbol(Windows::UI::Xaml::Controls::Symbol * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Symbol());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Symbol(Windows::UI::Xaml::Controls::Symbol value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Symbol(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISymbolIconFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISymbolIconFactory>
{
    HRESULT __stdcall abi_CreateInstanceWithSymbol(Windows::UI::Xaml::Controls::Symbol symbol, impl::abi_arg_out<Windows::UI::Xaml::Controls::ISymbolIcon> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstanceWithSymbol(symbol));
            return S_OK;
        }
        catch (...)
        {
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISymbolIconStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISymbolIconStatics>
{
    HRESULT __stdcall get_SymbolProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SymbolProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlock> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlock>
{
    HRESULT __stdcall get_FontSize(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontSize(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamily(impl::abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontFamily(impl::abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeight(impl::abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontWeight(impl::abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FontStretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacing(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CharacterSpacing());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CharacterSpacing(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Foreground(impl::abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Foreground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Foreground(impl::abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Foreground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextWrapping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextWrapping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextTrimming(Windows::UI::Xaml::TextTrimming * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextTrimming());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextTrimming(Windows::UI::Xaml::TextTrimming value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextTrimming(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Text(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Text());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Text(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Text(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Inlines(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Documents::Inline>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Inlines());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(impl::abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(impl::abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineHeight(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LineHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineStackingStrategy());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LineStackingStrategy(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSelectionEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextSelectionEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextSelectionEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTextSelectionEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentStart(impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentStart());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentEnd(impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentEnd());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionStart(impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionStart());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionEnd(impl::abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionEnd());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BaselineOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().BaselineOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectionChanged(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SelectionChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContextMenuOpening(impl::abi_arg_in<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ContextMenuOpening(*reinterpret_cast<const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContextMenuOpening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Select(impl::abi_arg_in<Windows::UI::Xaml::Documents::ITextPointer> start, impl::abi_arg_in<Windows::UI::Xaml::Documents::ITextPointer> end) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Select(*reinterpret_cast<const Windows::UI::Xaml::Documents::TextPointer *>(&start), *reinterpret_cast<const Windows::UI::Xaml::Documents::TextPointer *>(&end));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Focus(Windows::UI::Xaml::FocusState value, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().Focus(value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlock2> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlock2>
{
    HRESULT __stdcall get_SelectionHighlightColor(impl::abi_arg_out<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionHighlightColor());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionHighlightColor(impl::abi_arg_in<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionHighlightColor(*reinterpret_cast<const Windows::UI::Xaml::Media::SolidColorBrush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLines(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLines());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLines(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxLines(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBounds(Windows::UI::Xaml::TextLineBounds * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextLineBounds());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextLineBounds(Windows::UI::Xaml::TextLineBounds value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextLineBounds(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OpticalMarginAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OpticalMarginAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsColorFontEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsColorFontEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextReadingOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextReadingOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlock3> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlock3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextScaleFactorEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTextScaleFactorEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlock4> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlock4>
{
    HRESULT __stdcall abi_GetAlphaMask(impl::abi_arg_out<Windows::UI::Composition::ICompositionBrush> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetAlphaMask());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlockStatics> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlockStatics>
{
    HRESULT __stdcall get_FontSizeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamilyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretchProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().FontStretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CharacterSpacingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForegroundProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrappingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextWrappingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextTrimmingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextTrimmingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LineStackingStrategyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSelectionEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextSelectionEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlockStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlockStatics2>
{
    HRESULT __stdcall get_SelectionHighlightColorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionHighlightColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLinesProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLinesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBoundsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextLineBoundsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpticalMarginAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OpticalMarginAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsColorFontEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextReadingOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlockStatics3> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlockStatics3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextScaleFactorEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBox> : produce_base<D, Windows::UI::Xaml::Controls::ITextBox>
{
    HRESULT __stdcall get_Text(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Text());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Text(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Text(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectedText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionLength(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionLength(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionStart(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionStart());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionStart(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionStart(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLength(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLength(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsReadOnly(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsReadOnly());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsReadOnly(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsReadOnly(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AcceptsReturn(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AcceptsReturn());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AcceptsReturn(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AcceptsReturn(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextWrapping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextWrapping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSpellCheckEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSpellCheckEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSpellCheckEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSpellCheckEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextPredictionEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextPredictionEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextPredictionEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsTextPredictionEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScope(impl::abi_arg_out<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InputScope());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_InputScope(impl::abi_arg_in<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InputScope(*reinterpret_cast<const Windows::UI::Xaml::Input::InputScope *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextChanged(impl::abi_arg_in<Windows::UI::Xaml::Controls::TextChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::TextChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectionChanged(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().SelectionChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContextMenuOpening(impl::abi_arg_in<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ContextMenuOpening(*reinterpret_cast<const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContextMenuOpening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Select(int32_t start, int32_t length) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Select(start, length);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetRectFromCharacterIndex(int32_t charIndex, bool trailingEdge, impl::abi_arg_out<Windows::Foundation::Rect> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetRectFromCharacterIndex(charIndex, trailingEdge));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBox2> : produce_base<D, Windows::UI::Xaml::Controls::ITextBox2>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColor(impl::abi_arg_out<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionHighlightColor());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionHighlightColor(impl::abi_arg_in<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionHighlightColor(*reinterpret_cast<const Windows::UI::Xaml::Media::SolidColorBrush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PreventKeyboardDisplayOnProgrammaticFocus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreventKeyboardDisplayOnProgrammaticFocus(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsColorFontEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsColorFontEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Paste(impl::abi_arg_in<Windows::UI::Xaml::Controls::TextControlPasteEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Paste(*reinterpret_cast<const Windows::UI::Xaml::Controls::TextControlPasteEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Paste(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Paste(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBox3> : produce_base<D, Windows::UI::Xaml::Controls::ITextBox3>
{
    HRESULT __stdcall add_TextCompositionStarted(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextCompositionStarted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionStarted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextCompositionStarted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextCompositionChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextCompositionChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextCompositionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextCompositionEnded(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextCompositionEnded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionEnded(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextCompositionEnded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextReadingOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextReadingOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DesiredCandidateWindowAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DesiredCandidateWindowAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CandidateWindowBoundsChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().CandidateWindowBoundsChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CandidateWindowBoundsChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CandidateWindowBoundsChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextChanging(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TextChanging(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextChanging(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBox4> : produce_base<D, Windows::UI::Xaml::Controls::ITextBox4>
{
    HRESULT __stdcall abi_GetLinguisticAlternativesAsync(impl::abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>>> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().GetLinguisticAlternativesAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::ITextBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ITextBox> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::ITextBoxStatics>
{
    HRESULT __stdcall get_TextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLengthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaxLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsReadOnlyProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsReadOnlyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AcceptsReturnProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AcceptsReturnProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrappingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextWrappingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSpellCheckEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSpellCheckEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextPredictionEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsTextPredictionEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScopeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().InputScopeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ITextBoxStatics2>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SelectionHighlightColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PreventKeyboardDisplayOnProgrammaticFocusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabledProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsColorFontEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBoxStatics3> : produce_base<D, Windows::UI::Xaml::Controls::ITextBoxStatics3>
{
    HRESULT __stdcall get_DesiredCandidateWindowAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DesiredCandidateWindowAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TextReadingOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextChangedEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>
{
    HRESULT __stdcall get_StartIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StartIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Length(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Length());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>
{
    HRESULT __stdcall get_StartIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StartIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Length(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Length());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>
{
    HRESULT __stdcall get_StartIndex(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StartIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Length(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Length());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextControlPasteEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>
{
    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickedEventArgs>
{
    HRESULT __stdcall get_OldTime(impl::abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OldTime());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NewTime(impl::abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NewTime());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePicker> : produce_base<D, Windows::UI::Xaml::Controls::ITimePicker>
{
    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ClockIdentifier(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ClockIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ClockIdentifier(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClockIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinuteIncrement(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinuteIncrement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinuteIncrement(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinuteIncrement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Time(impl::abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Time());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Time(impl::abi_arg_in<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Time(*reinterpret_cast<const Windows::Foundation::TimeSpan *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TimeChanged(impl::abi_arg_in<Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TimeChanged(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TimeChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TimeChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePicker2> : produce_base<D, Windows::UI::Xaml::Controls::ITimePicker2>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerFactory> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::ITimePicker> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerFlyout> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerFlyout>
{
    HRESULT __stdcall get_ClockIdentifier(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ClockIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ClockIdentifier(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClockIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Time(impl::abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Time());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Time(impl::abi_arg_in<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Time(*reinterpret_cast<const Windows::Foundation::TimeSpan *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinuteIncrement(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinuteIncrement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinuteIncrement(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinuteIncrement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TimePicked(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TimePickerFlyout, Windows::UI::Xaml::Controls::TimePickedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().TimePicked(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TimePickerFlyout, Windows::UI::Xaml::Controls::TimePickedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TimePicked(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TimePicked(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowAtAsync(impl::abi_arg_in<Windows::UI::Xaml::IFrameworkElement> target, impl::abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::TimeSpan>>> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ShowAtAsync(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&target)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>
{
    HRESULT __stdcall get_ClockIdentifierProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ClockIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TimeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TimeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinuteIncrementProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinuteIncrementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerStatics> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerStatics>
{
    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ClockIdentifierProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ClockIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinuteIncrementProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MinuteIncrementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TimeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TimeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerStatics2>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>
{
    HRESULT __stdcall get_OldTime(impl::abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OldTime());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NewTime(impl::abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().NewTime());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem> : produce_base<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>
{
    HRESULT __stdcall get_IsChecked(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsChecked());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsChecked(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsChecked(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>
{
    HRESULT __stdcall get_IsCheckedProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsCheckedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleSwitch> : produce_base<D, Windows::UI::Xaml::Controls::IToggleSwitch>
{
    HRESULT __stdcall get_IsOn(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsOn());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsOn(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsOn(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Header(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OnContent(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OnContent());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OnContent(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnContent(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OnContentTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OnContentTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OnContentTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnContentTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OffContent(impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OffContent());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OffContent(impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OffContent(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OffContentTemplate(impl::abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OffContentTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OffContentTemplate(impl::abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OffContentTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Toggled(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Toggled(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Toggled(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Toggled(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleSwitchOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IToggleSwitchOverrides>
{
    HRESULT __stdcall abi_OnToggled() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnToggled();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnOnContentChanged(impl::abi_arg_in<Windows::Foundation::IInspectable> oldContent, impl::abi_arg_in<Windows::Foundation::IInspectable> newContent) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnOnContentChanged(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&oldContent), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&newContent));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnOffContentChanged(impl::abi_arg_in<Windows::Foundation::IInspectable> oldContent, impl::abi_arg_in<Windows::Foundation::IInspectable> newContent) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnOffContentChanged(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&oldContent), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&newContent));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnHeaderChanged(impl::abi_arg_in<Windows::Foundation::IInspectable> oldContent, impl::abi_arg_in<Windows::Foundation::IInspectable> newContent) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnHeaderChanged(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&oldContent), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&newContent));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleSwitchStatics> : produce_base<D, Windows::UI::Xaml::Controls::IToggleSwitchStatics>
{
    HRESULT __stdcall get_IsOnProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsOnProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OnContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OnContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OnContentTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OnContentTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OffContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OffContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OffContentTemplateProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OffContentTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToolTip> : produce_base<D, Windows::UI::Xaml::Controls::IToolTip>
{
    HRESULT __stdcall get_HorizontalOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalOffset(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalOffset(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOpen(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsOpen(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Placement(Windows::UI::Xaml::Controls::Primitives::PlacementMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Placement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Placement(Windows::UI::Xaml::Controls::Primitives::PlacementMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Placement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlacementTarget(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlacementTarget());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlacementTarget(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlacementTarget(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffset(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalOffset(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalOffset(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(impl::abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closed(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Closed(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Closed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Opened(impl::abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().Opened(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Opened(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Opened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToolTipFactory> : produce_base<D, Windows::UI::Xaml::Controls::IToolTipFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IToolTip> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToolTipService> : produce_base<D, Windows::UI::Xaml::Controls::IToolTipService>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToolTipServiceStatics> : produce_base<D, Windows::UI::Xaml::Controls::IToolTipServiceStatics>
{
    HRESULT __stdcall get_PlacementProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetPlacement(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::Primitives::PlacementMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetPlacement(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetPlacement(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::Primitives::PlacementMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPlacement(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlacementTargetProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlacementTargetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetPlacementTarget(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetPlacementTarget(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetPlacementTarget(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPlacementTarget(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), *reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ToolTipProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ToolTipProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetToolTip(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, impl::abi_arg_out<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetToolTip(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetToolTip(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, impl::abi_arg_in<Windows::Foundation::IInspectable> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetToolTip(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToolTipStatics> : produce_base<D, Windows::UI::Xaml::Controls::IToolTipStatics>
{
    HRESULT __stdcall get_HorizontalOffsetProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalOffsetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOpenProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlacementProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlacementTargetProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PlacementTargetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffsetProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalOffsetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IUIElementCollection> : produce_base<D, Windows::UI::Xaml::Controls::IUIElementCollection>
{
    HRESULT __stdcall abi_Move(uint32_t oldIndex, uint32_t newIndex) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Move(oldIndex, newIndex);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IUserControl> : produce_base<D, Windows::UI::Xaml::Controls::IUserControl>
{
    HRESULT __stdcall get_Content(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Content(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IUserControlFactory> : produce_base<D, Windows::UI::Xaml::Controls::IUserControlFactory>
{
    HRESULT __stdcall abi_CreateInstance(impl::abi_arg_in<Windows::Foundation::IInspectable> outer, impl::abi_arg_out<Windows::Foundation::IInspectable> inner, impl::abi_arg_out<Windows::UI::Xaml::Controls::IUserControl> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstance(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IUserControlStatics> : produce_base<D, Windows::UI::Xaml::Controls::IUserControlStatics>
{
    HRESULT __stdcall get_ContentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVariableSizedWrapGrid> : produce_base<D, Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>
{
    HRESULT __stdcall get_ItemHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemHeight(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemWidth(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalChildrenAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalChildrenAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalChildrenAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalChildrenAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumns(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaximumRowsOrColumns());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaximumRowsOrColumns(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaximumRowsOrColumns(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics> : produce_base<D, Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>
{
    HRESULT __stdcall get_ItemHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalChildrenAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalChildrenAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalChildrenAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalChildrenAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumnsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaximumRowsOrColumnsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RowSpanProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().RowSpanProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetRowSpan(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetRowSpan(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetRowSpan(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetRowSpan(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ColumnSpanProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ColumnSpanProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetColumnSpan(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetColumnSpan(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetColumnSpan(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetColumnSpan(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IViewbox> : produce_base<D, Windows::UI::Xaml::Controls::IViewbox>
{
    HRESULT __stdcall get_Child(impl::abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Child());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Child(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Child(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchDirection(Windows::UI::Xaml::Controls::StretchDirection * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StretchDirection());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_StretchDirection(Windows::UI::Xaml::Controls::StretchDirection value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StretchDirection(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IViewboxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IViewboxStatics>
{
    HRESULT __stdcall get_StretchProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchDirectionProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StretchDirectionProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingPanel> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingPanel>
{
    HRESULT __stdcall get_ItemContainerGenerator(impl::abi_arg_out<Windows::UI::Xaml::Controls::IItemContainerGenerator> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemContainerGenerator());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingPanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>
{
    HRESULT __stdcall abi_OnItemsChanged(impl::abi_arg_in<Windows::Foundation::IInspectable> sender, impl::abi_arg_in<Windows::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs> args) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnItemsChanged(*reinterpret_cast<const Windows::Foundation::IInspectable *>(&sender), *reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs *>(&args));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnClearChildren() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnClearChildren();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_BringIndexIntoView(int32_t index) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BringIndexIntoView(index);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingPanelProtected> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>
{
    HRESULT __stdcall abi_AddInternalChild(impl::abi_arg_in<Windows::UI::Xaml::IUIElement> child) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddInternalChild(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&child));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_InsertInternalChild(int32_t index, impl::abi_arg_in<Windows::UI::Xaml::IUIElement> child) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InsertInternalChild(index, *reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&child));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RemoveInternalChildRange(int32_t index, int32_t range) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveInternalChildRange(index, range);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanel> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanel>
{
    HRESULT __stdcall get_AreScrollSnapPointsRegular(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreScrollSnapPointsRegular());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreScrollSnapPointsRegular(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreScrollSnapPointsRegular(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CleanUpVirtualizedItemEvent(impl::abi_arg_in<Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().CleanUpVirtualizedItemEvent(*reinterpret_cast<const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CleanUpVirtualizedItemEvent(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CleanUpVirtualizedItemEvent(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>
{
    HRESULT __stdcall abi_OnCleanUpVirtualizedItem(impl::abi_arg_in<Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs> e) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnCleanUpVirtualizedItem(*reinterpret_cast<const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>
{
    HRESULT __stdcall get_AreScrollSnapPointsRegularProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AreScrollSnapPointsRegularProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VirtualizationModeProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VirtualizationModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetVirtualizationMode(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::VirtualizationMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetVirtualizationMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetVirtualizationMode(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::VirtualizationMode value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetVirtualizationMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVirtualizingProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsVirtualizingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsVirtualizing(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> o, bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().GetIsVirtualizing(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&o)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebView> : produce_base<D, Windows::UI::Xaml::Controls::IWebView>
{
    HRESULT __stdcall get_Source(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Source());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Source(impl::abi_arg_in<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<const Windows::Foundation::Uri *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AllowedScriptNotifyUris(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::Uri>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AllowedScriptNotifyUris());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AllowedScriptNotifyUris(impl::abi_arg_in<Windows::Foundation::Collections::IVector<Windows::Foundation::Uri>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AllowedScriptNotifyUris(*reinterpret_cast<const Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DataTransferPackage(impl::abi_arg_out<Windows::ApplicationModel::DataTransfer::IDataPackage> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DataTransferPackage());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_LoadCompleted(impl::abi_arg_in<Windows::UI::Xaml::Navigation::LoadCompletedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().LoadCompleted(*reinterpret_cast<const Windows::UI::Xaml::Navigation::LoadCompletedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_LoadCompleted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LoadCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ScriptNotify(impl::abi_arg_in<Windows::UI::Xaml::Controls::NotifyEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ScriptNotify(*reinterpret_cast<const Windows::UI::Xaml::Controls::NotifyEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ScriptNotify(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScriptNotify(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NavigationFailed(impl::abi_arg_in<Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().NavigationFailed(*reinterpret_cast<const Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NavigationFailed(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigationFailed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_InvokeScript(impl::abi_arg_in<hstring> scriptName, uint32_t __argumentsSize, impl::abi_arg_in<hstring> * arguments, impl::abi_arg_out<hstring> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().InvokeScript(*reinterpret_cast<const hstring *>(&scriptName), *reinterpret_cast<const hstring *>(&arguments)));
            return S_OK;
        }
        catch (...)
        {
            *arguments = nullptr;
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Navigate(impl::abi_arg_in<Windows::Foundation::IUriRuntimeClass> source) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Navigate(*reinterpret_cast<const Windows::Foundation::Uri *>(&source));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_NavigateToString(impl::abi_arg_in<hstring> text) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigateToString(*reinterpret_cast<const hstring *>(&text));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebView2> : produce_base<D, Windows::UI::Xaml::Controls::IWebView2>
{
    HRESULT __stdcall get_CanGoBack(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanGoBack());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoForward(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanGoForward());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DocumentTitle(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DocumentTitle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NavigationStarting(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().NavigationStarting(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NavigationStarting(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigationStarting(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContentLoading(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ContentLoading(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContentLoading(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentLoading(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DOMContentLoaded(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().DOMContentLoaded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DOMContentLoaded(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DOMContentLoaded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GoForward() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GoForward();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GoBack() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GoBack();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Refresh() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Refresh();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Stop() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stop();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CapturePreviewToStreamAsync(impl::abi_arg_in<Windows::Storage::Streams::IRandomAccessStream> stream, impl::abi_arg_out<Windows::Foundation::IAsyncAction> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().CapturePreviewToStreamAsync(*reinterpret_cast<const Windows::Storage::Streams::IRandomAccessStream *>(&stream)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_InvokeScriptAsync(impl::abi_arg_in<hstring> scriptName, impl::abi_arg_in<Windows::Foundation::Collections::IIterable<hstring>> arguments, impl::abi_arg_out<Windows::Foundation::IAsyncOperation<hstring>> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().InvokeScriptAsync(*reinterpret_cast<const hstring *>(&scriptName), *reinterpret_cast<const Windows::Foundation::Collections::IIterable<hstring> *>(&arguments)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CaptureSelectedContentToDataPackageAsync(impl::abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::DataTransfer::DataPackage>> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().CaptureSelectedContentToDataPackageAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_NavigateToLocalStreamUri(impl::abi_arg_in<Windows::Foundation::IUriRuntimeClass> source, impl::abi_arg_in<Windows::Web::IUriToStreamResolver> streamResolver) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigateToLocalStreamUri(*reinterpret_cast<const Windows::Foundation::Uri *>(&source), *reinterpret_cast<const Windows::Web::IUriToStreamResolver *>(&streamResolver));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_BuildLocalStreamUri(impl::abi_arg_in<hstring> contentIdentifier, impl::abi_arg_in<hstring> relativePath, impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().BuildLocalStreamUri(*reinterpret_cast<const hstring *>(&contentIdentifier), *reinterpret_cast<const hstring *>(&relativePath)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultBackgroundColor(impl::abi_arg_out<Windows::UI::Color> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultBackgroundColor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DefaultBackgroundColor(impl::abi_arg_in<Windows::UI::Color> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultBackgroundColor(*reinterpret_cast<const Windows::UI::Color *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NavigationCompleted(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().NavigationCompleted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NavigationCompleted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigationCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FrameNavigationStarting(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().FrameNavigationStarting(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FrameNavigationStarting(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FrameNavigationStarting(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FrameContentLoading(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().FrameContentLoading(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FrameContentLoading(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FrameContentLoading(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FrameDOMContentLoaded(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().FrameDOMContentLoaded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FrameDOMContentLoaded(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FrameDOMContentLoaded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FrameNavigationCompleted(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().FrameNavigationCompleted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FrameNavigationCompleted(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FrameNavigationCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_LongRunningScriptDetected(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().LongRunningScriptDetected(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_LongRunningScriptDetected(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LongRunningScriptDetected(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_UnsafeContentWarningDisplaying(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().UnsafeContentWarningDisplaying(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_UnsafeContentWarningDisplaying(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UnsafeContentWarningDisplaying(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_UnviewableContentIdentified(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().UnviewableContentIdentified(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_UnviewableContentIdentified(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UnviewableContentIdentified(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_NavigateWithHttpRequestMessage(impl::abi_arg_in<Windows::Web::Http::IHttpRequestMessage> requestMessage) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigateWithHttpRequestMessage(*reinterpret_cast<const Windows::Web::Http::HttpRequestMessage *>(&requestMessage));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Focus(Windows::UI::Xaml::FocusState value, bool * returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().Focus(value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebView3> : produce_base<D, Windows::UI::Xaml::Controls::IWebView3>
{
    HRESULT __stdcall get_ContainsFullScreenElement(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContainsFullScreenElement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContainsFullScreenElementChanged(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().ContainsFullScreenElementChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContainsFullScreenElementChanged(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContainsFullScreenElementChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebView4> : produce_base<D, Windows::UI::Xaml::Controls::IWebView4>
{
    HRESULT __stdcall get_ExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ExecutionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DeferredPermissionRequests(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DeferredPermissionRequests());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Settings(impl::abi_arg_out<Windows::UI::Xaml::Controls::IWebViewSettings> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Settings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_UnsupportedUriSchemeIdentified(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().UnsupportedUriSchemeIdentified(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_UnsupportedUriSchemeIdentified(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UnsupportedUriSchemeIdentified(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NewWindowRequested(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().NewWindowRequested(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NewWindowRequested(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NewWindowRequested(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PermissionRequested(impl::abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().PermissionRequested(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PermissionRequested(event_token token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PermissionRequested(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_AddWebAllowedObject(impl::abi_arg_in<hstring> name, impl::abi_arg_in<Windows::Foundation::IInspectable> pObject) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddWebAllowedObject(*reinterpret_cast<const hstring *>(&name), *reinterpret_cast<const Windows::Foundation::IInspectable *>(&pObject));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_DeferredPermissionRequestById(uint32_t id, impl::abi_arg_out<Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().DeferredPermissionRequestById(id));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebView5> : produce_base<D, Windows::UI::Xaml::Controls::IWebView5>
{
    HRESULT __stdcall get_XYFocusLeft(impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusLeft());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusLeft(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().XYFocusLeft(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusRight(impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusRight());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusRight(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().XYFocusRight(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusUp(impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusUp());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusUp(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().XYFocusUp(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusDown(impl::abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusDown());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusDown(impl::abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().XYFocusDown(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewBrush> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewBrush>
{
    HRESULT __stdcall get_SourceName(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SourceName());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SourceName(impl::abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceName(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Redraw() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Redraw();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetSource(impl::abi_arg_in<Windows::UI::Xaml::Controls::IWebView> source) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetSource(*reinterpret_cast<const Windows::UI::Xaml::Controls::WebView *>(&source));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewBrushStatics> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewBrushStatics>
{
    HRESULT __stdcall get_SourceNameProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SourceNameProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>
{
    HRESULT __stdcall get_Uri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>
{
    HRESULT __stdcall get_Uri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>
{
    HRESULT __stdcall get_Uri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PermissionType(Windows::UI::Xaml::Controls::WebViewPermissionType * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PermissionType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Id(uint32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Id());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Allow() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Allow();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Deny() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Deny();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewFactory4> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewFactory4>
{
    HRESULT __stdcall abi_CreateInstanceWithExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode executionMode, impl::abi_arg_out<Windows::UI::Xaml::Controls::IWebView> instance) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *instance = detach_abi(this->shim().CreateInstanceWithExecutionMode(executionMode));
            return S_OK;
        }
        catch (...)
        {
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>
{
    HRESULT __stdcall get_ExecutionTime(impl::abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ExecutionTime());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StopPageScriptExecution(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().StopPageScriptExecution());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_StopPageScriptExecution(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StopPageScriptExecution(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>
{
    HRESULT __stdcall get_Uri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSuccess(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsSuccess());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_WebErrorStatus(Windows::Web::WebErrorStatus * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().WebErrorStatus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>
{
    HRESULT __stdcall get_Uri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_WebErrorStatus(Windows::Web::WebErrorStatus * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().WebErrorStatus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>
{
    HRESULT __stdcall get_Uri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>
{
    HRESULT __stdcall get_Uri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Referrer(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Referrer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewPermissionRequest> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewPermissionRequest>
{
    HRESULT __stdcall get_Uri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PermissionType(Windows::UI::Xaml::Controls::WebViewPermissionType * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PermissionType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Id(uint32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Id());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_State(Windows::UI::Xaml::Controls::WebViewPermissionState * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().State());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Defer() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Defer();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Allow() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Allow();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Deny() noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Deny();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>
{
    HRESULT __stdcall get_PermissionRequest(impl::abi_arg_out<Windows::UI::Xaml::Controls::IWebViewPermissionRequest> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().PermissionRequest());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewSettings> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewSettings>
{
    HRESULT __stdcall get_IsJavaScriptEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsJavaScriptEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsJavaScriptEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsJavaScriptEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsIndexedDBEnabled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().IsIndexedDBEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsIndexedDBEnabled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsIndexedDBEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewStatics> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewStatics>
{
    HRESULT __stdcall get_AnyScriptNotifyUri(impl::abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::Uri>> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AnyScriptNotifyUri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SourceProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().SourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AllowedScriptNotifyUrisProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().AllowedScriptNotifyUrisProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DataTransferPackageProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DataTransferPackageProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewStatics2>
{
    HRESULT __stdcall get_CanGoBackProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanGoBackProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoForwardProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().CanGoForwardProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DocumentTitleProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DocumentTitleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultBackgroundColorProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultBackgroundColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewStatics3>
{
    HRESULT __stdcall get_ContainsFullScreenElementProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ContainsFullScreenElementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewStatics4>
{
    HRESULT __stdcall get_DefaultExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().DefaultExecutionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ClearTemporaryWebDataAsync(impl::abi_arg_out<Windows::Foundation::IAsyncAction> returnValue) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_abi(this->shim().ClearTemporaryWebDataAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewStatics5> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewStatics5>
{
    HRESULT __stdcall get_XYFocusLeftProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusLeftProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusRightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusRightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusUpProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusUpProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusDownProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().XYFocusDownProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>
{
    HRESULT __stdcall get_Uri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>
{
    HRESULT __stdcall get_Uri(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Referrer(impl::abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Referrer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>
{
    HRESULT __stdcall get_MediaType(impl::abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MediaType());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWrapGrid> : produce_base<D, Windows::UI::Xaml::Controls::IWrapGrid>
{
    HRESULT __stdcall get_ItemWidth(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemWidth(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemHeight(double * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemHeight(double value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ItemHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalChildrenAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HorizontalChildrenAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalChildrenAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VerticalChildrenAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumns(int32_t * value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaximumRowsOrColumns());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaximumRowsOrColumns(int32_t value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaximumRowsOrColumns(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWrapGridStatics> : produce_base<D, Windows::UI::Xaml::Controls::IWrapGridStatics>
{
    HRESULT __stdcall get_ItemWidthProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemHeightProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().ItemHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalChildrenAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().HorizontalChildrenAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalChildrenAlignmentProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().VerticalChildrenAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumnsProperty(impl::abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().MaximumRowsOrColumnsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

}

namespace Windows::UI::Xaml::Controls {

template <typename D> void impl_IInsertionPanel<D>::GetInsertionIndexes(const Windows::Foundation::Point & position, int32_t & first, int32_t & second) const
{
    check_hresult(WINRT_SHIM(IInsertionPanel)->abi_GetInsertionIndexes(get_abi(position), &first, &second));
}

template <typename D> Windows::Foundation::IInspectable impl_IItemContainerMapping<D>::ItemFromContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::Foundation::IInspectable returnValue;
    check_hresult(WINRT_SHIM(IItemContainerMapping)->abi_ItemFromContainer(get_abi(container), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemContainerMapping<D>::ContainerFromItem(const Windows::Foundation::IInspectable & item) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(WINRT_SHIM(IItemContainerMapping)->abi_ContainerFromItem(get_abi(item), put_abi(returnValue)));
    return returnValue;
}

template <typename D> int32_t impl_IItemContainerMapping<D>::IndexFromContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    int32_t returnValue {};
    check_hresult(WINRT_SHIM(IItemContainerMapping)->abi_IndexFromContainer(get_abi(container), &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemContainerMapping<D>::ContainerFromIndex(int32_t index) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(WINRT_SHIM(IItemContainerMapping)->abi_ContainerFromIndex(index, put_abi(returnValue)));
    return returnValue;
}

template <typename D> bool impl_INavigate<D>::Navigate(const Windows::UI::Xaml::Interop::TypeName & sourcePageType) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(INavigate)->abi_Navigate(get_abi(sourcePageType), &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::SemanticZoom impl_ISemanticZoomInformation<D>::SemanticZoomOwner() const
{
    Windows::UI::Xaml::Controls::SemanticZoom value { nullptr };
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->get_SemanticZoomOwner(put_abi(value)));
    return value;
}

template <typename D> void impl_ISemanticZoomInformation<D>::SemanticZoomOwner(const Windows::UI::Xaml::Controls::SemanticZoom & value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->put_SemanticZoomOwner(get_abi(value)));
}

template <typename D> bool impl_ISemanticZoomInformation<D>::IsActiveView() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->get_IsActiveView(&value));
    return value;
}

template <typename D> void impl_ISemanticZoomInformation<D>::IsActiveView(bool value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->put_IsActiveView(value));
}

template <typename D> bool impl_ISemanticZoomInformation<D>::IsZoomedInView() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->get_IsZoomedInView(&value));
    return value;
}

template <typename D> void impl_ISemanticZoomInformation<D>::IsZoomedInView(bool value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->put_IsZoomedInView(value));
}

template <typename D> void impl_ISemanticZoomInformation<D>::InitializeViewChange() const
{
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->abi_InitializeViewChange());
}

template <typename D> void impl_ISemanticZoomInformation<D>::CompleteViewChange() const
{
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->abi_CompleteViewChange());
}

template <typename D> void impl_ISemanticZoomInformation<D>::MakeVisible(const Windows::UI::Xaml::Controls::SemanticZoomLocation & item) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->abi_MakeVisible(get_abi(item)));
}

template <typename D> void impl_ISemanticZoomInformation<D>::StartViewChangeFrom(const Windows::UI::Xaml::Controls::SemanticZoomLocation & source, const Windows::UI::Xaml::Controls::SemanticZoomLocation & destination) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->abi_StartViewChangeFrom(get_abi(source), get_abi(destination)));
}

template <typename D> void impl_ISemanticZoomInformation<D>::StartViewChangeTo(const Windows::UI::Xaml::Controls::SemanticZoomLocation & source, const Windows::UI::Xaml::Controls::SemanticZoomLocation & destination) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->abi_StartViewChangeTo(get_abi(source), get_abi(destination)));
}

template <typename D> void impl_ISemanticZoomInformation<D>::CompleteViewChangeFrom(const Windows::UI::Xaml::Controls::SemanticZoomLocation & source, const Windows::UI::Xaml::Controls::SemanticZoomLocation & destination) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->abi_CompleteViewChangeFrom(get_abi(source), get_abi(destination)));
}

template <typename D> void impl_ISemanticZoomInformation<D>::CompleteViewChangeTo(const Windows::UI::Xaml::Controls::SemanticZoomLocation & source, const Windows::UI::Xaml::Controls::SemanticZoomLocation & destination) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomInformation)->abi_CompleteViewChangeTo(get_abi(source), get_abi(destination)));
}

template <typename D> bool impl_IBackClickEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IBackClickEventArgs)->get_Handled(&value));
    return value;
}

template <typename D> void impl_IBackClickEventArgs<D>::Handled(bool value) const
{
    check_hresult(WINRT_SHIM(IBackClickEventArgs)->put_Handled(value));
}

template <typename D> Windows::Foundation::Rect impl_ICandidateWindowBoundsChangedEventArgs<D>::Bounds() const
{
    Windows::Foundation::Rect value {};
    check_hresult(WINRT_SHIM(ICandidateWindowBoundsChangedEventArgs)->get_Bounds(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewBaseHeaderItem impl_IChoosingGroupHeaderContainerEventArgs<D>::GroupHeaderContainer() const
{
    Windows::UI::Xaml::Controls::ListViewBaseHeaderItem value { nullptr };
    check_hresult(WINRT_SHIM(IChoosingGroupHeaderContainerEventArgs)->get_GroupHeaderContainer(put_abi(value)));
    return value;
}

template <typename D> void impl_IChoosingGroupHeaderContainerEventArgs<D>::GroupHeaderContainer(const Windows::UI::Xaml::Controls::ListViewBaseHeaderItem & value) const
{
    check_hresult(WINRT_SHIM(IChoosingGroupHeaderContainerEventArgs)->put_GroupHeaderContainer(get_abi(value)));
}

template <typename D> int32_t impl_IChoosingGroupHeaderContainerEventArgs<D>::GroupIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IChoosingGroupHeaderContainerEventArgs)->get_GroupIndex(&value));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IChoosingGroupHeaderContainerEventArgs<D>::Group() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IChoosingGroupHeaderContainerEventArgs)->get_Group(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_IChoosingItemContainerEventArgs<D>::ItemIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IChoosingItemContainerEventArgs)->get_ItemIndex(&value));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IChoosingItemContainerEventArgs<D>::Item() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IChoosingItemContainerEventArgs)->get_Item(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SelectorItem impl_IChoosingItemContainerEventArgs<D>::ItemContainer() const
{
    Windows::UI::Xaml::Controls::Primitives::SelectorItem value { nullptr };
    check_hresult(WINRT_SHIM(IChoosingItemContainerEventArgs)->get_ItemContainer(put_abi(value)));
    return value;
}

template <typename D> void impl_IChoosingItemContainerEventArgs<D>::ItemContainer(const Windows::UI::Xaml::Controls::Primitives::SelectorItem & value) const
{
    check_hresult(WINRT_SHIM(IChoosingItemContainerEventArgs)->put_ItemContainer(get_abi(value)));
}

template <typename D> bool impl_IChoosingItemContainerEventArgs<D>::IsContainerPrepared() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IChoosingItemContainerEventArgs)->get_IsContainerPrepared(&value));
    return value;
}

template <typename D> void impl_IChoosingItemContainerEventArgs<D>::IsContainerPrepared(bool value) const
{
    check_hresult(WINRT_SHIM(IChoosingItemContainerEventArgs)->put_IsContainerPrepared(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SelectorItem impl_IContainerContentChangingEventArgs<D>::ItemContainer() const
{
    Windows::UI::Xaml::Controls::Primitives::SelectorItem value { nullptr };
    check_hresult(WINRT_SHIM(IContainerContentChangingEventArgs)->get_ItemContainer(put_abi(value)));
    return value;
}

template <typename D> bool impl_IContainerContentChangingEventArgs<D>::InRecycleQueue() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IContainerContentChangingEventArgs)->get_InRecycleQueue(&value));
    return value;
}

template <typename D> int32_t impl_IContainerContentChangingEventArgs<D>::ItemIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IContainerContentChangingEventArgs)->get_ItemIndex(&value));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IContainerContentChangingEventArgs<D>::Item() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IContainerContentChangingEventArgs)->get_Item(put_abi(value)));
    return value;
}

template <typename D> uint32_t impl_IContainerContentChangingEventArgs<D>::Phase() const
{
    uint32_t value {};
    check_hresult(WINRT_SHIM(IContainerContentChangingEventArgs)->get_Phase(&value));
    return value;
}

template <typename D> bool impl_IContainerContentChangingEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IContainerContentChangingEventArgs)->get_Handled(&value));
    return value;
}

template <typename D> void impl_IContainerContentChangingEventArgs<D>::Handled(bool value) const
{
    check_hresult(WINRT_SHIM(IContainerContentChangingEventArgs)->put_Handled(value));
}

template <typename D> void impl_IContainerContentChangingEventArgs<D>::RegisterUpdateCallback(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> & callback) const
{
    check_hresult(WINRT_SHIM(IContainerContentChangingEventArgs)->abi_RegisterUpdateCallback(get_abi(callback)));
}

template <typename D> void impl_IContainerContentChangingEventArgs<D>::RegisterUpdateCallback(uint32_t callbackPhase, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> & callback) const
{
    check_hresult(WINRT_SHIM(IContainerContentChangingEventArgs)->abi_RegisterUpdateCallbackWithPhase(callbackPhase, get_abi(callback)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IDataTemplateSelector<D>::SelectTemplate(const Windows::Foundation::IInspectable & item, const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::UI::Xaml::DataTemplate returnValue { nullptr };
    check_hresult(WINRT_SHIM(IDataTemplateSelector)->abi_SelectTemplate(get_abi(item), get_abi(container), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IDataTemplateSelectorOverrides<D>::SelectTemplateCore(const Windows::Foundation::IInspectable & item, const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::UI::Xaml::DataTemplate returnValue { nullptr };
    check_hresult(WINRT_SHIM(IDataTemplateSelectorOverrides)->abi_SelectTemplateCore(get_abi(item), get_abi(container), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector impl_IDataTemplateSelectorFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector instance { nullptr };
    check_hresult(WINRT_SHIM(IDataTemplateSelectorFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IDataTemplateSelector2<D>::SelectTemplate(const Windows::Foundation::IInspectable & item) const
{
    Windows::UI::Xaml::DataTemplate returnValue { nullptr };
    check_hresult(WINRT_SHIM(IDataTemplateSelector2)->abi_SelectTemplateForItem(get_abi(item), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IDataTemplateSelectorOverrides2<D>::SelectTemplateCore(const Windows::Foundation::IInspectable & item) const
{
    Windows::UI::Xaml::DataTemplate returnValue { nullptr };
    check_hresult(WINRT_SHIM(IDataTemplateSelectorOverrides2)->abi_SelectTemplateForItemCore(get_abi(item), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable> impl_IDragItemsCompletedEventArgs<D>::Items() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable> value;
    check_hresult(WINRT_SHIM(IDragItemsCompletedEventArgs)->get_Items(put_abi(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IDragItemsCompletedEventArgs<D>::DropResult() const
{
    Windows::ApplicationModel::DataTransfer::DataPackageOperation value {};
    check_hresult(WINRT_SHIM(IDragItemsCompletedEventArgs)->get_DropResult(&value));
    return value;
}

template <typename D> bool impl_IDragItemsStartingEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IDragItemsStartingEventArgs)->get_Cancel(&value));
    return value;
}

template <typename D> void impl_IDragItemsStartingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(WINRT_SHIM(IDragItemsStartingEventArgs)->put_Cancel(value));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> impl_IDragItemsStartingEventArgs<D>::Items() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value;
    check_hresult(WINRT_SHIM(IDragItemsStartingEventArgs)->get_Items(put_abi(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::DataTransfer::DataPackage impl_IDragItemsStartingEventArgs<D>::Data() const
{
    Windows::ApplicationModel::DataTransfer::DataPackage value { nullptr };
    check_hresult(WINRT_SHIM(IDragItemsStartingEventArgs)->get_Data(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ItemsPanelTemplate impl_IGroupStyle<D>::Panel() const
{
    Windows::UI::Xaml::Controls::ItemsPanelTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IGroupStyle)->get_Panel(put_abi(value)));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::Panel(const Windows::UI::Xaml::Controls::ItemsPanelTemplate & value) const
{
    check_hresult(WINRT_SHIM(IGroupStyle)->put_Panel(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_IGroupStyle<D>::ContainerStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(WINRT_SHIM(IGroupStyle)->get_ContainerStyle(put_abi(value)));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::ContainerStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(WINRT_SHIM(IGroupStyle)->put_ContainerStyle(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::StyleSelector impl_IGroupStyle<D>::ContainerStyleSelector() const
{
    Windows::UI::Xaml::Controls::StyleSelector value { nullptr };
    check_hresult(WINRT_SHIM(IGroupStyle)->get_ContainerStyleSelector(put_abi(value)));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::ContainerStyleSelector(const Windows::UI::Xaml::Controls::StyleSelector & value) const
{
    check_hresult(WINRT_SHIM(IGroupStyle)->put_ContainerStyleSelector(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IGroupStyle<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IGroupStyle)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IGroupStyle)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector impl_IGroupStyle<D>::HeaderTemplateSelector() const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector value { nullptr };
    check_hresult(WINRT_SHIM(IGroupStyle)->get_HeaderTemplateSelector(put_abi(value)));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::HeaderTemplateSelector(const Windows::UI::Xaml::Controls::DataTemplateSelector & value) const
{
    check_hresult(WINRT_SHIM(IGroupStyle)->put_HeaderTemplateSelector(get_abi(value)));
}

template <typename D> bool impl_IGroupStyle<D>::HidesIfEmpty() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IGroupStyle)->get_HidesIfEmpty(&value));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::HidesIfEmpty(bool value) const
{
    check_hresult(WINRT_SHIM(IGroupStyle)->put_HidesIfEmpty(value));
}

template <typename D> Windows::UI::Xaml::Controls::GroupStyle impl_IGroupStyleFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GroupStyle instance { nullptr };
    check_hresult(WINRT_SHIM(IGroupStyleFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Style impl_IGroupStyle2<D>::HeaderContainerStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(WINRT_SHIM(IGroupStyle2)->get_HeaderContainerStyle(put_abi(value)));
    return value;
}

template <typename D> void impl_IGroupStyle2<D>::HeaderContainerStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(WINRT_SHIM(IGroupStyle2)->put_HeaderContainerStyle(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::GroupStyle impl_IGroupStyleSelector<D>::SelectGroupStyle(const Windows::Foundation::IInspectable & group, uint32_t level) const
{
    Windows::UI::Xaml::Controls::GroupStyle returnValue { nullptr };
    check_hresult(WINRT_SHIM(IGroupStyleSelector)->abi_SelectGroupStyle(get_abi(group), level, put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::GroupStyle impl_IGroupStyleSelectorOverrides<D>::SelectGroupStyleCore(const Windows::Foundation::IInspectable & group, uint32_t level) const
{
    Windows::UI::Xaml::Controls::GroupStyle returnValue { nullptr };
    check_hresult(WINRT_SHIM(IGroupStyleSelectorOverrides)->abi_SelectGroupStyleCore(get_abi(group), level, put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::GroupStyleSelector impl_IGroupStyleSelectorFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GroupStyleSelector instance { nullptr };
    check_hresult(WINRT_SHIM(IGroupStyleSelectorFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> event_token impl_IItemContainerGenerator<D>::ItemsChanged(const Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->add_ItemsChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IItemContainerGenerator> impl_IItemContainerGenerator<D>::ItemsChanged(auto_revoke_t, const Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, IItemContainerGenerator>(this, &ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator::remove_ItemsChanged, ItemsChanged(value));
}

template <typename D> void impl_IItemContainerGenerator<D>::ItemsChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->remove_ItemsChanged(token));
}

template <typename D> Windows::Foundation::IInspectable impl_IItemContainerGenerator<D>::ItemFromContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::Foundation::IInspectable returnValue;
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_ItemFromContainer(get_abi(container), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemContainerGenerator<D>::ContainerFromItem(const Windows::Foundation::IInspectable & item) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_ContainerFromItem(get_abi(item), put_abi(returnValue)));
    return returnValue;
}

template <typename D> int32_t impl_IItemContainerGenerator<D>::IndexFromContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    int32_t returnValue {};
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_IndexFromContainer(get_abi(container), &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemContainerGenerator<D>::ContainerFromIndex(int32_t index) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_ContainerFromIndex(index, put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::ItemContainerGenerator impl_IItemContainerGenerator<D>::GetItemContainerGeneratorForPanel(const Windows::UI::Xaml::Controls::Panel & panel) const
{
    Windows::UI::Xaml::Controls::ItemContainerGenerator returnValue { nullptr };
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_GetItemContainerGeneratorForPanel(get_abi(panel), put_abi(returnValue)));
    return returnValue;
}

template <typename D> void impl_IItemContainerGenerator<D>::StartAt(const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition & position, Windows::UI::Xaml::Controls::Primitives::GeneratorDirection direction, bool allowStartAtRealizedItem) const
{
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_StartAt(get_abi(position), direction, allowStartAtRealizedItem));
}

template <typename D> void impl_IItemContainerGenerator<D>::Stop() const
{
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_Stop());
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemContainerGenerator<D>::GenerateNext(bool & isNewlyRealized) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_GenerateNext(&isNewlyRealized, put_abi(returnValue)));
    return returnValue;
}

template <typename D> void impl_IItemContainerGenerator<D>::PrepareItemContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_PrepareItemContainer(get_abi(container)));
}

template <typename D> void impl_IItemContainerGenerator<D>::RemoveAll() const
{
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_RemoveAll());
}

template <typename D> void impl_IItemContainerGenerator<D>::Remove(const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition & position, int32_t count) const
{
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_Remove(get_abi(position), count));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::GeneratorPosition impl_IItemContainerGenerator<D>::GeneratorPositionFromIndex(int32_t itemIndex) const
{
    Windows::UI::Xaml::Controls::Primitives::GeneratorPosition returnValue {};
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_GeneratorPositionFromIndex(itemIndex, put_abi(returnValue)));
    return returnValue;
}

template <typename D> int32_t impl_IItemContainerGenerator<D>::IndexFromGeneratorPosition(const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition & position) const
{
    int32_t returnValue {};
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_IndexFromGeneratorPosition(get_abi(position), &returnValue));
    return returnValue;
}

template <typename D> void impl_IItemContainerGenerator<D>::Recycle(const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition & position, int32_t count) const
{
    check_hresult(WINRT_SHIM(IItemContainerGenerator)->abi_Recycle(get_abi(position), count));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsHelperStatics<D>::DropoutOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsHelperStatics)->get_DropoutOrderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IReference<int32_t> impl_IMediaTransportControlsHelperStatics<D>::GetDropoutOrder(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IReference<int32_t> value;
    check_hresult(WINRT_SHIM(IMediaTransportControlsHelperStatics)->abi_GetDropoutOrder(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaTransportControlsHelperStatics<D>::SetDropoutOrder(const Windows::UI::Xaml::UIElement & element, const optional<int32_t> & value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControlsHelperStatics)->abi_SetDropoutOrder(get_abi(element), get_abi(value)));
}

template <typename D> hstring impl_INotifyEventArgs<D>::Value() const
{
    hstring value;
    check_hresult(WINRT_SHIM(INotifyEventArgs)->get_Value(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_INotifyEventArgs2<D>::CallingUri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(INotifyEventArgs2)->get_CallingUri(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_ISemanticZoomLocation<D>::Item() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(ISemanticZoomLocation)->get_Item(put_abi(value)));
    return value;
}

template <typename D> void impl_ISemanticZoomLocation<D>::Item(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomLocation)->put_Item(get_abi(value)));
}

template <typename D> Windows::Foundation::Rect impl_ISemanticZoomLocation<D>::Bounds() const
{
    Windows::Foundation::Rect value {};
    check_hresult(WINRT_SHIM(ISemanticZoomLocation)->get_Bounds(put_abi(value)));
    return value;
}

template <typename D> void impl_ISemanticZoomLocation<D>::Bounds(const Windows::Foundation::Rect & value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomLocation)->put_Bounds(get_abi(value)));
}

template <typename D> bool impl_ISemanticZoomViewChangedEventArgs<D>::IsSourceZoomedInView() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISemanticZoomViewChangedEventArgs)->get_IsSourceZoomedInView(&value));
    return value;
}

template <typename D> void impl_ISemanticZoomViewChangedEventArgs<D>::IsSourceZoomedInView(bool value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomViewChangedEventArgs)->put_IsSourceZoomedInView(value));
}

template <typename D> Windows::UI::Xaml::Controls::SemanticZoomLocation impl_ISemanticZoomViewChangedEventArgs<D>::SourceItem() const
{
    Windows::UI::Xaml::Controls::SemanticZoomLocation value { nullptr };
    check_hresult(WINRT_SHIM(ISemanticZoomViewChangedEventArgs)->get_SourceItem(put_abi(value)));
    return value;
}

template <typename D> void impl_ISemanticZoomViewChangedEventArgs<D>::SourceItem(const Windows::UI::Xaml::Controls::SemanticZoomLocation & value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomViewChangedEventArgs)->put_SourceItem(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::SemanticZoomLocation impl_ISemanticZoomViewChangedEventArgs<D>::DestinationItem() const
{
    Windows::UI::Xaml::Controls::SemanticZoomLocation value { nullptr };
    check_hresult(WINRT_SHIM(ISemanticZoomViewChangedEventArgs)->get_DestinationItem(put_abi(value)));
    return value;
}

template <typename D> void impl_ISemanticZoomViewChangedEventArgs<D>::DestinationItem(const Windows::UI::Xaml::Controls::SemanticZoomLocation & value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoomViewChangedEventArgs)->put_DestinationItem(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_IStyleSelector<D>::SelectStyle(const Windows::Foundation::IInspectable & item, const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::UI::Xaml::Style returnValue { nullptr };
    check_hresult(WINRT_SHIM(IStyleSelector)->abi_SelectStyle(get_abi(item), get_abi(container), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Style impl_IStyleSelectorOverrides<D>::SelectStyleCore(const Windows::Foundation::IInspectable & item, const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::UI::Xaml::Style returnValue { nullptr };
    check_hresult(WINRT_SHIM(IStyleSelectorOverrides)->abi_SelectStyleCore(get_abi(item), get_abi(container), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::StyleSelector impl_IStyleSelectorFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::StyleSelector instance { nullptr };
    check_hresult(WINRT_SHIM(IStyleSelectorFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> int32_t impl_ITextCompositionChangedEventArgs<D>::StartIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextCompositionChangedEventArgs)->get_StartIndex(&value));
    return value;
}

template <typename D> int32_t impl_ITextCompositionChangedEventArgs<D>::Length() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextCompositionChangedEventArgs)->get_Length(&value));
    return value;
}

template <typename D> int32_t impl_ITextCompositionEndedEventArgs<D>::StartIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextCompositionEndedEventArgs)->get_StartIndex(&value));
    return value;
}

template <typename D> int32_t impl_ITextCompositionEndedEventArgs<D>::Length() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextCompositionEndedEventArgs)->get_Length(&value));
    return value;
}

template <typename D> int32_t impl_ITextCompositionStartedEventArgs<D>::StartIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextCompositionStartedEventArgs)->get_StartIndex(&value));
    return value;
}

template <typename D> int32_t impl_ITextCompositionStartedEventArgs<D>::Length() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextCompositionStartedEventArgs)->get_Length(&value));
    return value;
}

template <typename D> bool impl_ITextControlPasteEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ITextControlPasteEventArgs)->get_Handled(&value));
    return value;
}

template <typename D> void impl_ITextControlPasteEventArgs<D>::Handled(bool value) const
{
    check_hresult(WINRT_SHIM(ITextControlPasteEventArgs)->put_Handled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipServiceStatics<D>::PlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToolTipServiceStatics)->get_PlacementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::PlacementMode impl_IToolTipServiceStatics<D>::GetPlacement(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::Primitives::PlacementMode value {};
    check_hresult(WINRT_SHIM(IToolTipServiceStatics)->abi_GetPlacement(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IToolTipServiceStatics<D>::SetPlacement(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::Primitives::PlacementMode value) const
{
    check_hresult(WINRT_SHIM(IToolTipServiceStatics)->abi_SetPlacement(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipServiceStatics<D>::PlacementTargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToolTipServiceStatics)->get_PlacementTargetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IToolTipServiceStatics<D>::GetPlacementTarget(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IToolTipServiceStatics)->abi_GetPlacementTarget(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IToolTipServiceStatics<D>::SetPlacementTarget(const Windows::UI::Xaml::DependencyObject & element, const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IToolTipServiceStatics)->abi_SetPlacementTarget(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipServiceStatics<D>::ToolTipProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToolTipServiceStatics)->get_ToolTipProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IToolTipServiceStatics<D>::GetToolTip(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IToolTipServiceStatics)->abi_GetToolTip(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IToolTipServiceStatics<D>::SetToolTip(const Windows::UI::Xaml::DependencyObject & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IToolTipServiceStatics)->abi_SetToolTip(get_abi(element), get_abi(value)));
}

template <typename D> void impl_IUIElementCollection<D>::Move(uint32_t oldIndex, uint32_t newIndex) const
{
    check_hresult(WINRT_SHIM(IUIElementCollection)->abi_Move(oldIndex, newIndex));
}

template <typename D> Windows::Foundation::IInspectable impl_ICleanUpVirtualizedItemEventArgs<D>::Value() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(ICleanUpVirtualizedItemEventArgs)->get_Value(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement impl_ICleanUpVirtualizedItemEventArgs<D>::UIElement() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(ICleanUpVirtualizedItemEventArgs)->get_UIElement(put_abi(value)));
    return value;
}

template <typename D> bool impl_ICleanUpVirtualizedItemEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICleanUpVirtualizedItemEventArgs)->get_Cancel(&value));
    return value;
}

template <typename D> void impl_ICleanUpVirtualizedItemEventArgs<D>::Cancel(bool value) const
{
    check_hresult(WINRT_SHIM(ICleanUpVirtualizedItemEventArgs)->put_Cancel(value));
}

template <typename D> Windows::UI::Xaml::GridLength impl_IColumnDefinition<D>::Width() const
{
    Windows::UI::Xaml::GridLength value {};
    check_hresult(WINRT_SHIM(IColumnDefinition)->get_Width(put_abi(value)));
    return value;
}

template <typename D> void impl_IColumnDefinition<D>::Width(const Windows::UI::Xaml::GridLength & value) const
{
    check_hresult(WINRT_SHIM(IColumnDefinition)->put_Width(get_abi(value)));
}

template <typename D> double impl_IColumnDefinition<D>::MaxWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IColumnDefinition)->get_MaxWidth(&value));
    return value;
}

template <typename D> void impl_IColumnDefinition<D>::MaxWidth(double value) const
{
    check_hresult(WINRT_SHIM(IColumnDefinition)->put_MaxWidth(value));
}

template <typename D> double impl_IColumnDefinition<D>::MinWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IColumnDefinition)->get_MinWidth(&value));
    return value;
}

template <typename D> void impl_IColumnDefinition<D>::MinWidth(double value) const
{
    check_hresult(WINRT_SHIM(IColumnDefinition)->put_MinWidth(value));
}

template <typename D> double impl_IColumnDefinition<D>::ActualWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IColumnDefinition)->get_ActualWidth(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IColumnDefinitionStatics<D>::WidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IColumnDefinitionStatics)->get_WidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IColumnDefinitionStatics<D>::MaxWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IColumnDefinitionStatics)->get_MaxWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IColumnDefinitionStatics<D>::MinWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IColumnDefinitionStatics)->get_MinWidthProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IContextMenuEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IContextMenuEventArgs)->get_Handled(&value));
    return value;
}

template <typename D> void impl_IContextMenuEventArgs<D>::Handled(bool value) const
{
    check_hresult(WINRT_SHIM(IContextMenuEventArgs)->put_Handled(value));
}

template <typename D> double impl_IContextMenuEventArgs<D>::CursorLeft() const
{
    double value {};
    check_hresult(WINRT_SHIM(IContextMenuEventArgs)->get_CursorLeft(&value));
    return value;
}

template <typename D> double impl_IContextMenuEventArgs<D>::CursorTop() const
{
    double value {};
    check_hresult(WINRT_SHIM(IContextMenuEventArgs)->get_CursorTop(&value));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IItemClickEventArgs<D>::ClickedItem() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IItemClickEventArgs)->get_ClickedItem(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::GridLength impl_IRowDefinition<D>::Height() const
{
    Windows::UI::Xaml::GridLength value {};
    check_hresult(WINRT_SHIM(IRowDefinition)->get_Height(put_abi(value)));
    return value;
}

template <typename D> void impl_IRowDefinition<D>::Height(const Windows::UI::Xaml::GridLength & value) const
{
    check_hresult(WINRT_SHIM(IRowDefinition)->put_Height(get_abi(value)));
}

template <typename D> double impl_IRowDefinition<D>::MaxHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IRowDefinition)->get_MaxHeight(&value));
    return value;
}

template <typename D> void impl_IRowDefinition<D>::MaxHeight(double value) const
{
    check_hresult(WINRT_SHIM(IRowDefinition)->put_MaxHeight(value));
}

template <typename D> double impl_IRowDefinition<D>::MinHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IRowDefinition)->get_MinHeight(&value));
    return value;
}

template <typename D> void impl_IRowDefinition<D>::MinHeight(double value) const
{
    check_hresult(WINRT_SHIM(IRowDefinition)->put_MinHeight(value));
}

template <typename D> double impl_IRowDefinition<D>::ActualHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IRowDefinition)->get_ActualHeight(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRowDefinitionStatics<D>::HeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRowDefinitionStatics)->get_HeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRowDefinitionStatics<D>::MaxHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRowDefinitionStatics)->get_MaxHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRowDefinitionStatics<D>::MinHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRowDefinitionStatics)->get_MinHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> impl_ISelectionChangedEventArgs<D>::AddedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value;
    check_hresult(WINRT_SHIM(ISelectionChangedEventArgs)->get_AddedItems(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> impl_ISelectionChangedEventArgs<D>::RemovedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value;
    check_hresult(WINRT_SHIM(ISelectionChangedEventArgs)->get_RemovedItems(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SelectionChangedEventArgs impl_ISelectionChangedEventArgsFactory<D>::CreateInstanceWithRemovedItemsAndAddedItems(const Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> & removedItems, const Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> & addedItems, const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SelectionChangedEventArgs instance { nullptr };
    check_hresult(WINRT_SHIM(ISelectionChangedEventArgsFactory)->abi_CreateInstanceWithRemovedItemsAndAddedItems(get_abi(removedItems), get_abi(addedItems), get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IBorder<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IBorder)->get_BorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IBorder)->put_BorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IBorder<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IBorder)->get_BorderThickness(put_abi(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IBorder)->put_BorderThickness(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IBorder<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IBorder)->get_Background(put_abi(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::Background(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IBorder)->put_Background(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius impl_IBorder<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value {};
    check_hresult(WINRT_SHIM(IBorder)->get_CornerRadius(put_abi(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::CornerRadius(const Windows::UI::Xaml::CornerRadius & value) const
{
    check_hresult(WINRT_SHIM(IBorder)->put_CornerRadius(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IBorder<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IBorder)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IBorder)->put_Padding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IBorder<D>::Child() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IBorder)->get_Child(put_abi(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::Child(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IBorder)->put_Child(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IBorder<D>::ChildTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IBorder)->get_ChildTransitions(put_abi(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::ChildTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(WINRT_SHIM(IBorder)->put_ChildTransitions(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IBorderStatics)->get_BorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IBorderStatics)->get_BorderThicknessProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IBorderStatics)->get_BackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IBorderStatics)->get_CornerRadiusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IBorderStatics)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::ChildTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IBorderStatics)->get_ChildTransitionsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Media::Capture::MediaCapture impl_ICaptureElement<D>::Source() const
{
    Windows::Media::Capture::MediaCapture value { nullptr };
    check_hresult(WINRT_SHIM(ICaptureElement)->get_Source(put_abi(value)));
    return value;
}

template <typename D> void impl_ICaptureElement<D>::Source(const Windows::Media::Capture::MediaCapture & value) const
{
    check_hresult(WINRT_SHIM(ICaptureElement)->put_Source(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_ICaptureElement<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(WINRT_SHIM(ICaptureElement)->get_Stretch(&value));
    return value;
}

template <typename D> void impl_ICaptureElement<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(WINRT_SHIM(ICaptureElement)->put_Stretch(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICaptureElementStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICaptureElementStatics)->get_SourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICaptureElementStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICaptureElementStatics)->get_StretchProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IContentPresenter<D>::Content() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IContentPresenter)->get_Content(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::Content(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_Content(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IContentPresenter<D>::ContentTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenter)->get_ContentTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::ContentTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_ContentTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector impl_IContentPresenter<D>::ContentTemplateSelector() const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenter)->get_ContentTemplateSelector(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::ContentTemplateSelector(const Windows::UI::Xaml::Controls::DataTemplateSelector & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_ContentTemplateSelector(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IContentPresenter<D>::ContentTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenter)->get_ContentTransitions(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::ContentTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_ContentTransitions(get_abi(value)));
}

template <typename D> double impl_IContentPresenter<D>::FontSize() const
{
    double value {};
    check_hresult(WINRT_SHIM(IContentPresenter)->get_FontSize(&value));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::FontSize(double value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_IContentPresenter<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenter)->get_FontFamily(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::FontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_FontFamily(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_IContentPresenter<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(WINRT_SHIM(IContentPresenter)->get_FontWeight(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::FontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_FontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontStyle impl_IContentPresenter<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(WINRT_SHIM(IContentPresenter)->get_FontStyle(&value));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::FontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_FontStyle(value));
}

template <typename D> Windows::UI::Text::FontStretch impl_IContentPresenter<D>::FontStretch() const
{
    Windows::UI::Text::FontStretch value {};
    check_hresult(WINRT_SHIM(IContentPresenter)->get_FontStretch(&value));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::FontStretch(Windows::UI::Text::FontStretch value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_FontStretch(value));
}

template <typename D> int32_t impl_IContentPresenter<D>::CharacterSpacing() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IContentPresenter)->get_CharacterSpacing(&value));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::CharacterSpacing(int32_t value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_CharacterSpacing(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IContentPresenter<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenter)->get_Foreground(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::Foreground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter)->put_Foreground(get_abi(value)));
}

template <typename D> void impl_IContentPresenterOverrides<D>::OnContentTemplateChanged(const Windows::UI::Xaml::DataTemplate & oldContentTemplate, const Windows::UI::Xaml::DataTemplate & newContentTemplate) const
{
    check_hresult(WINRT_SHIM(IContentPresenterOverrides)->abi_OnContentTemplateChanged(get_abi(oldContentTemplate), get_abi(newContentTemplate)));
}

template <typename D> void impl_IContentPresenterOverrides<D>::OnContentTemplateSelectorChanged(const Windows::UI::Xaml::Controls::DataTemplateSelector & oldContentTemplateSelector, const Windows::UI::Xaml::Controls::DataTemplateSelector & newContentTemplateSelector) const
{
    check_hresult(WINRT_SHIM(IContentPresenterOverrides)->abi_OnContentTemplateSelectorChanged(get_abi(oldContentTemplateSelector), get_abi(newContentTemplateSelector)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_ContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::ContentTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_ContentTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::ContentTemplateSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_ContentTemplateSelectorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::ContentTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_ContentTransitionsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_FontSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_FontFamilyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_FontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_FontStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::FontStretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_FontStretchProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::CharacterSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_CharacterSpacingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics)->get_ForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ContentPresenter impl_IContentPresenterFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ContentPresenter instance { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::OpticalMarginAlignment impl_IContentPresenter2<D>::OpticalMarginAlignment() const
{
    Windows::UI::Xaml::OpticalMarginAlignment value {};
    check_hresult(WINRT_SHIM(IContentPresenter2)->get_OpticalMarginAlignment(&value));
    return value;
}

template <typename D> void impl_IContentPresenter2<D>::OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter2)->put_OpticalMarginAlignment(value));
}

template <typename D> Windows::UI::Xaml::TextLineBounds impl_IContentPresenter2<D>::TextLineBounds() const
{
    Windows::UI::Xaml::TextLineBounds value {};
    check_hresult(WINRT_SHIM(IContentPresenter2)->get_TextLineBounds(&value));
    return value;
}

template <typename D> void impl_IContentPresenter2<D>::TextLineBounds(Windows::UI::Xaml::TextLineBounds value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter2)->put_TextLineBounds(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics2<D>::OpticalMarginAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics2)->get_OpticalMarginAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics2<D>::TextLineBoundsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics2)->get_TextLineBoundsProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IContentPresenter3<D>::IsTextScaleFactorEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IContentPresenter3)->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void impl_IContentPresenter3<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter3)->put_IsTextScaleFactorEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics3<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics3)->get_IsTextScaleFactorEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::TextWrapping impl_IContentPresenter4<D>::TextWrapping() const
{
    Windows::UI::Xaml::TextWrapping value {};
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_TextWrapping(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::TextWrapping(Windows::UI::Xaml::TextWrapping value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_TextWrapping(value));
}

template <typename D> int32_t impl_IContentPresenter4<D>::MaxLines() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_MaxLines(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::MaxLines(int32_t value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_MaxLines(value));
}

template <typename D> Windows::UI::Xaml::LineStackingStrategy impl_IContentPresenter4<D>::LineStackingStrategy() const
{
    Windows::UI::Xaml::LineStackingStrategy value {};
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_LineStackingStrategy(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_LineStackingStrategy(value));
}

template <typename D> double impl_IContentPresenter4<D>::LineHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_LineHeight(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::LineHeight(double value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_LineHeight(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IContentPresenter4<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_BorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_BorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IContentPresenter4<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_BorderThickness(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_BorderThickness(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius impl_IContentPresenter4<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value {};
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_CornerRadius(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::CornerRadius(const Windows::UI::Xaml::CornerRadius & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_CornerRadius(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IContentPresenter4<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_Padding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IContentPresenter4<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_Background(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::Background(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_Background(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_IContentPresenter4<D>::HorizontalContentAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_HorizontalContentAlignment(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_HorizontalContentAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_IContentPresenter4<D>::VerticalContentAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(WINRT_SHIM(IContentPresenter4)->get_VerticalContentAlignment(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(WINRT_SHIM(IContentPresenter4)->put_VerticalContentAlignment(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::TextWrappingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_TextWrappingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::MaxLinesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_MaxLinesProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::LineStackingStrategyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_LineStackingStrategyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::LineHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_LineHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_BorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_BorderThicknessProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_CornerRadiusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_BackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::HorizontalContentAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_HorizontalContentAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::VerticalContentAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentPresenterStatics4)->get_VerticalContentAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::ImageSource impl_IImage<D>::Source() const
{
    Windows::UI::Xaml::Media::ImageSource value { nullptr };
    check_hresult(WINRT_SHIM(IImage)->get_Source(put_abi(value)));
    return value;
}

template <typename D> void impl_IImage<D>::Source(const Windows::UI::Xaml::Media::ImageSource & value) const
{
    check_hresult(WINRT_SHIM(IImage)->put_Source(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_IImage<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(WINRT_SHIM(IImage)->get_Stretch(&value));
    return value;
}

template <typename D> void impl_IImage<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(WINRT_SHIM(IImage)->put_Stretch(value));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IImage<D>::NineGrid() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IImage)->get_NineGrid(put_abi(value)));
    return value;
}

template <typename D> void impl_IImage<D>::NineGrid(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IImage)->put_NineGrid(get_abi(value)));
}

template <typename D> Windows::Media::PlayTo::PlayToSource impl_IImage<D>::PlayToSource() const
{
    Windows::Media::PlayTo::PlayToSource value { nullptr };
    check_hresult(WINRT_SHIM(IImage)->get_PlayToSource(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IImage<D>::ImageFailed(const Windows::UI::Xaml::ExceptionRoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IImage)->add_ImageFailed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IImage> impl_IImage<D>::ImageFailed(auto_revoke_t, const Windows::UI::Xaml::ExceptionRoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IImage>(this, &ABI::Windows::UI::Xaml::Controls::IImage::remove_ImageFailed, ImageFailed(value));
}

template <typename D> void impl_IImage<D>::ImageFailed(event_token token) const
{
    check_hresult(WINRT_SHIM(IImage)->remove_ImageFailed(token));
}

template <typename D> event_token impl_IImage<D>::ImageOpened(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IImage)->add_ImageOpened(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IImage> impl_IImage<D>::ImageOpened(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IImage>(this, &ABI::Windows::UI::Xaml::Controls::IImage::remove_ImageOpened, ImageOpened(value));
}

template <typename D> void impl_IImage<D>::ImageOpened(event_token token) const
{
    check_hresult(WINRT_SHIM(IImage)->remove_ImageOpened(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IImageStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IImageStatics)->get_SourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IImageStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IImageStatics)->get_StretchProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IImageStatics<D>::NineGridProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IImageStatics)->get_NineGridProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IImageStatics<D>::PlayToSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IImageStatics)->get_PlayToSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Media::Casting::CastingSource impl_IImage2<D>::GetAsCastingSource() const
{
    Windows::Media::Casting::CastingSource returnValue { nullptr };
    check_hresult(WINRT_SHIM(IImage2)->abi_GetAsCastingSource(put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Composition::CompositionBrush impl_IImage3<D>::GetAlphaMask() const
{
    Windows::UI::Composition::CompositionBrush returnValue { nullptr };
    check_hresult(WINRT_SHIM(IImage3)->abi_GetAlphaMask(put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::IInspectable impl_IItemsPresenter<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IItemsPresenter)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IItemsPresenter)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IItemsPresenter<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenter)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IItemsPresenter)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IItemsPresenter<D>::HeaderTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenter)->get_HeaderTransitions(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter<D>::HeaderTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(WINRT_SHIM(IItemsPresenter)->put_HeaderTransitions(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IItemsPresenter<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IItemsPresenter)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IItemsPresenter)->put_Padding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenterStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenterStatics)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics<D>::HeaderTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenterStatics)->get_HeaderTransitionsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenterStatics)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IItemsPresenter2<D>::Footer() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IItemsPresenter2)->get_Footer(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter2<D>::Footer(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IItemsPresenter2)->put_Footer(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IItemsPresenter2<D>::FooterTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenter2)->get_FooterTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter2<D>::FooterTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IItemsPresenter2)->put_FooterTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IItemsPresenter2<D>::FooterTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenter2)->get_FooterTransitions(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter2<D>::FooterTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(WINRT_SHIM(IItemsPresenter2)->put_FooterTransitions(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics2<D>::FooterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenterStatics2)->get_FooterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics2<D>::FooterTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenterStatics2)->get_FooterTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics2<D>::FooterTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsPresenterStatics2)->get_FooterTransitionsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::UIElementCollection impl_IPanel<D>::Children() const
{
    Windows::UI::Xaml::Controls::UIElementCollection value { nullptr };
    check_hresult(WINRT_SHIM(IPanel)->get_Children(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IPanel<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IPanel)->get_Background(put_abi(value)));
    return value;
}

template <typename D> void impl_IPanel<D>::Background(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IPanel)->put_Background(get_abi(value)));
}

template <typename D> bool impl_IPanel<D>::IsItemsHost() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IPanel)->get_IsItemsHost(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IPanel<D>::ChildrenTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IPanel)->get_ChildrenTransitions(put_abi(value)));
    return value;
}

template <typename D> void impl_IPanel<D>::ChildrenTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(WINRT_SHIM(IPanel)->put_ChildrenTransitions(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPanelStatics<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPanelStatics)->get_BackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPanelStatics<D>::IsItemsHostProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPanelStatics)->get_IsItemsHostProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPanelStatics<D>::ChildrenTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPanelStatics)->get_ChildrenTransitionsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Panel impl_IPanelFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Panel instance { nullptr };
    check_hresult(WINRT_SHIM(IPanelFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> double impl_IRichTextBlock<D>::FontSize() const
{
    double value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_FontSize(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::FontSize(double value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_IRichTextBlock<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_FontFamily(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::FontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_FontFamily(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_IRichTextBlock<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_FontWeight(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::FontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_FontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontStyle impl_IRichTextBlock<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_FontStyle(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::FontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_FontStyle(value));
}

template <typename D> Windows::UI::Text::FontStretch impl_IRichTextBlock<D>::FontStretch() const
{
    Windows::UI::Text::FontStretch value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_FontStretch(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::FontStretch(Windows::UI::Text::FontStretch value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_FontStretch(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IRichTextBlock<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_Foreground(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::Foreground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_Foreground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::TextWrapping impl_IRichTextBlock<D>::TextWrapping() const
{
    Windows::UI::Xaml::TextWrapping value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_TextWrapping(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::TextWrapping(Windows::UI::Xaml::TextWrapping value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_TextWrapping(value));
}

template <typename D> Windows::UI::Xaml::TextTrimming impl_IRichTextBlock<D>::TextTrimming() const
{
    Windows::UI::Xaml::TextTrimming value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_TextTrimming(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::TextTrimming(Windows::UI::Xaml::TextTrimming value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_TextTrimming(value));
}

template <typename D> Windows::UI::Xaml::TextAlignment impl_IRichTextBlock<D>::TextAlignment() const
{
    Windows::UI::Xaml::TextAlignment value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_TextAlignment(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::TextAlignment(Windows::UI::Xaml::TextAlignment value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_TextAlignment(value));
}

template <typename D> Windows::UI::Xaml::Documents::BlockCollection impl_IRichTextBlock<D>::Blocks() const
{
    Windows::UI::Xaml::Documents::BlockCollection value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_Blocks(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Thickness impl_IRichTextBlock<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_Padding(get_abi(value)));
}

template <typename D> double impl_IRichTextBlock<D>::LineHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_LineHeight(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::LineHeight(double value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_LineHeight(value));
}

template <typename D> Windows::UI::Xaml::LineStackingStrategy impl_IRichTextBlock<D>::LineStackingStrategy() const
{
    Windows::UI::Xaml::LineStackingStrategy value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_LineStackingStrategy(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_LineStackingStrategy(value));
}

template <typename D> int32_t impl_IRichTextBlock<D>::CharacterSpacing() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_CharacterSpacing(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::CharacterSpacing(int32_t value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_CharacterSpacing(value));
}

template <typename D> Windows::UI::Xaml::Controls::RichTextBlockOverflow impl_IRichTextBlock<D>::OverflowContentTarget() const
{
    Windows::UI::Xaml::Controls::RichTextBlockOverflow value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_OverflowContentTarget(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::OverflowContentTarget(const Windows::UI::Xaml::Controls::RichTextBlockOverflow & value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_OverflowContentTarget(get_abi(value)));
}

template <typename D> bool impl_IRichTextBlock<D>::IsTextSelectionEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_IsTextSelectionEnabled(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::IsTextSelectionEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_IsTextSelectionEnabled(value));
}

template <typename D> bool impl_IRichTextBlock<D>::HasOverflowContent() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_HasOverflowContent(&value));
    return value;
}

template <typename D> hstring impl_IRichTextBlock<D>::SelectedText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_SelectedText(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlock<D>::ContentStart() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_ContentStart(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlock<D>::ContentEnd() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_ContentEnd(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlock<D>::SelectionStart() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_SelectionStart(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlock<D>::SelectionEnd() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_SelectionEnd(put_abi(value)));
    return value;
}

template <typename D> double impl_IRichTextBlock<D>::BaselineOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_BaselineOffset(&value));
    return value;
}

template <typename D> event_token impl_IRichTextBlock<D>::SelectionChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->add_SelectionChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichTextBlock> impl_IRichTextBlock<D>::SelectionChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichTextBlock>(this, &ABI::Windows::UI::Xaml::Controls::IRichTextBlock::remove_SelectionChanged, SelectionChanged(value));
}

template <typename D> void impl_IRichTextBlock<D>::SelectionChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->remove_SelectionChanged(token));
}

template <typename D> event_token impl_IRichTextBlock<D>::ContextMenuOpening(const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->add_ContextMenuOpening(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichTextBlock> impl_IRichTextBlock<D>::ContextMenuOpening(auto_revoke_t, const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichTextBlock>(this, &ABI::Windows::UI::Xaml::Controls::IRichTextBlock::remove_ContextMenuOpening, ContextMenuOpening(value));
}

template <typename D> void impl_IRichTextBlock<D>::ContextMenuOpening(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->remove_ContextMenuOpening(token));
}

template <typename D> void impl_IRichTextBlock<D>::SelectAll() const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->abi_SelectAll());
}

template <typename D> void impl_IRichTextBlock<D>::Select(const Windows::UI::Xaml::Documents::TextPointer & start, const Windows::UI::Xaml::Documents::TextPointer & end) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->abi_Select(get_abi(start), get_abi(end)));
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlock<D>::GetPositionFromPoint(const Windows::Foundation::Point & point) const
{
    Windows::UI::Xaml::Documents::TextPointer returnValue { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlock)->abi_GetPositionFromPoint(get_abi(point), put_abi(returnValue)));
    return returnValue;
}

template <typename D> bool impl_IRichTextBlock<D>::Focus(Windows::UI::Xaml::FocusState value) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->abi_Focus(value, &returnValue));
    return returnValue;
}

template <typename D> double impl_IRichTextBlock<D>::TextIndent() const
{
    double value {};
    check_hresult(WINRT_SHIM(IRichTextBlock)->get_TextIndent(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::TextIndent(double value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock)->put_TextIndent(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_FontSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_FontFamilyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_FontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_FontStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::FontStretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_FontStretchProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_ForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::TextWrappingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_TextWrappingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::TextTrimmingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_TextTrimmingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::TextAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_TextAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::LineHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_LineHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::LineStackingStrategyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_LineStackingStrategyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::CharacterSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_CharacterSpacingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::OverflowContentTargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_OverflowContentTargetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::IsTextSelectionEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_IsTextSelectionEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::HasOverflowContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_HasOverflowContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::SelectedTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_SelectedTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::TextIndentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics)->get_TextIndentProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_IRichTextBlock2<D>::MaxLines() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IRichTextBlock2)->get_MaxLines(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::MaxLines(int32_t value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock2)->put_MaxLines(value));
}

template <typename D> Windows::UI::Xaml::TextLineBounds impl_IRichTextBlock2<D>::TextLineBounds() const
{
    Windows::UI::Xaml::TextLineBounds value {};
    check_hresult(WINRT_SHIM(IRichTextBlock2)->get_TextLineBounds(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::TextLineBounds(Windows::UI::Xaml::TextLineBounds value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock2)->put_TextLineBounds(value));
}

template <typename D> Windows::UI::Xaml::Media::SolidColorBrush impl_IRichTextBlock2<D>::SelectionHighlightColor() const
{
    Windows::UI::Xaml::Media::SolidColorBrush value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlock2)->get_SelectionHighlightColor(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::SelectionHighlightColor(const Windows::UI::Xaml::Media::SolidColorBrush & value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock2)->put_SelectionHighlightColor(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::OpticalMarginAlignment impl_IRichTextBlock2<D>::OpticalMarginAlignment() const
{
    Windows::UI::Xaml::OpticalMarginAlignment value {};
    check_hresult(WINRT_SHIM(IRichTextBlock2)->get_OpticalMarginAlignment(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock2)->put_OpticalMarginAlignment(value));
}

template <typename D> bool impl_IRichTextBlock2<D>::IsColorFontEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichTextBlock2)->get_IsColorFontEnabled(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::IsColorFontEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock2)->put_IsColorFontEnabled(value));
}

template <typename D> Windows::UI::Xaml::TextReadingOrder impl_IRichTextBlock2<D>::TextReadingOrder() const
{
    Windows::UI::Xaml::TextReadingOrder value {};
    check_hresult(WINRT_SHIM(IRichTextBlock2)->get_TextReadingOrder(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock2)->put_TextReadingOrder(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::MaxLinesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics2)->get_MaxLinesProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::TextLineBoundsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics2)->get_TextLineBoundsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::SelectionHighlightColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics2)->get_SelectionHighlightColorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::OpticalMarginAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics2)->get_OpticalMarginAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::IsColorFontEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics2)->get_IsColorFontEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::TextReadingOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics2)->get_TextReadingOrderProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IRichTextBlock3<D>::IsTextScaleFactorEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichTextBlock3)->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock3<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlock3)->put_IsTextScaleFactorEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics3<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockStatics3)->get_IsTextScaleFactorEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::RichTextBlockOverflow impl_IRichTextBlockOverflow<D>::OverflowContentTarget() const
{
    Windows::UI::Xaml::Controls::RichTextBlockOverflow value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->get_OverflowContentTarget(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichTextBlockOverflow<D>::OverflowContentTarget(const Windows::UI::Xaml::Controls::RichTextBlockOverflow & value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->put_OverflowContentTarget(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IRichTextBlockOverflow<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichTextBlockOverflow<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->put_Padding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::RichTextBlock impl_IRichTextBlockOverflow<D>::ContentSource() const
{
    Windows::UI::Xaml::Controls::RichTextBlock value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->get_ContentSource(put_abi(value)));
    return value;
}

template <typename D> bool impl_IRichTextBlockOverflow<D>::HasOverflowContent() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->get_HasOverflowContent(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlockOverflow<D>::ContentStart() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->get_ContentStart(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlockOverflow<D>::ContentEnd() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->get_ContentEnd(put_abi(value)));
    return value;
}

template <typename D> double impl_IRichTextBlockOverflow<D>::BaselineOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->get_BaselineOffset(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlockOverflow<D>::GetPositionFromPoint(const Windows::Foundation::Point & point) const
{
    Windows::UI::Xaml::Documents::TextPointer returnValue { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->abi_GetPositionFromPoint(get_abi(point), put_abi(returnValue)));
    return returnValue;
}

template <typename D> bool impl_IRichTextBlockOverflow<D>::Focus(Windows::UI::Xaml::FocusState value) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow)->abi_Focus(value, &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockOverflowStatics<D>::OverflowContentTargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockOverflowStatics)->get_OverflowContentTargetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockOverflowStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockOverflowStatics)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockOverflowStatics<D>::HasOverflowContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockOverflowStatics)->get_HasOverflowContentProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_IRichTextBlockOverflow2<D>::MaxLines() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow2)->get_MaxLines(&value));
    return value;
}

template <typename D> void impl_IRichTextBlockOverflow2<D>::MaxLines(int32_t value) const
{
    check_hresult(WINRT_SHIM(IRichTextBlockOverflow2)->put_MaxLines(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockOverflowStatics2<D>::MaxLinesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichTextBlockOverflowStatics2)->get_MaxLinesProperty(put_abi(value)));
    return value;
}

template <typename D> double impl_ITextBlock<D>::FontSize() const
{
    double value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_FontSize(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::FontSize(double value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_ITextBlock<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlock)->get_FontFamily(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBlock<D>::FontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_FontFamily(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_ITextBlock<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_FontWeight(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBlock<D>::FontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_FontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontStyle impl_ITextBlock<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_FontStyle(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::FontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_FontStyle(value));
}

template <typename D> Windows::UI::Text::FontStretch impl_ITextBlock<D>::FontStretch() const
{
    Windows::UI::Text::FontStretch value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_FontStretch(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::FontStretch(Windows::UI::Text::FontStretch value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_FontStretch(value));
}

template <typename D> int32_t impl_ITextBlock<D>::CharacterSpacing() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_CharacterSpacing(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::CharacterSpacing(int32_t value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_CharacterSpacing(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ITextBlock<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlock)->get_Foreground(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBlock<D>::Foreground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_Foreground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::TextWrapping impl_ITextBlock<D>::TextWrapping() const
{
    Windows::UI::Xaml::TextWrapping value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_TextWrapping(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::TextWrapping(Windows::UI::Xaml::TextWrapping value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_TextWrapping(value));
}

template <typename D> Windows::UI::Xaml::TextTrimming impl_ITextBlock<D>::TextTrimming() const
{
    Windows::UI::Xaml::TextTrimming value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_TextTrimming(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::TextTrimming(Windows::UI::Xaml::TextTrimming value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_TextTrimming(value));
}

template <typename D> Windows::UI::Xaml::TextAlignment impl_ITextBlock<D>::TextAlignment() const
{
    Windows::UI::Xaml::TextAlignment value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_TextAlignment(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::TextAlignment(Windows::UI::Xaml::TextAlignment value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_TextAlignment(value));
}

template <typename D> hstring impl_ITextBlock<D>::Text() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ITextBlock)->get_Text(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBlock<D>::Text(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_Text(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Documents::InlineCollection impl_ITextBlock<D>::Inlines() const
{
    Windows::UI::Xaml::Documents::InlineCollection value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlock)->get_Inlines(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Thickness impl_ITextBlock<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBlock<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_Padding(get_abi(value)));
}

template <typename D> double impl_ITextBlock<D>::LineHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_LineHeight(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::LineHeight(double value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_LineHeight(value));
}

template <typename D> Windows::UI::Xaml::LineStackingStrategy impl_ITextBlock<D>::LineStackingStrategy() const
{
    Windows::UI::Xaml::LineStackingStrategy value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_LineStackingStrategy(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_LineStackingStrategy(value));
}

template <typename D> bool impl_ITextBlock<D>::IsTextSelectionEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_IsTextSelectionEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::IsTextSelectionEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->put_IsTextSelectionEnabled(value));
}

template <typename D> hstring impl_ITextBlock<D>::SelectedText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ITextBlock)->get_SelectedText(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_ITextBlock<D>::ContentStart() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlock)->get_ContentStart(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_ITextBlock<D>::ContentEnd() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlock)->get_ContentEnd(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_ITextBlock<D>::SelectionStart() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlock)->get_SelectionStart(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_ITextBlock<D>::SelectionEnd() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlock)->get_SelectionEnd(put_abi(value)));
    return value;
}

template <typename D> double impl_ITextBlock<D>::BaselineOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(ITextBlock)->get_BaselineOffset(&value));
    return value;
}

template <typename D> event_token impl_ITextBlock<D>::SelectionChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBlock)->add_SelectionChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBlock> impl_ITextBlock<D>::SelectionChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBlock>(this, &ABI::Windows::UI::Xaml::Controls::ITextBlock::remove_SelectionChanged, SelectionChanged(value));
}

template <typename D> void impl_ITextBlock<D>::SelectionChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->remove_SelectionChanged(token));
}

template <typename D> event_token impl_ITextBlock<D>::ContextMenuOpening(const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBlock)->add_ContextMenuOpening(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBlock> impl_ITextBlock<D>::ContextMenuOpening(auto_revoke_t, const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBlock>(this, &ABI::Windows::UI::Xaml::Controls::ITextBlock::remove_ContextMenuOpening, ContextMenuOpening(value));
}

template <typename D> void impl_ITextBlock<D>::ContextMenuOpening(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->remove_ContextMenuOpening(token));
}

template <typename D> void impl_ITextBlock<D>::SelectAll() const
{
    check_hresult(WINRT_SHIM(ITextBlock)->abi_SelectAll());
}

template <typename D> void impl_ITextBlock<D>::Select(const Windows::UI::Xaml::Documents::TextPointer & start, const Windows::UI::Xaml::Documents::TextPointer & end) const
{
    check_hresult(WINRT_SHIM(ITextBlock)->abi_Select(get_abi(start), get_abi(end)));
}

template <typename D> bool impl_ITextBlock<D>::Focus(Windows::UI::Xaml::FocusState value) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(ITextBlock)->abi_Focus(value, &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_FontSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_FontFamilyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_FontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_FontStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::FontStretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_FontStretchProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::CharacterSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_CharacterSpacingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_ForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::TextWrappingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_TextWrappingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::TextTrimmingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_TextTrimmingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::TextAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_TextAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_TextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::LineHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_LineHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::LineStackingStrategyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_LineStackingStrategyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::IsTextSelectionEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_IsTextSelectionEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::SelectedTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics)->get_SelectedTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::SolidColorBrush impl_ITextBlock2<D>::SelectionHighlightColor() const
{
    Windows::UI::Xaml::Media::SolidColorBrush value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlock2)->get_SelectionHighlightColor(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::SelectionHighlightColor(const Windows::UI::Xaml::Media::SolidColorBrush & value) const
{
    check_hresult(WINRT_SHIM(ITextBlock2)->put_SelectionHighlightColor(get_abi(value)));
}

template <typename D> int32_t impl_ITextBlock2<D>::MaxLines() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextBlock2)->get_MaxLines(&value));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::MaxLines(int32_t value) const
{
    check_hresult(WINRT_SHIM(ITextBlock2)->put_MaxLines(value));
}

template <typename D> Windows::UI::Xaml::TextLineBounds impl_ITextBlock2<D>::TextLineBounds() const
{
    Windows::UI::Xaml::TextLineBounds value {};
    check_hresult(WINRT_SHIM(ITextBlock2)->get_TextLineBounds(&value));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::TextLineBounds(Windows::UI::Xaml::TextLineBounds value) const
{
    check_hresult(WINRT_SHIM(ITextBlock2)->put_TextLineBounds(value));
}

template <typename D> Windows::UI::Xaml::OpticalMarginAlignment impl_ITextBlock2<D>::OpticalMarginAlignment() const
{
    Windows::UI::Xaml::OpticalMarginAlignment value {};
    check_hresult(WINRT_SHIM(ITextBlock2)->get_OpticalMarginAlignment(&value));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) const
{
    check_hresult(WINRT_SHIM(ITextBlock2)->put_OpticalMarginAlignment(value));
}

template <typename D> bool impl_ITextBlock2<D>::IsColorFontEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ITextBlock2)->get_IsColorFontEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::IsColorFontEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ITextBlock2)->put_IsColorFontEnabled(value));
}

template <typename D> Windows::UI::Xaml::TextReadingOrder impl_ITextBlock2<D>::TextReadingOrder() const
{
    Windows::UI::Xaml::TextReadingOrder value {};
    check_hresult(WINRT_SHIM(ITextBlock2)->get_TextReadingOrder(&value));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const
{
    check_hresult(WINRT_SHIM(ITextBlock2)->put_TextReadingOrder(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::SelectionHighlightColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics2)->get_SelectionHighlightColorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::MaxLinesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics2)->get_MaxLinesProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::TextLineBoundsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics2)->get_TextLineBoundsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::OpticalMarginAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics2)->get_OpticalMarginAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::IsColorFontEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics2)->get_IsColorFontEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::TextReadingOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics2)->get_TextReadingOrderProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_ITextBlock3<D>::IsTextScaleFactorEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ITextBlock3)->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBlock3<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ITextBlock3)->put_IsTextScaleFactorEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics3<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBlockStatics3)->get_IsTextScaleFactorEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Composition::CompositionBrush impl_ITextBlock4<D>::GetAlphaMask() const
{
    Windows::UI::Composition::CompositionBrush returnValue { nullptr };
    check_hresult(WINRT_SHIM(ITextBlock4)->abi_GetAlphaMask(put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IViewbox<D>::Child() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IViewbox)->get_Child(put_abi(value)));
    return value;
}

template <typename D> void impl_IViewbox<D>::Child(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IViewbox)->put_Child(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_IViewbox<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(WINRT_SHIM(IViewbox)->get_Stretch(&value));
    return value;
}

template <typename D> void impl_IViewbox<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(WINRT_SHIM(IViewbox)->put_Stretch(value));
}

template <typename D> Windows::UI::Xaml::Controls::StretchDirection impl_IViewbox<D>::StretchDirection() const
{
    Windows::UI::Xaml::Controls::StretchDirection value {};
    check_hresult(WINRT_SHIM(IViewbox)->get_StretchDirection(&value));
    return value;
}

template <typename D> void impl_IViewbox<D>::StretchDirection(Windows::UI::Xaml::Controls::StretchDirection value) const
{
    check_hresult(WINRT_SHIM(IViewbox)->put_StretchDirection(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IViewboxStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IViewboxStatics)->get_StretchProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IViewboxStatics<D>::StretchDirectionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IViewboxStatics)->get_StretchDirectionProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICanvasStatics<D>::LeftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICanvasStatics)->get_LeftProperty(put_abi(value)));
    return value;
}

template <typename D> double impl_ICanvasStatics<D>::GetLeft(const Windows::UI::Xaml::UIElement & element) const
{
    double length {};
    check_hresult(WINRT_SHIM(ICanvasStatics)->abi_GetLeft(get_abi(element), &length));
    return length;
}

template <typename D> void impl_ICanvasStatics<D>::SetLeft(const Windows::UI::Xaml::UIElement & element, double length) const
{
    check_hresult(WINRT_SHIM(ICanvasStatics)->abi_SetLeft(get_abi(element), length));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICanvasStatics<D>::TopProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICanvasStatics)->get_TopProperty(put_abi(value)));
    return value;
}

template <typename D> double impl_ICanvasStatics<D>::GetTop(const Windows::UI::Xaml::UIElement & element) const
{
    double length {};
    check_hresult(WINRT_SHIM(ICanvasStatics)->abi_GetTop(get_abi(element), &length));
    return length;
}

template <typename D> void impl_ICanvasStatics<D>::SetTop(const Windows::UI::Xaml::UIElement & element, double length) const
{
    check_hresult(WINRT_SHIM(ICanvasStatics)->abi_SetTop(get_abi(element), length));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICanvasStatics<D>::ZIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICanvasStatics)->get_ZIndexProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_ICanvasStatics<D>::GetZIndex(const Windows::UI::Xaml::UIElement & element) const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ICanvasStatics)->abi_GetZIndex(get_abi(element), &value));
    return value;
}

template <typename D> void impl_ICanvasStatics<D>::SetZIndex(const Windows::UI::Xaml::UIElement & element, int32_t value) const
{
    check_hresult(WINRT_SHIM(ICanvasStatics)->abi_SetZIndex(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::Controls::Canvas impl_ICanvasFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Canvas instance { nullptr };
    check_hresult(WINRT_SHIM(ICanvasFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IInspectable impl_IContentControl<D>::Content() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IContentControl)->get_Content(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentControl<D>::Content(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IContentControl)->put_Content(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IContentControl<D>::ContentTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IContentControl)->get_ContentTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentControl<D>::ContentTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IContentControl)->put_ContentTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector impl_IContentControl<D>::ContentTemplateSelector() const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector value { nullptr };
    check_hresult(WINRT_SHIM(IContentControl)->get_ContentTemplateSelector(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentControl<D>::ContentTemplateSelector(const Windows::UI::Xaml::Controls::DataTemplateSelector & value) const
{
    check_hresult(WINRT_SHIM(IContentControl)->put_ContentTemplateSelector(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IContentControl<D>::ContentTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IContentControl)->get_ContentTransitions(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentControl<D>::ContentTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(WINRT_SHIM(IContentControl)->put_ContentTransitions(get_abi(value)));
}

template <typename D> void impl_IContentControlOverrides<D>::OnContentChanged(const Windows::Foundation::IInspectable & oldContent, const Windows::Foundation::IInspectable & newContent) const
{
    check_hresult(WINRT_SHIM(IContentControlOverrides)->abi_OnContentChanged(get_abi(oldContent), get_abi(newContent)));
}

template <typename D> void impl_IContentControlOverrides<D>::OnContentTemplateChanged(const Windows::UI::Xaml::DataTemplate & oldContentTemplate, const Windows::UI::Xaml::DataTemplate & newContentTemplate) const
{
    check_hresult(WINRT_SHIM(IContentControlOverrides)->abi_OnContentTemplateChanged(get_abi(oldContentTemplate), get_abi(newContentTemplate)));
}

template <typename D> void impl_IContentControlOverrides<D>::OnContentTemplateSelectorChanged(const Windows::UI::Xaml::Controls::DataTemplateSelector & oldContentTemplateSelector, const Windows::UI::Xaml::Controls::DataTemplateSelector & newContentTemplateSelector) const
{
    check_hresult(WINRT_SHIM(IContentControlOverrides)->abi_OnContentTemplateSelectorChanged(get_abi(oldContentTemplateSelector), get_abi(newContentTemplateSelector)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentControlStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentControlStatics)->get_ContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentControlStatics<D>::ContentTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentControlStatics)->get_ContentTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentControlStatics<D>::ContentTemplateSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentControlStatics)->get_ContentTemplateSelectorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentControlStatics<D>::ContentTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentControlStatics)->get_ContentTransitionsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ContentControl impl_IContentControlFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ContentControl instance { nullptr };
    check_hresult(WINRT_SHIM(IContentControlFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IContentControl2<D>::ContentTemplateRoot() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IContentControl2)->get_ContentTemplateRoot(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::RowDefinitionCollection impl_IGrid<D>::RowDefinitions() const
{
    Windows::UI::Xaml::Controls::RowDefinitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IGrid)->get_RowDefinitions(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ColumnDefinitionCollection impl_IGrid<D>::ColumnDefinitions() const
{
    Windows::UI::Xaml::Controls::ColumnDefinitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IGrid)->get_ColumnDefinitions(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics<D>::RowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IGridStatics)->get_RowProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_IGridStatics<D>::GetRow(const Windows::UI::Xaml::FrameworkElement & element) const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IGridStatics)->abi_GetRow(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IGridStatics<D>::SetRow(const Windows::UI::Xaml::FrameworkElement & element, int32_t value) const
{
    check_hresult(WINRT_SHIM(IGridStatics)->abi_SetRow(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics<D>::ColumnProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IGridStatics)->get_ColumnProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_IGridStatics<D>::GetColumn(const Windows::UI::Xaml::FrameworkElement & element) const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IGridStatics)->abi_GetColumn(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IGridStatics<D>::SetColumn(const Windows::UI::Xaml::FrameworkElement & element, int32_t value) const
{
    check_hresult(WINRT_SHIM(IGridStatics)->abi_SetColumn(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics<D>::RowSpanProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IGridStatics)->get_RowSpanProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_IGridStatics<D>::GetRowSpan(const Windows::UI::Xaml::FrameworkElement & element) const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IGridStatics)->abi_GetRowSpan(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IGridStatics<D>::SetRowSpan(const Windows::UI::Xaml::FrameworkElement & element, int32_t value) const
{
    check_hresult(WINRT_SHIM(IGridStatics)->abi_SetRowSpan(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics<D>::ColumnSpanProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IGridStatics)->get_ColumnSpanProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_IGridStatics<D>::GetColumnSpan(const Windows::UI::Xaml::FrameworkElement & element) const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IGridStatics)->abi_GetColumnSpan(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IGridStatics<D>::SetColumnSpan(const Windows::UI::Xaml::FrameworkElement & element, int32_t value) const
{
    check_hresult(WINRT_SHIM(IGridStatics)->abi_SetColumnSpan(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::Controls::Grid impl_IGridFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Grid instance { nullptr };
    check_hresult(WINRT_SHIM(IGridFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IGrid2<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IGrid2)->get_BorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_IGrid2<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IGrid2)->put_BorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IGrid2<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IGrid2)->get_BorderThickness(put_abi(value)));
    return value;
}

template <typename D> void impl_IGrid2<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IGrid2)->put_BorderThickness(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius impl_IGrid2<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value {};
    check_hresult(WINRT_SHIM(IGrid2)->get_CornerRadius(put_abi(value)));
    return value;
}

template <typename D> void impl_IGrid2<D>::CornerRadius(const Windows::UI::Xaml::CornerRadius & value) const
{
    check_hresult(WINRT_SHIM(IGrid2)->put_CornerRadius(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IGrid2<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IGrid2)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void impl_IGrid2<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IGrid2)->put_Padding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics2<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IGridStatics2)->get_BorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics2<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IGridStatics2)->get_BorderThicknessProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics2<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IGridStatics2)->get_CornerRadiusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics2<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IGridStatics2)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IItemsControl<D>::ItemsSource() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IItemsControl)->get_ItemsSource(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemsSource(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IItemsControl)->put_ItemsSource(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::ItemCollection impl_IItemsControl<D>::Items() const
{
    Windows::UI::Xaml::Controls::ItemCollection value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl)->get_Items(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IItemsControl<D>::ItemTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl)->get_ItemTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IItemsControl)->put_ItemTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector impl_IItemsControl<D>::ItemTemplateSelector() const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl)->get_ItemTemplateSelector(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemTemplateSelector(const Windows::UI::Xaml::Controls::DataTemplateSelector & value) const
{
    check_hresult(WINRT_SHIM(IItemsControl)->put_ItemTemplateSelector(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::ItemsPanelTemplate impl_IItemsControl<D>::ItemsPanel() const
{
    Windows::UI::Xaml::Controls::ItemsPanelTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl)->get_ItemsPanel(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemsPanel(const Windows::UI::Xaml::Controls::ItemsPanelTemplate & value) const
{
    check_hresult(WINRT_SHIM(IItemsControl)->put_ItemsPanel(get_abi(value)));
}

template <typename D> hstring impl_IItemsControl<D>::DisplayMemberPath() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IItemsControl)->get_DisplayMemberPath(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::DisplayMemberPath(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IItemsControl)->put_DisplayMemberPath(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_IItemsControl<D>::ItemContainerStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl)->get_ItemContainerStyle(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemContainerStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(WINRT_SHIM(IItemsControl)->put_ItemContainerStyle(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::StyleSelector impl_IItemsControl<D>::ItemContainerStyleSelector() const
{
    Windows::UI::Xaml::Controls::StyleSelector value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl)->get_ItemContainerStyleSelector(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemContainerStyleSelector(const Windows::UI::Xaml::Controls::StyleSelector & value) const
{
    check_hresult(WINRT_SHIM(IItemsControl)->put_ItemContainerStyleSelector(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::ItemContainerGenerator impl_IItemsControl<D>::ItemContainerGenerator() const
{
    Windows::UI::Xaml::Controls::ItemContainerGenerator value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl)->get_ItemContainerGenerator(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IItemsControl<D>::ItemContainerTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl)->get_ItemContainerTransitions(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemContainerTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(WINRT_SHIM(IItemsControl)->put_ItemContainerTransitions(get_abi(value)));
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::GroupStyle> impl_IItemsControl<D>::GroupStyle() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::GroupStyle> value;
    check_hresult(WINRT_SHIM(IItemsControl)->get_GroupStyle(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::GroupStyleSelector impl_IItemsControl<D>::GroupStyleSelector() const
{
    Windows::UI::Xaml::Controls::GroupStyleSelector value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl)->get_GroupStyleSelector(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::GroupStyleSelector(const Windows::UI::Xaml::Controls::GroupStyleSelector & value) const
{
    check_hresult(WINRT_SHIM(IItemsControl)->put_GroupStyleSelector(get_abi(value)));
}

template <typename D> bool impl_IItemsControl<D>::IsGrouping() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IItemsControl)->get_IsGrouping(&value));
    return value;
}

template <typename D> bool impl_IItemsControlOverrides<D>::IsItemItsOwnContainerOverride(const Windows::Foundation::IInspectable & item) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IItemsControlOverrides)->abi_IsItemItsOwnContainerOverride(get_abi(item), &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemsControlOverrides<D>::GetContainerForItemOverride() const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlOverrides)->abi_GetContainerForItemOverride(put_abi(returnValue)));
    return returnValue;
}

template <typename D> void impl_IItemsControlOverrides<D>::ClearContainerForItemOverride(const Windows::UI::Xaml::DependencyObject & element, const Windows::Foundation::IInspectable & item) const
{
    check_hresult(WINRT_SHIM(IItemsControlOverrides)->abi_ClearContainerForItemOverride(get_abi(element), get_abi(item)));
}

template <typename D> void impl_IItemsControlOverrides<D>::PrepareContainerForItemOverride(const Windows::UI::Xaml::DependencyObject & element, const Windows::Foundation::IInspectable & item) const
{
    check_hresult(WINRT_SHIM(IItemsControlOverrides)->abi_PrepareContainerForItemOverride(get_abi(element), get_abi(item)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnItemsChanged(const Windows::Foundation::IInspectable & e) const
{
    check_hresult(WINRT_SHIM(IItemsControlOverrides)->abi_OnItemsChanged(get_abi(e)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnItemContainerStyleChanged(const Windows::UI::Xaml::Style & oldItemContainerStyle, const Windows::UI::Xaml::Style & newItemContainerStyle) const
{
    check_hresult(WINRT_SHIM(IItemsControlOverrides)->abi_OnItemContainerStyleChanged(get_abi(oldItemContainerStyle), get_abi(newItemContainerStyle)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnItemContainerStyleSelectorChanged(const Windows::UI::Xaml::Controls::StyleSelector & oldItemContainerStyleSelector, const Windows::UI::Xaml::Controls::StyleSelector & newItemContainerStyleSelector) const
{
    check_hresult(WINRT_SHIM(IItemsControlOverrides)->abi_OnItemContainerStyleSelectorChanged(get_abi(oldItemContainerStyleSelector), get_abi(newItemContainerStyleSelector)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnItemTemplateChanged(const Windows::UI::Xaml::DataTemplate & oldItemTemplate, const Windows::UI::Xaml::DataTemplate & newItemTemplate) const
{
    check_hresult(WINRT_SHIM(IItemsControlOverrides)->abi_OnItemTemplateChanged(get_abi(oldItemTemplate), get_abi(newItemTemplate)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnItemTemplateSelectorChanged(const Windows::UI::Xaml::Controls::DataTemplateSelector & oldItemTemplateSelector, const Windows::UI::Xaml::Controls::DataTemplateSelector & newItemTemplateSelector) const
{
    check_hresult(WINRT_SHIM(IItemsControlOverrides)->abi_OnItemTemplateSelectorChanged(get_abi(oldItemTemplateSelector), get_abi(newItemTemplateSelector)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnGroupStyleSelectorChanged(const Windows::UI::Xaml::Controls::GroupStyleSelector & oldGroupStyleSelector, const Windows::UI::Xaml::Controls::GroupStyleSelector & newGroupStyleSelector) const
{
    check_hresult(WINRT_SHIM(IItemsControlOverrides)->abi_OnGroupStyleSelectorChanged(get_abi(oldGroupStyleSelector), get_abi(newGroupStyleSelector)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemsSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->get_ItemsSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->get_ItemTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemTemplateSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->get_ItemTemplateSelectorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemsPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->get_ItemsPanelProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::DisplayMemberPathProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->get_DisplayMemberPathProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemContainerStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->get_ItemContainerStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemContainerStyleSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->get_ItemContainerStyleSelectorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemContainerTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->get_ItemContainerTransitionsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::GroupStyleSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->get_GroupStyleSelectorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::IsGroupingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->get_IsGroupingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ItemsControl impl_IItemsControlStatics<D>::GetItemsOwner(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ItemsControl returnValue { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->abi_GetItemsOwner(get_abi(element), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::ItemsControl impl_IItemsControlStatics<D>::ItemsControlFromItemContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::UI::Xaml::Controls::ItemsControl returnValue { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlStatics)->abi_ItemsControlFromItemContainer(get_abi(container), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::ItemsControl impl_IItemsControlFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ItemsControl instance { nullptr };
    check_hresult(WINRT_SHIM(IItemsControlFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Panel impl_IItemsControl2<D>::ItemsPanelRoot() const
{
    Windows::UI::Xaml::Controls::Panel value { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl2)->get_ItemsPanelRoot(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemsControl3<D>::GroupHeaderContainerFromItemContainer(const Windows::UI::Xaml::DependencyObject & itemContainer) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(WINRT_SHIM(IItemsControl3)->abi_GroupHeaderContainerFromItemContainer(get_abi(itemContainer), put_abi(returnValue)));
    return returnValue;
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFullWindowButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsFullWindowButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFullWindowButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsFullWindowButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFullWindowEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsFullWindowEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFullWindowEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsFullWindowEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsZoomButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsZoomButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsZoomButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsZoomButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsZoomEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsZoomEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsZoomEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsZoomEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFastForwardButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsFastForwardButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFastForwardButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsFastForwardButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFastForwardEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsFastForwardEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFastForwardEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsFastForwardEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFastRewindButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsFastRewindButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFastRewindButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsFastRewindButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFastRewindEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsFastRewindEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFastRewindEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsFastRewindEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsStopButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsStopButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsStopButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsStopButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsStopEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsStopEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsStopEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsStopEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsVolumeButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsVolumeButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsVolumeButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsVolumeButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsVolumeEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsVolumeEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsVolumeEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsVolumeEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsPlaybackRateButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsPlaybackRateButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsPlaybackRateButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsPlaybackRateButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsPlaybackRateEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsPlaybackRateEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsPlaybackRateEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsPlaybackRateEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsSeekBarVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsSeekBarVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsSeekBarVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsSeekBarVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsSeekEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsSeekEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsSeekEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsSeekEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsCompact() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls)->get_IsCompact(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsCompact(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls)->put_IsCompact(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFullWindowButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsFullWindowButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFullWindowEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsFullWindowEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsZoomButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsZoomButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsZoomEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsZoomEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFastForwardButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsFastForwardButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFastForwardEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsFastForwardEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFastRewindButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsFastRewindButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFastRewindEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsFastRewindEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsStopButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsStopButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsStopEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsStopEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsVolumeButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsVolumeButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsVolumeEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsVolumeEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsPlaybackRateButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsPlaybackRateButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsPlaybackRateEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsPlaybackRateEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsSeekBarVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsSeekBarVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsSeekEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsSeekEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsCompactProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics)->get_IsCompactProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MediaTransportControls impl_IMediaTransportControlsFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MediaTransportControls instance { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsSkipForwardButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->get_IsSkipForwardButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsSkipForwardButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->put_IsSkipForwardButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsSkipForwardEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->get_IsSkipForwardEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsSkipForwardEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->put_IsSkipForwardEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsSkipBackwardButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->get_IsSkipBackwardButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsSkipBackwardButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->put_IsSkipBackwardButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsSkipBackwardEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->get_IsSkipBackwardEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsSkipBackwardEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->put_IsSkipBackwardEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsNextTrackButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->get_IsNextTrackButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsNextTrackButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->put_IsNextTrackButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsPreviousTrackButtonVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->get_IsPreviousTrackButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsPreviousTrackButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->put_IsPreviousTrackButtonVisible(value));
}

template <typename D> Windows::UI::Xaml::Media::FastPlayFallbackBehaviour impl_IMediaTransportControls2<D>::FastPlayFallbackBehaviour() const
{
    Windows::UI::Xaml::Media::FastPlayFallbackBehaviour value {};
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->get_FastPlayFallbackBehaviour(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::FastPlayFallbackBehaviour(Windows::UI::Xaml::Media::FastPlayFallbackBehaviour value) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->put_FastPlayFallbackBehaviour(value));
}

template <typename D> event_token impl_IMediaTransportControls2<D>::ThumbnailRequested(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaTransportControls, Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->add_ThumbnailRequested(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaTransportControls2> impl_IMediaTransportControls2<D>::ThumbnailRequested(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaTransportControls, Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IMediaTransportControls2>(this, &ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2::remove_ThumbnailRequested, ThumbnailRequested(value));
}

template <typename D> void impl_IMediaTransportControls2<D>::ThumbnailRequested(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaTransportControls2)->remove_ThumbnailRequested(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsSkipForwardButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics2)->get_IsSkipForwardButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsSkipForwardEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics2)->get_IsSkipForwardEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsSkipBackwardButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics2)->get_IsSkipBackwardButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsSkipBackwardEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics2)->get_IsSkipBackwardEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsNextTrackButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics2)->get_IsNextTrackButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsPreviousTrackButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics2)->get_IsPreviousTrackButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::FastPlayFallbackBehaviourProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaTransportControlsStatics2)->get_FastPlayFallbackBehaviourProperty(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IPasswordBox<D>::Password() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IPasswordBox)->get_Password(put_abi(value)));
    return value;
}

template <typename D> void impl_IPasswordBox<D>::Password(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox)->put_Password(get_abi(value)));
}

template <typename D> hstring impl_IPasswordBox<D>::PasswordChar() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IPasswordBox)->get_PasswordChar(put_abi(value)));
    return value;
}

template <typename D> void impl_IPasswordBox<D>::PasswordChar(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox)->put_PasswordChar(get_abi(value)));
}

template <typename D> bool impl_IPasswordBox<D>::IsPasswordRevealButtonEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IPasswordBox)->get_IsPasswordRevealButtonEnabled(&value));
    return value;
}

template <typename D> void impl_IPasswordBox<D>::IsPasswordRevealButtonEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox)->put_IsPasswordRevealButtonEnabled(value));
}

template <typename D> int32_t impl_IPasswordBox<D>::MaxLength() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IPasswordBox)->get_MaxLength(&value));
    return value;
}

template <typename D> void impl_IPasswordBox<D>::MaxLength(int32_t value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox)->put_MaxLength(value));
}

template <typename D> event_token impl_IPasswordBox<D>::PasswordChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IPasswordBox)->add_PasswordChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IPasswordBox> impl_IPasswordBox<D>::PasswordChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IPasswordBox>(this, &ABI::Windows::UI::Xaml::Controls::IPasswordBox::remove_PasswordChanged, PasswordChanged(value));
}

template <typename D> void impl_IPasswordBox<D>::PasswordChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IPasswordBox)->remove_PasswordChanged(token));
}

template <typename D> event_token impl_IPasswordBox<D>::ContextMenuOpening(const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IPasswordBox)->add_ContextMenuOpening(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IPasswordBox> impl_IPasswordBox<D>::ContextMenuOpening(auto_revoke_t, const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    return impl::make_event_revoker<D, IPasswordBox>(this, &ABI::Windows::UI::Xaml::Controls::IPasswordBox::remove_ContextMenuOpening, ContextMenuOpening(value));
}

template <typename D> void impl_IPasswordBox<D>::ContextMenuOpening(event_token token) const
{
    check_hresult(WINRT_SHIM(IPasswordBox)->remove_ContextMenuOpening(token));
}

template <typename D> void impl_IPasswordBox<D>::SelectAll() const
{
    check_hresult(WINRT_SHIM(IPasswordBox)->abi_SelectAll());
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics<D>::PasswordProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics)->get_PasswordProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics<D>::PasswordCharProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics)->get_PasswordCharProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics<D>::IsPasswordRevealButtonEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics)->get_IsPasswordRevealButtonEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics<D>::MaxLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics)->get_MaxLengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IPasswordBox2<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IPasswordBox2)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IPasswordBox2<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox2)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IPasswordBox2<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBox2)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IPasswordBox2<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox2)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> hstring impl_IPasswordBox2<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IPasswordBox2)->get_PlaceholderText(put_abi(value)));
    return value;
}

template <typename D> void impl_IPasswordBox2<D>::PlaceholderText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox2)->put_PlaceholderText(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::SolidColorBrush impl_IPasswordBox2<D>::SelectionHighlightColor() const
{
    Windows::UI::Xaml::Media::SolidColorBrush value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBox2)->get_SelectionHighlightColor(put_abi(value)));
    return value;
}

template <typename D> void impl_IPasswordBox2<D>::SelectionHighlightColor(const Windows::UI::Xaml::Media::SolidColorBrush & value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox2)->put_SelectionHighlightColor(get_abi(value)));
}

template <typename D> bool impl_IPasswordBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IPasswordBox2)->get_PreventKeyboardDisplayOnProgrammaticFocus(&value));
    return value;
}

template <typename D> void impl_IPasswordBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus(bool value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox2)->put_PreventKeyboardDisplayOnProgrammaticFocus(value));
}

template <typename D> event_token impl_IPasswordBox2<D>::Paste(const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IPasswordBox2)->add_Paste(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IPasswordBox2> impl_IPasswordBox2<D>::Paste(auto_revoke_t, const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    return impl::make_event_revoker<D, IPasswordBox2>(this, &ABI::Windows::UI::Xaml::Controls::IPasswordBox2::remove_Paste, Paste(value));
}

template <typename D> void impl_IPasswordBox2<D>::Paste(event_token token) const
{
    check_hresult(WINRT_SHIM(IPasswordBox2)->remove_Paste(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics2<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics2)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics2<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics2)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics2<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics2)->get_PlaceholderTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics2<D>::SelectionHighlightColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics2)->get_SelectionHighlightColorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics2<D>::PreventKeyboardDisplayOnProgrammaticFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics2)->get_PreventKeyboardDisplayOnProgrammaticFocusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PasswordRevealMode impl_IPasswordBox3<D>::PasswordRevealMode() const
{
    Windows::UI::Xaml::Controls::PasswordRevealMode value {};
    check_hresult(WINRT_SHIM(IPasswordBox3)->get_PasswordRevealMode(&value));
    return value;
}

template <typename D> void impl_IPasswordBox3<D>::PasswordRevealMode(Windows::UI::Xaml::Controls::PasswordRevealMode value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox3)->put_PasswordRevealMode(value));
}

template <typename D> Windows::UI::Xaml::TextReadingOrder impl_IPasswordBox3<D>::TextReadingOrder() const
{
    Windows::UI::Xaml::TextReadingOrder value {};
    check_hresult(WINRT_SHIM(IPasswordBox3)->get_TextReadingOrder(&value));
    return value;
}

template <typename D> void impl_IPasswordBox3<D>::TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox3)->put_TextReadingOrder(value));
}

template <typename D> Windows::UI::Xaml::Input::InputScope impl_IPasswordBox3<D>::InputScope() const
{
    Windows::UI::Xaml::Input::InputScope value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBox3)->get_InputScope(put_abi(value)));
    return value;
}

template <typename D> void impl_IPasswordBox3<D>::InputScope(const Windows::UI::Xaml::Input::InputScope & value) const
{
    check_hresult(WINRT_SHIM(IPasswordBox3)->put_InputScope(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics3<D>::PasswordRevealModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics3)->get_PasswordRevealModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics3<D>::TextReadingOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics3)->get_TextReadingOrderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics3<D>::InputScopeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPasswordBoxStatics3)->get_InputScopeProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IProgressRing<D>::IsActive() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IProgressRing)->get_IsActive(&value));
    return value;
}

template <typename D> void impl_IProgressRing<D>::IsActive(bool value) const
{
    check_hresult(WINRT_SHIM(IProgressRing)->put_IsActive(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ProgressRingTemplateSettings impl_IProgressRing<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ProgressRingTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(IProgressRing)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IProgressRingStatics<D>::IsActiveProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IProgressRingStatics)->get_IsActiveProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IRelativePanel<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanel)->get_BorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanel<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanel)->put_BorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IRelativePanel<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IRelativePanel)->get_BorderThickness(put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanel<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanel)->put_BorderThickness(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius impl_IRelativePanel<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value {};
    check_hresult(WINRT_SHIM(IRelativePanel)->get_CornerRadius(put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanel<D>::CornerRadius(const Windows::UI::Xaml::CornerRadius & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanel)->put_CornerRadius(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IRelativePanel<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IRelativePanel)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanel<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanel)->put_Padding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::LeftOfProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_LeftOfProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IRelativePanelStatics<D>::GetLeftOf(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetLeftOf(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetLeftOf(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetLeftOf(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AboveProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AboveProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IRelativePanelStatics<D>::GetAbove(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAbove(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAbove(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAbove(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::RightOfProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_RightOfProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IRelativePanelStatics<D>::GetRightOf(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetRightOf(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetRightOf(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetRightOf(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::BelowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_BelowProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IRelativePanelStatics<D>::GetBelow(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetBelow(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetBelow(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetBelow(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignHorizontalCenterWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignHorizontalCenterWithProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IRelativePanelStatics<D>::GetAlignHorizontalCenterWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignHorizontalCenterWith(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignHorizontalCenterWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignHorizontalCenterWith(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignVerticalCenterWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignVerticalCenterWithProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IRelativePanelStatics<D>::GetAlignVerticalCenterWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignVerticalCenterWith(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignVerticalCenterWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignVerticalCenterWith(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignLeftWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignLeftWithProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IRelativePanelStatics<D>::GetAlignLeftWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignLeftWith(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignLeftWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignLeftWith(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignTopWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignTopWithProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IRelativePanelStatics<D>::GetAlignTopWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignTopWith(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignTopWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignTopWith(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignRightWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignRightWithProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IRelativePanelStatics<D>::GetAlignRightWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignRightWith(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignRightWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignRightWith(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignBottomWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignBottomWithProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IRelativePanelStatics<D>::GetAlignBottomWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignBottomWith(get_abi(element), put_abi(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignBottomWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignBottomWith(get_abi(element), get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignLeftWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignLeftWithPanelProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignLeftWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignLeftWithPanel(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignLeftWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignLeftWithPanel(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignTopWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignTopWithPanelProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignTopWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignTopWithPanel(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignTopWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignTopWithPanel(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignRightWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignRightWithPanelProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignRightWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignRightWithPanel(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignRightWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignRightWithPanel(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignBottomWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignBottomWithPanelProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignBottomWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignBottomWithPanel(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignBottomWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignBottomWithPanel(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignHorizontalCenterWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignHorizontalCenterWithPanelProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignHorizontalCenterWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignHorizontalCenterWithPanel(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignHorizontalCenterWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignHorizontalCenterWithPanel(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignVerticalCenterWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_AlignVerticalCenterWithPanelProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignVerticalCenterWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_GetAlignVerticalCenterWithPanel(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignVerticalCenterWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->abi_SetAlignVerticalCenterWithPanel(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_BorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_BorderThicknessProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_CornerRadiusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelStatics)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::RelativePanel impl_IRelativePanelFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::RelativePanel instance { nullptr };
    check_hresult(WINRT_SHIM(IRelativePanelFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_IRichEditBox<D>::IsReadOnly() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichEditBox)->get_IsReadOnly(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::IsReadOnly(bool value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox)->put_IsReadOnly(value));
}

template <typename D> bool impl_IRichEditBox<D>::AcceptsReturn() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichEditBox)->get_AcceptsReturn(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::AcceptsReturn(bool value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox)->put_AcceptsReturn(value));
}

template <typename D> Windows::UI::Xaml::TextAlignment impl_IRichEditBox<D>::TextAlignment() const
{
    Windows::UI::Xaml::TextAlignment value {};
    check_hresult(WINRT_SHIM(IRichEditBox)->get_TextAlignment(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::TextAlignment(Windows::UI::Xaml::TextAlignment value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox)->put_TextAlignment(value));
}

template <typename D> Windows::UI::Xaml::TextWrapping impl_IRichEditBox<D>::TextWrapping() const
{
    Windows::UI::Xaml::TextWrapping value {};
    check_hresult(WINRT_SHIM(IRichEditBox)->get_TextWrapping(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::TextWrapping(Windows::UI::Xaml::TextWrapping value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox)->put_TextWrapping(value));
}

template <typename D> bool impl_IRichEditBox<D>::IsSpellCheckEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichEditBox)->get_IsSpellCheckEnabled(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::IsSpellCheckEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox)->put_IsSpellCheckEnabled(value));
}

template <typename D> bool impl_IRichEditBox<D>::IsTextPredictionEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichEditBox)->get_IsTextPredictionEnabled(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::IsTextPredictionEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox)->put_IsTextPredictionEnabled(value));
}

template <typename D> Windows::UI::Text::ITextDocument impl_IRichEditBox<D>::Document() const
{
    Windows::UI::Text::ITextDocument value;
    check_hresult(WINRT_SHIM(IRichEditBox)->get_Document(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Input::InputScope impl_IRichEditBox<D>::InputScope() const
{
    Windows::UI::Xaml::Input::InputScope value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBox)->get_InputScope(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::InputScope(const Windows::UI::Xaml::Input::InputScope & value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox)->put_InputScope(get_abi(value)));
}

template <typename D> event_token impl_IRichEditBox<D>::TextChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichEditBox)->add_TextChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox> impl_IRichEditBox<D>::TextChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichEditBox>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox::remove_TextChanged, TextChanged(value));
}

template <typename D> void impl_IRichEditBox<D>::TextChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichEditBox)->remove_TextChanged(token));
}

template <typename D> event_token impl_IRichEditBox<D>::SelectionChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichEditBox)->add_SelectionChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox> impl_IRichEditBox<D>::SelectionChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichEditBox>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox::remove_SelectionChanged, SelectionChanged(value));
}

template <typename D> void impl_IRichEditBox<D>::SelectionChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichEditBox)->remove_SelectionChanged(token));
}

template <typename D> event_token impl_IRichEditBox<D>::ContextMenuOpening(const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichEditBox)->add_ContextMenuOpening(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox> impl_IRichEditBox<D>::ContextMenuOpening(auto_revoke_t, const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichEditBox>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox::remove_ContextMenuOpening, ContextMenuOpening(value));
}

template <typename D> void impl_IRichEditBox<D>::ContextMenuOpening(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichEditBox)->remove_ContextMenuOpening(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::IsReadOnlyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics)->get_IsReadOnlyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::AcceptsReturnProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics)->get_AcceptsReturnProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::TextAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics)->get_TextAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::TextWrappingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics)->get_TextWrappingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::IsSpellCheckEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics)->get_IsSpellCheckEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::IsTextPredictionEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics)->get_IsTextPredictionEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::InputScopeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics)->get_InputScopeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::RichEditBox impl_IRichEditBoxFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::RichEditBox instance { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IInspectable impl_IRichEditBox2<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IRichEditBox2)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox2)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IRichEditBox2<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBox2)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox2)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> hstring impl_IRichEditBox2<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IRichEditBox2)->get_PlaceholderText(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::PlaceholderText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox2)->put_PlaceholderText(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::SolidColorBrush impl_IRichEditBox2<D>::SelectionHighlightColor() const
{
    Windows::UI::Xaml::Media::SolidColorBrush value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBox2)->get_SelectionHighlightColor(put_abi(value)));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::SelectionHighlightColor(const Windows::UI::Xaml::Media::SolidColorBrush & value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox2)->put_SelectionHighlightColor(get_abi(value)));
}

template <typename D> bool impl_IRichEditBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichEditBox2)->get_PreventKeyboardDisplayOnProgrammaticFocus(&value));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus(bool value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox2)->put_PreventKeyboardDisplayOnProgrammaticFocus(value));
}

template <typename D> bool impl_IRichEditBox2<D>::IsColorFontEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IRichEditBox2)->get_IsColorFontEnabled(&value));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::IsColorFontEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox2)->put_IsColorFontEnabled(value));
}

template <typename D> event_token impl_IRichEditBox2<D>::Paste(const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichEditBox2)->add_Paste(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox2> impl_IRichEditBox2<D>::Paste(auto_revoke_t, const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichEditBox2>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox2::remove_Paste, Paste(value));
}

template <typename D> void impl_IRichEditBox2<D>::Paste(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichEditBox2)->remove_Paste(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics2)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics2)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics2)->get_PlaceholderTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::SelectionHighlightColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics2)->get_SelectionHighlightColorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::PreventKeyboardDisplayOnProgrammaticFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics2)->get_PreventKeyboardDisplayOnProgrammaticFocusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::IsColorFontEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics2)->get_IsColorFontEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IRichEditBox3<D>::TextCompositionStarted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichEditBox3)->add_TextCompositionStarted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox3> impl_IRichEditBox3<D>::TextCompositionStarted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IRichEditBox3>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox3::remove_TextCompositionStarted, TextCompositionStarted(value));
}

template <typename D> void impl_IRichEditBox3<D>::TextCompositionStarted(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichEditBox3)->remove_TextCompositionStarted(token));
}

template <typename D> event_token impl_IRichEditBox3<D>::TextCompositionChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichEditBox3)->add_TextCompositionChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox3> impl_IRichEditBox3<D>::TextCompositionChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IRichEditBox3>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox3::remove_TextCompositionChanged, TextCompositionChanged(value));
}

template <typename D> void impl_IRichEditBox3<D>::TextCompositionChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichEditBox3)->remove_TextCompositionChanged(token));
}

template <typename D> event_token impl_IRichEditBox3<D>::TextCompositionEnded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichEditBox3)->add_TextCompositionEnded(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox3> impl_IRichEditBox3<D>::TextCompositionEnded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IRichEditBox3>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox3::remove_TextCompositionEnded, TextCompositionEnded(value));
}

template <typename D> void impl_IRichEditBox3<D>::TextCompositionEnded(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichEditBox3)->remove_TextCompositionEnded(token));
}

template <typename D> Windows::UI::Xaml::TextReadingOrder impl_IRichEditBox3<D>::TextReadingOrder() const
{
    Windows::UI::Xaml::TextReadingOrder value {};
    check_hresult(WINRT_SHIM(IRichEditBox3)->get_TextReadingOrder(&value));
    return value;
}

template <typename D> void impl_IRichEditBox3<D>::TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox3)->put_TextReadingOrder(value));
}

template <typename D> Windows::UI::Xaml::Controls::CandidateWindowAlignment impl_IRichEditBox3<D>::DesiredCandidateWindowAlignment() const
{
    Windows::UI::Xaml::Controls::CandidateWindowAlignment value {};
    check_hresult(WINRT_SHIM(IRichEditBox3)->get_DesiredCandidateWindowAlignment(&value));
    return value;
}

template <typename D> void impl_IRichEditBox3<D>::DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox3)->put_DesiredCandidateWindowAlignment(value));
}

template <typename D> event_token impl_IRichEditBox3<D>::CandidateWindowBoundsChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichEditBox3)->add_CandidateWindowBoundsChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox3> impl_IRichEditBox3<D>::CandidateWindowBoundsChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IRichEditBox3>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox3::remove_CandidateWindowBoundsChanged, CandidateWindowBoundsChanged(value));
}

template <typename D> void impl_IRichEditBox3<D>::CandidateWindowBoundsChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichEditBox3)->remove_CandidateWindowBoundsChanged(token));
}

template <typename D> event_token impl_IRichEditBox3<D>::TextChanging(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IRichEditBox3)->add_TextChanging(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox3> impl_IRichEditBox3<D>::TextChanging(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IRichEditBox3>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox3::remove_TextChanging, TextChanging(value));
}

template <typename D> void impl_IRichEditBox3<D>::TextChanging(event_token token) const
{
    check_hresult(WINRT_SHIM(IRichEditBox3)->remove_TextChanging(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics3<D>::DesiredCandidateWindowAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics3)->get_DesiredCandidateWindowAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics3<D>::TextReadingOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics3)->get_TextReadingOrderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> impl_IRichEditBox4<D>::GetLinguisticAlternativesAsync() const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> returnValue;
    check_hresult(WINRT_SHIM(IRichEditBox4)->abi_GetLinguisticAlternativesAsync(put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::RichEditClipboardFormat impl_IRichEditBox4<D>::ClipboardCopyFormat() const
{
    Windows::UI::Xaml::Controls::RichEditClipboardFormat value {};
    check_hresult(WINRT_SHIM(IRichEditBox4)->get_ClipboardCopyFormat(&value));
    return value;
}

template <typename D> void impl_IRichEditBox4<D>::ClipboardCopyFormat(Windows::UI::Xaml::Controls::RichEditClipboardFormat value) const
{
    check_hresult(WINRT_SHIM(IRichEditBox4)->put_ClipboardCopyFormat(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics4<D>::ClipboardCopyFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRichEditBoxStatics4)->get_ClipboardCopyFormatProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ISemanticZoomInformation impl_ISemanticZoom<D>::ZoomedInView() const
{
    Windows::UI::Xaml::Controls::ISemanticZoomInformation value;
    check_hresult(WINRT_SHIM(ISemanticZoom)->get_ZoomedInView(put_abi(value)));
    return value;
}

template <typename D> void impl_ISemanticZoom<D>::ZoomedInView(const Windows::UI::Xaml::Controls::ISemanticZoomInformation & value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoom)->put_ZoomedInView(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::ISemanticZoomInformation impl_ISemanticZoom<D>::ZoomedOutView() const
{
    Windows::UI::Xaml::Controls::ISemanticZoomInformation value;
    check_hresult(WINRT_SHIM(ISemanticZoom)->get_ZoomedOutView(put_abi(value)));
    return value;
}

template <typename D> void impl_ISemanticZoom<D>::ZoomedOutView(const Windows::UI::Xaml::Controls::ISemanticZoomInformation & value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoom)->put_ZoomedOutView(get_abi(value)));
}

template <typename D> bool impl_ISemanticZoom<D>::IsZoomedInViewActive() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISemanticZoom)->get_IsZoomedInViewActive(&value));
    return value;
}

template <typename D> void impl_ISemanticZoom<D>::IsZoomedInViewActive(bool value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoom)->put_IsZoomedInViewActive(value));
}

template <typename D> bool impl_ISemanticZoom<D>::CanChangeViews() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISemanticZoom)->get_CanChangeViews(&value));
    return value;
}

template <typename D> void impl_ISemanticZoom<D>::CanChangeViews(bool value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoom)->put_CanChangeViews(value));
}

template <typename D> event_token impl_ISemanticZoom<D>::ViewChangeStarted(const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISemanticZoom)->add_ViewChangeStarted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISemanticZoom> impl_ISemanticZoom<D>::ViewChangeStarted(auto_revoke_t, const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, ISemanticZoom>(this, &ABI::Windows::UI::Xaml::Controls::ISemanticZoom::remove_ViewChangeStarted, ViewChangeStarted(value));
}

template <typename D> void impl_ISemanticZoom<D>::ViewChangeStarted(event_token token) const
{
    check_hresult(WINRT_SHIM(ISemanticZoom)->remove_ViewChangeStarted(token));
}

template <typename D> event_token impl_ISemanticZoom<D>::ViewChangeCompleted(const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISemanticZoom)->add_ViewChangeCompleted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISemanticZoom> impl_ISemanticZoom<D>::ViewChangeCompleted(auto_revoke_t, const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, ISemanticZoom>(this, &ABI::Windows::UI::Xaml::Controls::ISemanticZoom::remove_ViewChangeCompleted, ViewChangeCompleted(value));
}

template <typename D> void impl_ISemanticZoom<D>::ViewChangeCompleted(event_token token) const
{
    check_hresult(WINRT_SHIM(ISemanticZoom)->remove_ViewChangeCompleted(token));
}

template <typename D> void impl_ISemanticZoom<D>::ToggleActiveView() const
{
    check_hresult(WINRT_SHIM(ISemanticZoom)->abi_ToggleActiveView());
}

template <typename D> bool impl_ISemanticZoom<D>::IsZoomOutButtonEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISemanticZoom)->get_IsZoomOutButtonEnabled(&value));
    return value;
}

template <typename D> void impl_ISemanticZoom<D>::IsZoomOutButtonEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ISemanticZoom)->put_IsZoomOutButtonEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISemanticZoomStatics<D>::ZoomedInViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISemanticZoomStatics)->get_ZoomedInViewProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISemanticZoomStatics<D>::ZoomedOutViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISemanticZoomStatics)->get_ZoomedOutViewProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISemanticZoomStatics<D>::IsZoomedInViewActiveProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISemanticZoomStatics)->get_IsZoomedInViewActiveProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISemanticZoomStatics<D>::CanChangeViewsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISemanticZoomStatics)->get_CanChangeViewsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISemanticZoomStatics<D>::IsZoomOutButtonEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISemanticZoomStatics)->get_IsZoomOutButtonEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IStackPanel<D>::AreScrollSnapPointsRegular() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IStackPanel)->get_AreScrollSnapPointsRegular(&value));
    return value;
}

template <typename D> void impl_IStackPanel<D>::AreScrollSnapPointsRegular(bool value) const
{
    check_hresult(WINRT_SHIM(IStackPanel)->put_AreScrollSnapPointsRegular(value));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IStackPanel<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(WINRT_SHIM(IStackPanel)->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IStackPanel<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(WINRT_SHIM(IStackPanel)->put_Orientation(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics<D>::AreScrollSnapPointsRegularProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IStackPanelStatics)->get_AreScrollSnapPointsRegularProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IStackPanelStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::StackPanel impl_IStackPanelFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::StackPanel instance { nullptr };
    check_hresult(WINRT_SHIM(IStackPanelFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IStackPanel2<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IStackPanel2)->get_BorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_IStackPanel2<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IStackPanel2)->put_BorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IStackPanel2<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IStackPanel2)->get_BorderThickness(put_abi(value)));
    return value;
}

template <typename D> void impl_IStackPanel2<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IStackPanel2)->put_BorderThickness(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius impl_IStackPanel2<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value {};
    check_hresult(WINRT_SHIM(IStackPanel2)->get_CornerRadius(put_abi(value)));
    return value;
}

template <typename D> void impl_IStackPanel2<D>::CornerRadius(const Windows::UI::Xaml::CornerRadius & value) const
{
    check_hresult(WINRT_SHIM(IStackPanel2)->put_CornerRadius(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IStackPanel2<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IStackPanel2)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void impl_IStackPanel2<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IStackPanel2)->put_Padding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics2<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IStackPanelStatics2)->get_BorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics2<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IStackPanelStatics2)->get_BorderThicknessProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics2<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IStackPanelStatics2)->get_CornerRadiusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics2<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IStackPanelStatics2)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> hstring impl_ITextBox<D>::Text() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ITextBox)->get_Text(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBox<D>::Text(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_Text(get_abi(value)));
}

template <typename D> hstring impl_ITextBox<D>::SelectedText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ITextBox)->get_SelectedText(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBox<D>::SelectedText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_SelectedText(get_abi(value)));
}

template <typename D> int32_t impl_ITextBox<D>::SelectionLength() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextBox)->get_SelectionLength(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::SelectionLength(int32_t value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_SelectionLength(value));
}

template <typename D> int32_t impl_ITextBox<D>::SelectionStart() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextBox)->get_SelectionStart(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::SelectionStart(int32_t value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_SelectionStart(value));
}

template <typename D> int32_t impl_ITextBox<D>::MaxLength() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITextBox)->get_MaxLength(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::MaxLength(int32_t value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_MaxLength(value));
}

template <typename D> bool impl_ITextBox<D>::IsReadOnly() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ITextBox)->get_IsReadOnly(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::IsReadOnly(bool value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_IsReadOnly(value));
}

template <typename D> bool impl_ITextBox<D>::AcceptsReturn() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ITextBox)->get_AcceptsReturn(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::AcceptsReturn(bool value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_AcceptsReturn(value));
}

template <typename D> Windows::UI::Xaml::TextAlignment impl_ITextBox<D>::TextAlignment() const
{
    Windows::UI::Xaml::TextAlignment value {};
    check_hresult(WINRT_SHIM(ITextBox)->get_TextAlignment(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::TextAlignment(Windows::UI::Xaml::TextAlignment value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_TextAlignment(value));
}

template <typename D> Windows::UI::Xaml::TextWrapping impl_ITextBox<D>::TextWrapping() const
{
    Windows::UI::Xaml::TextWrapping value {};
    check_hresult(WINRT_SHIM(ITextBox)->get_TextWrapping(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::TextWrapping(Windows::UI::Xaml::TextWrapping value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_TextWrapping(value));
}

template <typename D> bool impl_ITextBox<D>::IsSpellCheckEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ITextBox)->get_IsSpellCheckEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::IsSpellCheckEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_IsSpellCheckEnabled(value));
}

template <typename D> bool impl_ITextBox<D>::IsTextPredictionEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ITextBox)->get_IsTextPredictionEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::IsTextPredictionEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_IsTextPredictionEnabled(value));
}

template <typename D> Windows::UI::Xaml::Input::InputScope impl_ITextBox<D>::InputScope() const
{
    Windows::UI::Xaml::Input::InputScope value { nullptr };
    check_hresult(WINRT_SHIM(ITextBox)->get_InputScope(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBox<D>::InputScope(const Windows::UI::Xaml::Input::InputScope & value) const
{
    check_hresult(WINRT_SHIM(ITextBox)->put_InputScope(get_abi(value)));
}

template <typename D> event_token impl_ITextBox<D>::TextChanged(const Windows::UI::Xaml::Controls::TextChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBox)->add_TextChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox> impl_ITextBox<D>::TextChanged(auto_revoke_t, const Windows::UI::Xaml::Controls::TextChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBox>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox::remove_TextChanged, TextChanged(value));
}

template <typename D> void impl_ITextBox<D>::TextChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBox)->remove_TextChanged(token));
}

template <typename D> event_token impl_ITextBox<D>::SelectionChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBox)->add_SelectionChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox> impl_ITextBox<D>::SelectionChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBox>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox::remove_SelectionChanged, SelectionChanged(value));
}

template <typename D> void impl_ITextBox<D>::SelectionChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBox)->remove_SelectionChanged(token));
}

template <typename D> event_token impl_ITextBox<D>::ContextMenuOpening(const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBox)->add_ContextMenuOpening(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox> impl_ITextBox<D>::ContextMenuOpening(auto_revoke_t, const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBox>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox::remove_ContextMenuOpening, ContextMenuOpening(value));
}

template <typename D> void impl_ITextBox<D>::ContextMenuOpening(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBox)->remove_ContextMenuOpening(token));
}

template <typename D> void impl_ITextBox<D>::Select(int32_t start, int32_t length) const
{
    check_hresult(WINRT_SHIM(ITextBox)->abi_Select(start, length));
}

template <typename D> void impl_ITextBox<D>::SelectAll() const
{
    check_hresult(WINRT_SHIM(ITextBox)->abi_SelectAll());
}

template <typename D> Windows::Foundation::Rect impl_ITextBox<D>::GetRectFromCharacterIndex(int32_t charIndex, bool trailingEdge) const
{
    Windows::Foundation::Rect returnValue {};
    check_hresult(WINRT_SHIM(ITextBox)->abi_GetRectFromCharacterIndex(charIndex, trailingEdge, put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics)->get_TextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::MaxLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics)->get_MaxLengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::IsReadOnlyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics)->get_IsReadOnlyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::AcceptsReturnProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics)->get_AcceptsReturnProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::TextAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics)->get_TextAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::TextWrappingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics)->get_TextWrappingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::IsSpellCheckEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics)->get_IsSpellCheckEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::IsTextPredictionEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics)->get_IsTextPredictionEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::InputScopeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics)->get_InputScopeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::TextBox impl_ITextBoxFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::TextBox instance { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IInspectable impl_ITextBox2<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(ITextBox2)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBox2<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(ITextBox2)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_ITextBox2<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(ITextBox2)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBox2<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(ITextBox2)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> hstring impl_ITextBox2<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ITextBox2)->get_PlaceholderText(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBox2<D>::PlaceholderText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ITextBox2)->put_PlaceholderText(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::SolidColorBrush impl_ITextBox2<D>::SelectionHighlightColor() const
{
    Windows::UI::Xaml::Media::SolidColorBrush value { nullptr };
    check_hresult(WINRT_SHIM(ITextBox2)->get_SelectionHighlightColor(put_abi(value)));
    return value;
}

template <typename D> void impl_ITextBox2<D>::SelectionHighlightColor(const Windows::UI::Xaml::Media::SolidColorBrush & value) const
{
    check_hresult(WINRT_SHIM(ITextBox2)->put_SelectionHighlightColor(get_abi(value)));
}

template <typename D> bool impl_ITextBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ITextBox2)->get_PreventKeyboardDisplayOnProgrammaticFocus(&value));
    return value;
}

template <typename D> void impl_ITextBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus(bool value) const
{
    check_hresult(WINRT_SHIM(ITextBox2)->put_PreventKeyboardDisplayOnProgrammaticFocus(value));
}

template <typename D> bool impl_ITextBox2<D>::IsColorFontEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ITextBox2)->get_IsColorFontEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBox2<D>::IsColorFontEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ITextBox2)->put_IsColorFontEnabled(value));
}

template <typename D> event_token impl_ITextBox2<D>::Paste(const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBox2)->add_Paste(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox2> impl_ITextBox2<D>::Paste(auto_revoke_t, const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBox2>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox2::remove_Paste, Paste(value));
}

template <typename D> void impl_ITextBox2<D>::Paste(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBox2)->remove_Paste(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics2)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics2)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics2)->get_PlaceholderTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::SelectionHighlightColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics2)->get_SelectionHighlightColorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::PreventKeyboardDisplayOnProgrammaticFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics2)->get_PreventKeyboardDisplayOnProgrammaticFocusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::IsColorFontEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics2)->get_IsColorFontEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> event_token impl_ITextBox3<D>::TextCompositionStarted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBox3)->add_TextCompositionStarted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox3> impl_ITextBox3<D>::TextCompositionStarted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITextBox3>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox3::remove_TextCompositionStarted, TextCompositionStarted(value));
}

template <typename D> void impl_ITextBox3<D>::TextCompositionStarted(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBox3)->remove_TextCompositionStarted(token));
}

template <typename D> event_token impl_ITextBox3<D>::TextCompositionChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBox3)->add_TextCompositionChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox3> impl_ITextBox3<D>::TextCompositionChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITextBox3>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox3::remove_TextCompositionChanged, TextCompositionChanged(value));
}

template <typename D> void impl_ITextBox3<D>::TextCompositionChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBox3)->remove_TextCompositionChanged(token));
}

template <typename D> event_token impl_ITextBox3<D>::TextCompositionEnded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBox3)->add_TextCompositionEnded(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox3> impl_ITextBox3<D>::TextCompositionEnded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITextBox3>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox3::remove_TextCompositionEnded, TextCompositionEnded(value));
}

template <typename D> void impl_ITextBox3<D>::TextCompositionEnded(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBox3)->remove_TextCompositionEnded(token));
}

template <typename D> Windows::UI::Xaml::TextReadingOrder impl_ITextBox3<D>::TextReadingOrder() const
{
    Windows::UI::Xaml::TextReadingOrder value {};
    check_hresult(WINRT_SHIM(ITextBox3)->get_TextReadingOrder(&value));
    return value;
}

template <typename D> void impl_ITextBox3<D>::TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const
{
    check_hresult(WINRT_SHIM(ITextBox3)->put_TextReadingOrder(value));
}

template <typename D> Windows::UI::Xaml::Controls::CandidateWindowAlignment impl_ITextBox3<D>::DesiredCandidateWindowAlignment() const
{
    Windows::UI::Xaml::Controls::CandidateWindowAlignment value {};
    check_hresult(WINRT_SHIM(ITextBox3)->get_DesiredCandidateWindowAlignment(&value));
    return value;
}

template <typename D> void impl_ITextBox3<D>::DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment value) const
{
    check_hresult(WINRT_SHIM(ITextBox3)->put_DesiredCandidateWindowAlignment(value));
}

template <typename D> event_token impl_ITextBox3<D>::CandidateWindowBoundsChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBox3)->add_CandidateWindowBoundsChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox3> impl_ITextBox3<D>::CandidateWindowBoundsChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITextBox3>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox3::remove_CandidateWindowBoundsChanged, CandidateWindowBoundsChanged(value));
}

template <typename D> void impl_ITextBox3<D>::CandidateWindowBoundsChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBox3)->remove_CandidateWindowBoundsChanged(token));
}

template <typename D> event_token impl_ITextBox3<D>::TextChanging(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITextBox3)->add_TextChanging(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox3> impl_ITextBox3<D>::TextChanging(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITextBox3>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox3::remove_TextChanging, TextChanging(value));
}

template <typename D> void impl_ITextBox3<D>::TextChanging(event_token token) const
{
    check_hresult(WINRT_SHIM(ITextBox3)->remove_TextChanging(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics3<D>::DesiredCandidateWindowAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics3)->get_DesiredCandidateWindowAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics3<D>::TextReadingOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITextBoxStatics3)->get_TextReadingOrderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> impl_ITextBox4<D>::GetLinguisticAlternativesAsync() const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> returnValue;
    check_hresult(WINRT_SHIM(ITextBox4)->abi_GetLinguisticAlternativesAsync(put_abi(returnValue)));
    return returnValue;
}

template <typename D> bool impl_IToggleSwitch<D>::IsOn() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IToggleSwitch)->get_IsOn(&value));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::IsOn(bool value) const
{
    check_hresult(WINRT_SHIM(IToggleSwitch)->put_IsOn(value));
}

template <typename D> Windows::Foundation::IInspectable impl_IToggleSwitch<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IToggleSwitch)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IToggleSwitch)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IToggleSwitch<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitch)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IToggleSwitch)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable impl_IToggleSwitch<D>::OnContent() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IToggleSwitch)->get_OnContent(put_abi(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::OnContent(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IToggleSwitch)->put_OnContent(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IToggleSwitch<D>::OnContentTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitch)->get_OnContentTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::OnContentTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IToggleSwitch)->put_OnContentTemplate(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable impl_IToggleSwitch<D>::OffContent() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IToggleSwitch)->get_OffContent(put_abi(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::OffContent(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IToggleSwitch)->put_OffContent(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IToggleSwitch<D>::OffContentTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitch)->get_OffContentTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::OffContentTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IToggleSwitch)->put_OffContentTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings impl_IToggleSwitch<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitch)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IToggleSwitch<D>::Toggled(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IToggleSwitch)->add_Toggled(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IToggleSwitch> impl_IToggleSwitch<D>::Toggled(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IToggleSwitch>(this, &ABI::Windows::UI::Xaml::Controls::IToggleSwitch::remove_Toggled, Toggled(value));
}

template <typename D> void impl_IToggleSwitch<D>::Toggled(event_token token) const
{
    check_hresult(WINRT_SHIM(IToggleSwitch)->remove_Toggled(token));
}

template <typename D> void impl_IToggleSwitchOverrides<D>::OnToggled() const
{
    check_hresult(WINRT_SHIM(IToggleSwitchOverrides)->abi_OnToggled());
}

template <typename D> void impl_IToggleSwitchOverrides<D>::OnOnContentChanged(const Windows::Foundation::IInspectable & oldContent, const Windows::Foundation::IInspectable & newContent) const
{
    check_hresult(WINRT_SHIM(IToggleSwitchOverrides)->abi_OnOnContentChanged(get_abi(oldContent), get_abi(newContent)));
}

template <typename D> void impl_IToggleSwitchOverrides<D>::OnOffContentChanged(const Windows::Foundation::IInspectable & oldContent, const Windows::Foundation::IInspectable & newContent) const
{
    check_hresult(WINRT_SHIM(IToggleSwitchOverrides)->abi_OnOffContentChanged(get_abi(oldContent), get_abi(newContent)));
}

template <typename D> void impl_IToggleSwitchOverrides<D>::OnHeaderChanged(const Windows::Foundation::IInspectable & oldContent, const Windows::Foundation::IInspectable & newContent) const
{
    check_hresult(WINRT_SHIM(IToggleSwitchOverrides)->abi_OnHeaderChanged(get_abi(oldContent), get_abi(newContent)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::IsOnProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitchStatics)->get_IsOnProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitchStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitchStatics)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::OnContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitchStatics)->get_OnContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::OnContentTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitchStatics)->get_OnContentTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::OffContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitchStatics)->get_OffContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::OffContentTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToggleSwitchStatics)->get_OffContentTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IUserControl<D>::Content() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IUserControl)->get_Content(put_abi(value)));
    return value;
}

template <typename D> void impl_IUserControl<D>::Content(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IUserControl)->put_Content(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IUserControlStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IUserControlStatics)->get_ContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::UserControl impl_IUserControlFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::UserControl instance { nullptr };
    check_hresult(WINRT_SHIM(IUserControlFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> double impl_IVariableSizedWrapGrid<D>::ItemHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->get_ItemHeight(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::ItemHeight(double value) const
{
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->put_ItemHeight(value));
}

template <typename D> double impl_IVariableSizedWrapGrid<D>::ItemWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->get_ItemWidth(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::ItemWidth(double value) const
{
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->put_ItemWidth(value));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IVariableSizedWrapGrid<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->put_Orientation(value));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_IVariableSizedWrapGrid<D>::HorizontalChildrenAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->get_HorizontalChildrenAlignment(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->put_HorizontalChildrenAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_IVariableSizedWrapGrid<D>::VerticalChildrenAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->get_VerticalChildrenAlignment(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->put_VerticalChildrenAlignment(value));
}

template <typename D> int32_t impl_IVariableSizedWrapGrid<D>::MaximumRowsOrColumns() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->get_MaximumRowsOrColumns(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::MaximumRowsOrColumns(int32_t value) const
{
    check_hresult(WINRT_SHIM(IVariableSizedWrapGrid)->put_MaximumRowsOrColumns(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::ItemHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->get_ItemHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::ItemWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->get_ItemWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::HorizontalChildrenAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->get_HorizontalChildrenAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::VerticalChildrenAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->get_VerticalChildrenAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::MaximumRowsOrColumnsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->get_MaximumRowsOrColumnsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::RowSpanProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->get_RowSpanProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_IVariableSizedWrapGridStatics<D>::GetRowSpan(const Windows::UI::Xaml::UIElement & element) const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->abi_GetRowSpan(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGridStatics<D>::SetRowSpan(const Windows::UI::Xaml::UIElement & element, int32_t value) const
{
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->abi_SetRowSpan(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::ColumnSpanProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->get_ColumnSpanProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_IVariableSizedWrapGridStatics<D>::GetColumnSpan(const Windows::UI::Xaml::UIElement & element) const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->abi_GetColumnSpan(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGridStatics<D>::SetColumnSpan(const Windows::UI::Xaml::UIElement & element, int32_t value) const
{
    check_hresult(WINRT_SHIM(IVariableSizedWrapGridStatics)->abi_SetColumnSpan(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::Controls::ItemContainerGenerator impl_IVirtualizingPanel<D>::ItemContainerGenerator() const
{
    Windows::UI::Xaml::Controls::ItemContainerGenerator value { nullptr };
    check_hresult(WINRT_SHIM(IVirtualizingPanel)->get_ItemContainerGenerator(put_abi(value)));
    return value;
}

template <typename D> void impl_IVirtualizingPanelOverrides<D>::OnItemsChanged(const Windows::Foundation::IInspectable & sender, const Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs & args) const
{
    check_hresult(WINRT_SHIM(IVirtualizingPanelOverrides)->abi_OnItemsChanged(get_abi(sender), get_abi(args)));
}

template <typename D> void impl_IVirtualizingPanelOverrides<D>::OnClearChildren() const
{
    check_hresult(WINRT_SHIM(IVirtualizingPanelOverrides)->abi_OnClearChildren());
}

template <typename D> void impl_IVirtualizingPanelOverrides<D>::BringIndexIntoView(int32_t index) const
{
    check_hresult(WINRT_SHIM(IVirtualizingPanelOverrides)->abi_BringIndexIntoView(index));
}

template <typename D> void impl_IVirtualizingPanelProtected<D>::AddInternalChild(const Windows::UI::Xaml::UIElement & child) const
{
    check_hresult(WINRT_SHIM(IVirtualizingPanelProtected)->abi_AddInternalChild(get_abi(child)));
}

template <typename D> void impl_IVirtualizingPanelProtected<D>::InsertInternalChild(int32_t index, const Windows::UI::Xaml::UIElement & child) const
{
    check_hresult(WINRT_SHIM(IVirtualizingPanelProtected)->abi_InsertInternalChild(index, get_abi(child)));
}

template <typename D> void impl_IVirtualizingPanelProtected<D>::RemoveInternalChildRange(int32_t index, int32_t range) const
{
    check_hresult(WINRT_SHIM(IVirtualizingPanelProtected)->abi_RemoveInternalChildRange(index, range));
}

template <typename D> Windows::UI::Xaml::Controls::GroupItem impl_IGroupItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GroupItem instance { nullptr };
    check_hresult(WINRT_SHIM(IGroupItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_IProgressBar<D>::IsIndeterminate() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IProgressBar)->get_IsIndeterminate(&value));
    return value;
}

template <typename D> void impl_IProgressBar<D>::IsIndeterminate(bool value) const
{
    check_hresult(WINRT_SHIM(IProgressBar)->put_IsIndeterminate(value));
}

template <typename D> bool impl_IProgressBar<D>::ShowError() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IProgressBar)->get_ShowError(&value));
    return value;
}

template <typename D> void impl_IProgressBar<D>::ShowError(bool value) const
{
    check_hresult(WINRT_SHIM(IProgressBar)->put_ShowError(value));
}

template <typename D> bool impl_IProgressBar<D>::ShowPaused() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IProgressBar)->get_ShowPaused(&value));
    return value;
}

template <typename D> void impl_IProgressBar<D>::ShowPaused(bool value) const
{
    check_hresult(WINRT_SHIM(IProgressBar)->put_ShowPaused(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ProgressBarTemplateSettings impl_IProgressBar<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ProgressBarTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(IProgressBar)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IProgressBarStatics<D>::IsIndeterminateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IProgressBarStatics)->get_IsIndeterminateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IProgressBarStatics<D>::ShowErrorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IProgressBarStatics)->get_ShowErrorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IProgressBarStatics<D>::ShowPausedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IProgressBarStatics)->get_ShowPausedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ProgressBar impl_IProgressBarFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ProgressBar instance { nullptr };
    check_hresult(WINRT_SHIM(IProgressBarFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> hstring impl_ISettingsFlyout<D>::Title() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISettingsFlyout)->get_Title(put_abi(value)));
    return value;
}

template <typename D> void impl_ISettingsFlyout<D>::Title(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ISettingsFlyout)->put_Title(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ISettingsFlyout<D>::HeaderBackground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ISettingsFlyout)->get_HeaderBackground(put_abi(value)));
    return value;
}

template <typename D> void impl_ISettingsFlyout<D>::HeaderBackground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ISettingsFlyout)->put_HeaderBackground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ISettingsFlyout<D>::HeaderForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ISettingsFlyout)->get_HeaderForeground(put_abi(value)));
    return value;
}

template <typename D> void impl_ISettingsFlyout<D>::HeaderForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ISettingsFlyout)->put_HeaderForeground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource impl_ISettingsFlyout<D>::IconSource() const
{
    Windows::UI::Xaml::Media::ImageSource value { nullptr };
    check_hresult(WINRT_SHIM(ISettingsFlyout)->get_IconSource(put_abi(value)));
    return value;
}

template <typename D> void impl_ISettingsFlyout<D>::IconSource(const Windows::UI::Xaml::Media::ImageSource & value) const
{
    check_hresult(WINRT_SHIM(ISettingsFlyout)->put_IconSource(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SettingsFlyoutTemplateSettings impl_ISettingsFlyout<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::SettingsFlyoutTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(ISettingsFlyout)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> event_token impl_ISettingsFlyout<D>::BackClick(const Windows::UI::Xaml::Controls::BackClickEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISettingsFlyout)->add_BackClick(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISettingsFlyout> impl_ISettingsFlyout<D>::BackClick(auto_revoke_t, const Windows::UI::Xaml::Controls::BackClickEventHandler & value) const
{
    return impl::make_event_revoker<D, ISettingsFlyout>(this, &ABI::Windows::UI::Xaml::Controls::ISettingsFlyout::remove_BackClick, BackClick(value));
}

template <typename D> void impl_ISettingsFlyout<D>::BackClick(event_token token) const
{
    check_hresult(WINRT_SHIM(ISettingsFlyout)->remove_BackClick(token));
}

template <typename D> void impl_ISettingsFlyout<D>::Show() const
{
    check_hresult(WINRT_SHIM(ISettingsFlyout)->abi_Show());
}

template <typename D> void impl_ISettingsFlyout<D>::ShowIndependent() const
{
    check_hresult(WINRT_SHIM(ISettingsFlyout)->abi_ShowIndependent());
}

template <typename D> void impl_ISettingsFlyout<D>::Hide() const
{
    check_hresult(WINRT_SHIM(ISettingsFlyout)->abi_Hide());
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISettingsFlyoutStatics<D>::TitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISettingsFlyoutStatics)->get_TitleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISettingsFlyoutStatics<D>::HeaderBackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISettingsFlyoutStatics)->get_HeaderBackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISettingsFlyoutStatics<D>::HeaderForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISettingsFlyoutStatics)->get_HeaderForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISettingsFlyoutStatics<D>::IconSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISettingsFlyoutStatics)->get_IconSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SettingsFlyout impl_ISettingsFlyoutFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SettingsFlyout instance { nullptr };
    check_hresult(WINRT_SHIM(ISettingsFlyoutFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> double impl_ISlider<D>::IntermediateValue() const
{
    double value {};
    check_hresult(WINRT_SHIM(ISlider)->get_IntermediateValue(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::IntermediateValue(double value) const
{
    check_hresult(WINRT_SHIM(ISlider)->put_IntermediateValue(value));
}

template <typename D> double impl_ISlider<D>::StepFrequency() const
{
    double value {};
    check_hresult(WINRT_SHIM(ISlider)->get_StepFrequency(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::StepFrequency(double value) const
{
    check_hresult(WINRT_SHIM(ISlider)->put_StepFrequency(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo impl_ISlider<D>::SnapsTo() const
{
    Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo value {};
    check_hresult(WINRT_SHIM(ISlider)->get_SnapsTo(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::SnapsTo(Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo value) const
{
    check_hresult(WINRT_SHIM(ISlider)->put_SnapsTo(value));
}

template <typename D> double impl_ISlider<D>::TickFrequency() const
{
    double value {};
    check_hresult(WINRT_SHIM(ISlider)->get_TickFrequency(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::TickFrequency(double value) const
{
    check_hresult(WINRT_SHIM(ISlider)->put_TickFrequency(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::TickPlacement impl_ISlider<D>::TickPlacement() const
{
    Windows::UI::Xaml::Controls::Primitives::TickPlacement value {};
    check_hresult(WINRT_SHIM(ISlider)->get_TickPlacement(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::TickPlacement(Windows::UI::Xaml::Controls::Primitives::TickPlacement value) const
{
    check_hresult(WINRT_SHIM(ISlider)->put_TickPlacement(value));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_ISlider<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(WINRT_SHIM(ISlider)->get_Orientation(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(WINRT_SHIM(ISlider)->put_Orientation(value));
}

template <typename D> bool impl_ISlider<D>::IsDirectionReversed() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISlider)->get_IsDirectionReversed(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::IsDirectionReversed(bool value) const
{
    check_hresult(WINRT_SHIM(ISlider)->put_IsDirectionReversed(value));
}

template <typename D> bool impl_ISlider<D>::IsThumbToolTipEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISlider)->get_IsThumbToolTipEnabled(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::IsThumbToolTipEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ISlider)->put_IsThumbToolTipEnabled(value));
}

template <typename D> Windows::UI::Xaml::Data::IValueConverter impl_ISlider<D>::ThumbToolTipValueConverter() const
{
    Windows::UI::Xaml::Data::IValueConverter value;
    check_hresult(WINRT_SHIM(ISlider)->get_ThumbToolTipValueConverter(put_abi(value)));
    return value;
}

template <typename D> void impl_ISlider<D>::ThumbToolTipValueConverter(const Windows::UI::Xaml::Data::IValueConverter & value) const
{
    check_hresult(WINRT_SHIM(ISlider)->put_ThumbToolTipValueConverter(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::IntermediateValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics)->get_IntermediateValueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::StepFrequencyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics)->get_StepFrequencyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::SnapsToProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics)->get_SnapsToProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::TickFrequencyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics)->get_TickFrequencyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::TickPlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics)->get_TickPlacementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::IsDirectionReversedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics)->get_IsDirectionReversedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::IsThumbToolTipEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics)->get_IsThumbToolTipEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::ThumbToolTipValueConverterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics)->get_ThumbToolTipValueConverterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Slider impl_ISliderFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Slider instance { nullptr };
    check_hresult(WINRT_SHIM(ISliderFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IInspectable impl_ISlider2<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(ISlider2)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_ISlider2<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(ISlider2)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_ISlider2<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(ISlider2)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_ISlider2<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(ISlider2)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics2<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics2)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics2<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISliderStatics2)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> double impl_IToolTip<D>::HorizontalOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IToolTip)->get_HorizontalOffset(&value));
    return value;
}

template <typename D> void impl_IToolTip<D>::HorizontalOffset(double value) const
{
    check_hresult(WINRT_SHIM(IToolTip)->put_HorizontalOffset(value));
}

template <typename D> bool impl_IToolTip<D>::IsOpen() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IToolTip)->get_IsOpen(&value));
    return value;
}

template <typename D> void impl_IToolTip<D>::IsOpen(bool value) const
{
    check_hresult(WINRT_SHIM(IToolTip)->put_IsOpen(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::PlacementMode impl_IToolTip<D>::Placement() const
{
    Windows::UI::Xaml::Controls::Primitives::PlacementMode value {};
    check_hresult(WINRT_SHIM(IToolTip)->get_Placement(&value));
    return value;
}

template <typename D> void impl_IToolTip<D>::Placement(Windows::UI::Xaml::Controls::Primitives::PlacementMode value) const
{
    check_hresult(WINRT_SHIM(IToolTip)->put_Placement(value));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IToolTip<D>::PlacementTarget() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IToolTip)->get_PlacementTarget(put_abi(value)));
    return value;
}

template <typename D> void impl_IToolTip<D>::PlacementTarget(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IToolTip)->put_PlacementTarget(get_abi(value)));
}

template <typename D> double impl_IToolTip<D>::VerticalOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IToolTip)->get_VerticalOffset(&value));
    return value;
}

template <typename D> void impl_IToolTip<D>::VerticalOffset(double value) const
{
    check_hresult(WINRT_SHIM(IToolTip)->put_VerticalOffset(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings impl_IToolTip<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(IToolTip)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IToolTip<D>::Closed(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IToolTip)->add_Closed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IToolTip> impl_IToolTip<D>::Closed(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IToolTip>(this, &ABI::Windows::UI::Xaml::Controls::IToolTip::remove_Closed, Closed(value));
}

template <typename D> void impl_IToolTip<D>::Closed(event_token token) const
{
    check_hresult(WINRT_SHIM(IToolTip)->remove_Closed(token));
}

template <typename D> event_token impl_IToolTip<D>::Opened(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IToolTip)->add_Opened(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IToolTip> impl_IToolTip<D>::Opened(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IToolTip>(this, &ABI::Windows::UI::Xaml::Controls::IToolTip::remove_Opened, Opened(value));
}

template <typename D> void impl_IToolTip<D>::Opened(event_token token) const
{
    check_hresult(WINRT_SHIM(IToolTip)->remove_Opened(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipStatics<D>::HorizontalOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToolTipStatics)->get_HorizontalOffsetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipStatics<D>::IsOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToolTipStatics)->get_IsOpenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipStatics<D>::PlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToolTipStatics)->get_PlacementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipStatics<D>::PlacementTargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToolTipStatics)->get_PlacementTargetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipStatics<D>::VerticalOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToolTipStatics)->get_VerticalOffsetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ToolTip impl_IToolTipFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ToolTip instance { nullptr };
    check_hresult(WINRT_SHIM(IToolTipFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Button impl_IButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Button instance { nullptr };
    check_hresult(WINRT_SHIM(IButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::FlyoutBase impl_IButtonWithFlyout<D>::Flyout() const
{
    Windows::UI::Xaml::Controls::Primitives::FlyoutBase value { nullptr };
    check_hresult(WINRT_SHIM(IButtonWithFlyout)->get_Flyout(put_abi(value)));
    return value;
}

template <typename D> void impl_IButtonWithFlyout<D>::Flyout(const Windows::UI::Xaml::Controls::Primitives::FlyoutBase & value) const
{
    check_hresult(WINRT_SHIM(IButtonWithFlyout)->put_Flyout(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IButtonStaticsWithFlyout<D>::FlyoutProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IButtonStaticsWithFlyout)->get_FlyoutProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IComboBox<D>::IsDropDownOpen() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IComboBox)->get_IsDropDownOpen(&value));
    return value;
}

template <typename D> void impl_IComboBox<D>::IsDropDownOpen(bool value) const
{
    check_hresult(WINRT_SHIM(IComboBox)->put_IsDropDownOpen(value));
}

template <typename D> bool impl_IComboBox<D>::IsEditable() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IComboBox)->get_IsEditable(&value));
    return value;
}

template <typename D> bool impl_IComboBox<D>::IsSelectionBoxHighlighted() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IComboBox)->get_IsSelectionBoxHighlighted(&value));
    return value;
}

template <typename D> double impl_IComboBox<D>::MaxDropDownHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IComboBox)->get_MaxDropDownHeight(&value));
    return value;
}

template <typename D> void impl_IComboBox<D>::MaxDropDownHeight(double value) const
{
    check_hresult(WINRT_SHIM(IComboBox)->put_MaxDropDownHeight(value));
}

template <typename D> Windows::Foundation::IInspectable impl_IComboBox<D>::SelectionBoxItem() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IComboBox)->get_SelectionBoxItem(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IComboBox<D>::SelectionBoxItemTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IComboBox)->get_SelectionBoxItemTemplate(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings impl_IComboBox<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(IComboBox)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IComboBox<D>::DropDownClosed(const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IComboBox)->add_DropDownClosed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IComboBox> impl_IComboBox<D>::DropDownClosed(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IComboBox>(this, &ABI::Windows::UI::Xaml::Controls::IComboBox::remove_DropDownClosed, DropDownClosed(value));
}

template <typename D> void impl_IComboBox<D>::DropDownClosed(event_token token) const
{
    check_hresult(WINRT_SHIM(IComboBox)->remove_DropDownClosed(token));
}

template <typename D> event_token impl_IComboBox<D>::DropDownOpened(const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IComboBox)->add_DropDownOpened(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IComboBox> impl_IComboBox<D>::DropDownOpened(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IComboBox>(this, &ABI::Windows::UI::Xaml::Controls::IComboBox::remove_DropDownOpened, DropDownOpened(value));
}

template <typename D> void impl_IComboBox<D>::DropDownOpened(event_token token) const
{
    check_hresult(WINRT_SHIM(IComboBox)->remove_DropDownOpened(token));
}

template <typename D> void impl_IComboBoxOverrides<D>::OnDropDownClosed(const Windows::Foundation::IInspectable & e) const
{
    check_hresult(WINRT_SHIM(IComboBoxOverrides)->abi_OnDropDownClosed(get_abi(e)));
}

template <typename D> void impl_IComboBoxOverrides<D>::OnDropDownOpened(const Windows::Foundation::IInspectable & e) const
{
    check_hresult(WINRT_SHIM(IComboBoxOverrides)->abi_OnDropDownOpened(get_abi(e)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics<D>::IsDropDownOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IComboBoxStatics)->get_IsDropDownOpenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics<D>::MaxDropDownHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IComboBoxStatics)->get_MaxDropDownHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ComboBox impl_IComboBoxFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ComboBox instance { nullptr };
    check_hresult(WINRT_SHIM(IComboBoxFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IInspectable impl_IComboBox2<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IComboBox2)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IComboBox2<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IComboBox2)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IComboBox2<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IComboBox2)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IComboBox2<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IComboBox2)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> hstring impl_IComboBox2<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IComboBox2)->get_PlaceholderText(put_abi(value)));
    return value;
}

template <typename D> void impl_IComboBox2<D>::PlaceholderText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IComboBox2)->put_PlaceholderText(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics2<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IComboBoxStatics2)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics2<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IComboBoxStatics2)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics2<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IComboBoxStatics2)->get_PlaceholderTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_IComboBox3<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(WINRT_SHIM(IComboBox3)->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_IComboBox3<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(WINRT_SHIM(IComboBox3)->put_LightDismissOverlayMode(value));
}

template <typename D> bool impl_IComboBox3<D>::IsTextSearchEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IComboBox3)->get_IsTextSearchEnabled(&value));
    return value;
}

template <typename D> void impl_IComboBox3<D>::IsTextSearchEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IComboBox3)->put_IsTextSearchEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics3<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IComboBoxStatics3)->get_LightDismissOverlayModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics3<D>::IsTextSearchEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IComboBoxStatics3)->get_IsTextSearchEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ComboBoxItem impl_IComboBoxItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ComboBoxItem instance { nullptr };
    check_hresult(WINRT_SHIM(IComboBoxItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::FlipView impl_IFlipViewFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::FlipView instance { nullptr };
    check_hresult(WINRT_SHIM(IFlipViewFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_IFlipView2<D>::UseTouchAnimationsForAllNavigation() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IFlipView2)->get_UseTouchAnimationsForAllNavigation(&value));
    return value;
}

template <typename D> void impl_IFlipView2<D>::UseTouchAnimationsForAllNavigation(bool value) const
{
    check_hresult(WINRT_SHIM(IFlipView2)->put_UseTouchAnimationsForAllNavigation(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFlipViewStatics2<D>::UseTouchAnimationsForAllNavigationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFlipViewStatics2)->get_UseTouchAnimationsForAllNavigationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::FlipViewItem impl_IFlipViewItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::FlipViewItem instance { nullptr };
    check_hresult(WINRT_SHIM(IFlipViewItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Uri impl_IHyperlinkButton<D>::NavigateUri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IHyperlinkButton)->get_NavigateUri(put_abi(value)));
    return value;
}

template <typename D> void impl_IHyperlinkButton<D>::NavigateUri(const Windows::Foundation::Uri & value) const
{
    check_hresult(WINRT_SHIM(IHyperlinkButton)->put_NavigateUri(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHyperlinkButtonStatics<D>::NavigateUriProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHyperlinkButtonStatics)->get_NavigateUriProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::HyperlinkButton impl_IHyperlinkButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::HyperlinkButton instance { nullptr };
    check_hresult(WINRT_SHIM(IHyperlinkButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> impl_IListBox<D>::SelectedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value;
    check_hresult(WINRT_SHIM(IListBox)->get_SelectedItems(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SelectionMode impl_IListBox<D>::SelectionMode() const
{
    Windows::UI::Xaml::Controls::SelectionMode value {};
    check_hresult(WINRT_SHIM(IListBox)->get_SelectionMode(&value));
    return value;
}

template <typename D> void impl_IListBox<D>::SelectionMode(Windows::UI::Xaml::Controls::SelectionMode value) const
{
    check_hresult(WINRT_SHIM(IListBox)->put_SelectionMode(value));
}

template <typename D> void impl_IListBox<D>::ScrollIntoView(const Windows::Foundation::IInspectable & item) const
{
    check_hresult(WINRT_SHIM(IListBox)->abi_ScrollIntoView(get_abi(item)));
}

template <typename D> void impl_IListBox<D>::SelectAll() const
{
    check_hresult(WINRT_SHIM(IListBox)->abi_SelectAll());
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListBoxStatics<D>::SelectionModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListBoxStatics)->get_SelectionModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListBox impl_IListBoxFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListBox instance { nullptr };
    check_hresult(WINRT_SHIM(IListBoxFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_IListBox2<D>::SingleSelectionFollowsFocus() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IListBox2)->get_SingleSelectionFollowsFocus(&value));
    return value;
}

template <typename D> void impl_IListBox2<D>::SingleSelectionFollowsFocus(bool value) const
{
    check_hresult(WINRT_SHIM(IListBox2)->put_SingleSelectionFollowsFocus(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListBoxStatics2<D>::SingleSelectionFollowsFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListBoxStatics2)->get_SingleSelectionFollowsFocusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListBoxItem impl_IListBoxItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListBoxItem instance { nullptr };
    check_hresult(WINRT_SHIM(IListBoxItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> impl_IListViewBase<D>::SelectedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value;
    check_hresult(WINRT_SHIM(IListViewBase)->get_SelectedItems(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewSelectionMode impl_IListViewBase<D>::SelectionMode() const
{
    Windows::UI::Xaml::Controls::ListViewSelectionMode value {};
    check_hresult(WINRT_SHIM(IListViewBase)->get_SelectionMode(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::SelectionMode(Windows::UI::Xaml::Controls::ListViewSelectionMode value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_SelectionMode(value));
}

template <typename D> bool impl_IListViewBase<D>::IsSwipeEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IListViewBase)->get_IsSwipeEnabled(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::IsSwipeEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_IsSwipeEnabled(value));
}

template <typename D> bool impl_IListViewBase<D>::CanDragItems() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IListViewBase)->get_CanDragItems(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::CanDragItems(bool value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_CanDragItems(value));
}

template <typename D> bool impl_IListViewBase<D>::CanReorderItems() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IListViewBase)->get_CanReorderItems(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::CanReorderItems(bool value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_CanReorderItems(value));
}

template <typename D> bool impl_IListViewBase<D>::IsItemClickEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IListViewBase)->get_IsItemClickEnabled(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::IsItemClickEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_IsItemClickEnabled(value));
}

template <typename D> double impl_IListViewBase<D>::DataFetchSize() const
{
    double value {};
    check_hresult(WINRT_SHIM(IListViewBase)->get_DataFetchSize(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::DataFetchSize(double value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_DataFetchSize(value));
}

template <typename D> double impl_IListViewBase<D>::IncrementalLoadingThreshold() const
{
    double value {};
    check_hresult(WINRT_SHIM(IListViewBase)->get_IncrementalLoadingThreshold(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::IncrementalLoadingThreshold(double value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_IncrementalLoadingThreshold(value));
}

template <typename D> Windows::UI::Xaml::Controls::IncrementalLoadingTrigger impl_IListViewBase<D>::IncrementalLoadingTrigger() const
{
    Windows::UI::Xaml::Controls::IncrementalLoadingTrigger value {};
    check_hresult(WINRT_SHIM(IListViewBase)->get_IncrementalLoadingTrigger(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::IncrementalLoadingTrigger(Windows::UI::Xaml::Controls::IncrementalLoadingTrigger value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_IncrementalLoadingTrigger(value));
}

template <typename D> event_token impl_IListViewBase<D>::ItemClick(const Windows::UI::Xaml::Controls::ItemClickEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IListViewBase)->add_ItemClick(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase> impl_IListViewBase<D>::ItemClick(auto_revoke_t, const Windows::UI::Xaml::Controls::ItemClickEventHandler & value) const
{
    return impl::make_event_revoker<D, IListViewBase>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase::remove_ItemClick, ItemClick(value));
}

template <typename D> void impl_IListViewBase<D>::ItemClick(event_token token) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->remove_ItemClick(token));
}

template <typename D> event_token impl_IListViewBase<D>::DragItemsStarting(const Windows::UI::Xaml::Controls::DragItemsStartingEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IListViewBase)->add_DragItemsStarting(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase> impl_IListViewBase<D>::DragItemsStarting(auto_revoke_t, const Windows::UI::Xaml::Controls::DragItemsStartingEventHandler & value) const
{
    return impl::make_event_revoker<D, IListViewBase>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase::remove_DragItemsStarting, DragItemsStarting(value));
}

template <typename D> void impl_IListViewBase<D>::DragItemsStarting(event_token token) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->remove_DragItemsStarting(token));
}

template <typename D> void impl_IListViewBase<D>::ScrollIntoView(const Windows::Foundation::IInspectable & item) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->abi_ScrollIntoView(get_abi(item)));
}

template <typename D> void impl_IListViewBase<D>::SelectAll() const
{
    check_hresult(WINRT_SHIM(IListViewBase)->abi_SelectAll());
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::UI::Xaml::Data::LoadMoreItemsResult> impl_IListViewBase<D>::LoadMoreItemsAsync() const
{
    Windows::Foundation::IAsyncOperation<Windows::UI::Xaml::Data::LoadMoreItemsResult> returnValue;
    check_hresult(WINRT_SHIM(IListViewBase)->abi_LoadMoreItemsAsync(put_abi(returnValue)));
    return returnValue;
}

template <typename D> void impl_IListViewBase<D>::ScrollIntoView(const Windows::Foundation::IInspectable & item, Windows::UI::Xaml::Controls::ScrollIntoViewAlignment alignment) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->abi_ScrollIntoViewWithAlignment(get_abi(item), alignment));
}

template <typename D> Windows::Foundation::IInspectable impl_IListViewBase<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IListViewBase)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IListViewBase<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IListViewBase<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBase)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IListViewBase<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IListViewBase<D>::HeaderTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBase)->get_HeaderTransitions(put_abi(value)));
    return value;
}

template <typename D> void impl_IListViewBase<D>::HeaderTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(WINRT_SHIM(IListViewBase)->put_HeaderTransitions(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::SelectionModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_SelectionModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IsSwipeEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_IsSwipeEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::CanDragItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_CanDragItemsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::CanReorderItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_CanReorderItemsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IsItemClickEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_IsItemClickEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::DataFetchSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_DataFetchSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IncrementalLoadingThresholdProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_IncrementalLoadingThresholdProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IncrementalLoadingTriggerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_IncrementalLoadingTriggerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::SemanticZoomOwnerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_SemanticZoomOwnerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IsActiveViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_IsActiveViewProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IsZoomedInViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_IsZoomedInViewProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::HeaderTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics)->get_HeaderTransitionsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewBase impl_IListViewBaseFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListViewBase instance { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_IListViewBase2<D>::ShowsScrollingPlaceholders() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IListViewBase2)->get_ShowsScrollingPlaceholders(&value));
    return value;
}

template <typename D> void impl_IListViewBase2<D>::ShowsScrollingPlaceholders(bool value) const
{
    check_hresult(WINRT_SHIM(IListViewBase2)->put_ShowsScrollingPlaceholders(value));
}

template <typename D> event_token impl_IListViewBase2<D>::ContainerContentChanging(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IListViewBase2)->add_ContainerContentChanging(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase2> impl_IListViewBase2<D>::ContainerContentChanging(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IListViewBase2>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase2::remove_ContainerContentChanging, ContainerContentChanging(value));
}

template <typename D> void impl_IListViewBase2<D>::ContainerContentChanging(event_token token) const
{
    check_hresult(WINRT_SHIM(IListViewBase2)->remove_ContainerContentChanging(token));
}

template <typename D> void impl_IListViewBase2<D>::SetDesiredContainerUpdateDuration(const Windows::Foundation::TimeSpan & duration) const
{
    check_hresult(WINRT_SHIM(IListViewBase2)->abi_SetDesiredContainerUpdateDuration(get_abi(duration)));
}

template <typename D> Windows::Foundation::IInspectable impl_IListViewBase2<D>::Footer() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IListViewBase2)->get_Footer(put_abi(value)));
    return value;
}

template <typename D> void impl_IListViewBase2<D>::Footer(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IListViewBase2)->put_Footer(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IListViewBase2<D>::FooterTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBase2)->get_FooterTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IListViewBase2<D>::FooterTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IListViewBase2)->put_FooterTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IListViewBase2<D>::FooterTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBase2)->get_FooterTransitions(put_abi(value)));
    return value;
}

template <typename D> void impl_IListViewBase2<D>::FooterTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(WINRT_SHIM(IListViewBase2)->put_FooterTransitions(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics2<D>::ShowsScrollingPlaceholdersProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics2)->get_ShowsScrollingPlaceholdersProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics2<D>::FooterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics2)->get_FooterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics2<D>::FooterTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics2)->get_FooterTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics2<D>::FooterTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics2)->get_FooterTransitionsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewReorderMode impl_IListViewBase3<D>::ReorderMode() const
{
    Windows::UI::Xaml::Controls::ListViewReorderMode value {};
    check_hresult(WINRT_SHIM(IListViewBase3)->get_ReorderMode(&value));
    return value;
}

template <typename D> void impl_IListViewBase3<D>::ReorderMode(Windows::UI::Xaml::Controls::ListViewReorderMode value) const
{
    check_hresult(WINRT_SHIM(IListViewBase3)->put_ReorderMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics3<D>::ReorderModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics3)->get_ReorderModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Data::ItemIndexRange> impl_IListViewBase4<D>::SelectedRanges() const
{
    Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Data::ItemIndexRange> value;
    check_hresult(WINRT_SHIM(IListViewBase4)->get_SelectedRanges(put_abi(value)));
    return value;
}

template <typename D> bool impl_IListViewBase4<D>::IsMultiSelectCheckBoxEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IListViewBase4)->get_IsMultiSelectCheckBoxEnabled(&value));
    return value;
}

template <typename D> void impl_IListViewBase4<D>::IsMultiSelectCheckBoxEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IListViewBase4)->put_IsMultiSelectCheckBoxEnabled(value));
}

template <typename D> event_token impl_IListViewBase4<D>::DragItemsCompleted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IListViewBase4)->add_DragItemsCompleted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase4> impl_IListViewBase4<D>::DragItemsCompleted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IListViewBase4>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase4::remove_DragItemsCompleted, DragItemsCompleted(value));
}

template <typename D> void impl_IListViewBase4<D>::DragItemsCompleted(event_token token) const
{
    check_hresult(WINRT_SHIM(IListViewBase4)->remove_DragItemsCompleted(token));
}

template <typename D> event_token impl_IListViewBase4<D>::ChoosingItemContainer(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IListViewBase4)->add_ChoosingItemContainer(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase4> impl_IListViewBase4<D>::ChoosingItemContainer(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> & value) const
{
    return impl::make_event_revoker<D, IListViewBase4>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase4::remove_ChoosingItemContainer, ChoosingItemContainer(value));
}

template <typename D> void impl_IListViewBase4<D>::ChoosingItemContainer(event_token token) const
{
    check_hresult(WINRT_SHIM(IListViewBase4)->remove_ChoosingItemContainer(token));
}

template <typename D> event_token impl_IListViewBase4<D>::ChoosingGroupHeaderContainer(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IListViewBase4)->add_ChoosingGroupHeaderContainer(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase4> impl_IListViewBase4<D>::ChoosingGroupHeaderContainer(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> & value) const
{
    return impl::make_event_revoker<D, IListViewBase4>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase4::remove_ChoosingGroupHeaderContainer, ChoosingGroupHeaderContainer(value));
}

template <typename D> void impl_IListViewBase4<D>::ChoosingGroupHeaderContainer(event_token token) const
{
    check_hresult(WINRT_SHIM(IListViewBase4)->remove_ChoosingGroupHeaderContainer(token));
}

template <typename D> void impl_IListViewBase4<D>::SelectRange(const Windows::UI::Xaml::Data::ItemIndexRange & itemIndexRange) const
{
    check_hresult(WINRT_SHIM(IListViewBase4)->abi_SelectRange(get_abi(itemIndexRange)));
}

template <typename D> void impl_IListViewBase4<D>::DeselectRange(const Windows::UI::Xaml::Data::ItemIndexRange & itemIndexRange) const
{
    check_hresult(WINRT_SHIM(IListViewBase4)->abi_DeselectRange(get_abi(itemIndexRange)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics4<D>::IsMultiSelectCheckBoxEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics4)->get_IsMultiSelectCheckBoxEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IListViewBase5<D>::SingleSelectionFollowsFocus() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IListViewBase5)->get_SingleSelectionFollowsFocus(&value));
    return value;
}

template <typename D> void impl_IListViewBase5<D>::SingleSelectionFollowsFocus(bool value) const
{
    check_hresult(WINRT_SHIM(IListViewBase5)->put_SingleSelectionFollowsFocus(value));
}

template <typename D> bool impl_IListViewBase5<D>::IsDragSource() const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IListViewBase5)->abi_IsDragSource(&returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics5<D>::SingleSelectionFollowsFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListViewBaseStatics5)->get_SingleSelectionFollowsFocusProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IVirtualizingStackPanel<D>::AreScrollSnapPointsRegular() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IVirtualizingStackPanel)->get_AreScrollSnapPointsRegular(&value));
    return value;
}

template <typename D> void impl_IVirtualizingStackPanel<D>::AreScrollSnapPointsRegular(bool value) const
{
    check_hresult(WINRT_SHIM(IVirtualizingStackPanel)->put_AreScrollSnapPointsRegular(value));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IVirtualizingStackPanel<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(WINRT_SHIM(IVirtualizingStackPanel)->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IVirtualizingStackPanel<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(WINRT_SHIM(IVirtualizingStackPanel)->put_Orientation(value));
}

template <typename D> event_token impl_IVirtualizingStackPanel<D>::CleanUpVirtualizedItemEvent(const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IVirtualizingStackPanel)->add_CleanUpVirtualizedItemEvent(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IVirtualizingStackPanel> impl_IVirtualizingStackPanel<D>::CleanUpVirtualizedItemEvent(auto_revoke_t, const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler & value) const
{
    return impl::make_event_revoker<D, IVirtualizingStackPanel>(this, &ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanel::remove_CleanUpVirtualizedItemEvent, CleanUpVirtualizedItemEvent(value));
}

template <typename D> void impl_IVirtualizingStackPanel<D>::CleanUpVirtualizedItemEvent(event_token token) const
{
    check_hresult(WINRT_SHIM(IVirtualizingStackPanel)->remove_CleanUpVirtualizedItemEvent(token));
}

template <typename D> void impl_IVirtualizingStackPanelOverrides<D>::OnCleanUpVirtualizedItem(const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IVirtualizingStackPanelOverrides)->abi_OnCleanUpVirtualizedItem(get_abi(e)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVirtualizingStackPanelStatics<D>::AreScrollSnapPointsRegularProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVirtualizingStackPanelStatics)->get_AreScrollSnapPointsRegularProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVirtualizingStackPanelStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVirtualizingStackPanelStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVirtualizingStackPanelStatics<D>::VirtualizationModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVirtualizingStackPanelStatics)->get_VirtualizationModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::VirtualizationMode impl_IVirtualizingStackPanelStatics<D>::GetVirtualizationMode(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::VirtualizationMode value {};
    check_hresult(WINRT_SHIM(IVirtualizingStackPanelStatics)->abi_GetVirtualizationMode(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IVirtualizingStackPanelStatics<D>::SetVirtualizationMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::VirtualizationMode value) const
{
    check_hresult(WINRT_SHIM(IVirtualizingStackPanelStatics)->abi_SetVirtualizationMode(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVirtualizingStackPanelStatics<D>::IsVirtualizingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IVirtualizingStackPanelStatics)->get_IsVirtualizingProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IVirtualizingStackPanelStatics<D>::GetIsVirtualizing(const Windows::UI::Xaml::DependencyObject & o) const
{
    bool value {};
    check_hresult(WINRT_SHIM(IVirtualizingStackPanelStatics)->abi_GetIsVirtualizing(get_abi(o), &value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CheckBox impl_ICheckBoxFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CheckBox instance { nullptr };
    check_hresult(WINRT_SHIM(ICheckBoxFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> hstring impl_IRadioButton<D>::GroupName() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IRadioButton)->get_GroupName(put_abi(value)));
    return value;
}

template <typename D> void impl_IRadioButton<D>::GroupName(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IRadioButton)->put_GroupName(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRadioButtonStatics<D>::GroupNameProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IRadioButtonStatics)->get_GroupNameProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::RadioButton impl_IRadioButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::RadioButton instance { nullptr };
    check_hresult(WINRT_SHIM(IRadioButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_ICommandBarElement<D>::IsCompact() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICommandBarElement)->get_IsCompact(&value));
    return value;
}

template <typename D> void impl_ICommandBarElement<D>::IsCompact(bool value) const
{
    check_hresult(WINRT_SHIM(ICommandBarElement)->put_IsCompact(value));
}

template <typename D> bool impl_ICommandBarElement2<D>::IsInOverflow() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICommandBarElement2)->get_IsInOverflow(&value));
    return value;
}

template <typename D> int32_t impl_ICommandBarElement2<D>::DynamicOverflowOrder() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ICommandBarElement2)->get_DynamicOverflowOrder(&value));
    return value;
}

template <typename D> void impl_ICommandBarElement2<D>::DynamicOverflowOrder(int32_t value) const
{
    check_hresult(WINRT_SHIM(ICommandBarElement2)->put_DynamicOverflowOrder(value));
}

template <typename D> Windows::Foundation::IReference<Windows::Foundation::DateTime> impl_ICalendarDatePickerDateChangedEventArgs<D>::NewDate() const
{
    Windows::Foundation::IReference<Windows::Foundation::DateTime> value;
    check_hresult(WINRT_SHIM(ICalendarDatePickerDateChangedEventArgs)->get_NewDate(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IReference<Windows::Foundation::DateTime> impl_ICalendarDatePickerDateChangedEventArgs<D>::OldDate() const
{
    Windows::Foundation::IReference<Windows::Foundation::DateTime> value;
    check_hresult(WINRT_SHIM(ICalendarDatePickerDateChangedEventArgs)->get_OldDate(put_abi(value)));
    return value;
}

template <typename D> bool impl_ICalendarViewDayItemChangingEventArgs<D>::InRecycleQueue() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICalendarViewDayItemChangingEventArgs)->get_InRecycleQueue(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CalendarViewDayItem impl_ICalendarViewDayItemChangingEventArgs<D>::Item() const
{
    Windows::UI::Xaml::Controls::CalendarViewDayItem value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewDayItemChangingEventArgs)->get_Item(put_abi(value)));
    return value;
}

template <typename D> uint32_t impl_ICalendarViewDayItemChangingEventArgs<D>::Phase() const
{
    uint32_t value {};
    check_hresult(WINRT_SHIM(ICalendarViewDayItemChangingEventArgs)->get_Phase(&value));
    return value;
}

template <typename D> void impl_ICalendarViewDayItemChangingEventArgs<D>::RegisterUpdateCallback(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> & callback) const
{
    check_hresult(WINRT_SHIM(ICalendarViewDayItemChangingEventArgs)->abi_RegisterUpdateCallback(get_abi(callback)));
}

template <typename D> void impl_ICalendarViewDayItemChangingEventArgs<D>::RegisterUpdateCallback(uint32_t callbackPhase, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> & callback) const
{
    check_hresult(WINRT_SHIM(ICalendarViewDayItemChangingEventArgs)->abi_RegisterUpdateCallbackWithPhase(callbackPhase, get_abi(callback)));
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime> impl_ICalendarViewSelectedDatesChangedEventArgs<D>::AddedDates() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime> value;
    check_hresult(WINRT_SHIM(ICalendarViewSelectedDatesChangedEventArgs)->get_AddedDates(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime> impl_ICalendarViewSelectedDatesChangedEventArgs<D>::RemovedDates() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime> value;
    check_hresult(WINRT_SHIM(ICalendarViewSelectedDatesChangedEventArgs)->get_RemovedDates(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentDialogButtonClickDeferral<D>::Complete() const
{
    check_hresult(WINRT_SHIM(IContentDialogButtonClickDeferral)->abi_Complete());
}

template <typename D> bool impl_IContentDialogButtonClickEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IContentDialogButtonClickEventArgs)->get_Cancel(&value));
    return value;
}

template <typename D> void impl_IContentDialogButtonClickEventArgs<D>::Cancel(bool value) const
{
    check_hresult(WINRT_SHIM(IContentDialogButtonClickEventArgs)->put_Cancel(value));
}

template <typename D> Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral impl_IContentDialogButtonClickEventArgs<D>::GetDeferral() const
{
    Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral returnValue { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogButtonClickEventArgs)->abi_GetDeferral(put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::ContentDialogResult impl_IContentDialogClosedEventArgs<D>::Result() const
{
    Windows::UI::Xaml::Controls::ContentDialogResult value {};
    check_hresult(WINRT_SHIM(IContentDialogClosedEventArgs)->get_Result(&value));
    return value;
}

template <typename D> void impl_IContentDialogClosingDeferral<D>::Complete() const
{
    check_hresult(WINRT_SHIM(IContentDialogClosingDeferral)->abi_Complete());
}

template <typename D> Windows::UI::Xaml::Controls::ContentDialogResult impl_IContentDialogClosingEventArgs<D>::Result() const
{
    Windows::UI::Xaml::Controls::ContentDialogResult value {};
    check_hresult(WINRT_SHIM(IContentDialogClosingEventArgs)->get_Result(&value));
    return value;
}

template <typename D> bool impl_IContentDialogClosingEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IContentDialogClosingEventArgs)->get_Cancel(&value));
    return value;
}

template <typename D> void impl_IContentDialogClosingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(WINRT_SHIM(IContentDialogClosingEventArgs)->put_Cancel(value));
}

template <typename D> Windows::UI::Xaml::Controls::ContentDialogClosingDeferral impl_IContentDialogClosingEventArgs<D>::GetDeferral() const
{
    Windows::UI::Xaml::Controls::ContentDialogClosingDeferral returnValue { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogClosingEventArgs)->abi_GetDeferral(put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickerValueChangedEventArgs<D>::OldDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(IDatePickerValueChangedEventArgs)->get_OldDate(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickerValueChangedEventArgs<D>::NewDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(IDatePickerValueChangedEventArgs)->get_NewDate(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction impl_IDynamicOverflowItemsChangingEventArgs<D>::Action() const
{
    Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction value {};
    check_hresult(WINRT_SHIM(IDynamicOverflowItemsChangingEventArgs)->get_Action(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::HubSection impl_IHubSectionHeaderClickEventArgs<D>::Section() const
{
    Windows::UI::Xaml::Controls::HubSection value { nullptr };
    check_hresult(WINRT_SHIM(IHubSectionHeaderClickEventArgs)->get_Section(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IListViewPersistenceHelperStatics<D>::GetRelativeScrollPosition(const Windows::UI::Xaml::Controls::ListViewBase & listViewBase, const Windows::UI::Xaml::Controls::ListViewItemToKeyHandler & itemToKeyHandler) const
{
    hstring returnValue;
    check_hresult(WINRT_SHIM(IListViewPersistenceHelperStatics)->abi_GetRelativeScrollPosition(get_abi(listViewBase), get_abi(itemToKeyHandler), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::IAsyncAction impl_IListViewPersistenceHelperStatics<D>::SetRelativeScrollPositionAsync(const Windows::UI::Xaml::Controls::ListViewBase & listViewBase, hstring_view relativeScrollPosition, const Windows::UI::Xaml::Controls::ListViewKeyToItemHandler & keyToItemHandler) const
{
    Windows::Foundation::IAsyncAction returnValue;
    check_hresult(WINRT_SHIM(IListViewPersistenceHelperStatics)->abi_SetRelativeScrollPositionAsync(get_abi(listViewBase), get_abi(relativeScrollPosition), get_abi(keyToItemHandler), put_abi(returnValue)));
    return returnValue;
}

template <typename D> double impl_IScrollViewerView<D>::HorizontalOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollViewerView)->get_HorizontalOffset(&value));
    return value;
}

template <typename D> double impl_IScrollViewerView<D>::VerticalOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollViewerView)->get_VerticalOffset(&value));
    return value;
}

template <typename D> float impl_IScrollViewerView<D>::ZoomFactor() const
{
    float value {};
    check_hresult(WINRT_SHIM(IScrollViewerView)->get_ZoomFactor(&value));
    return value;
}

template <typename D> bool impl_IScrollViewerViewChangedEventArgs<D>::IsIntermediate() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewerViewChangedEventArgs)->get_IsIntermediate(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollViewerView impl_IScrollViewerViewChangingEventArgs<D>::NextView() const
{
    Windows::UI::Xaml::Controls::ScrollViewerView value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerViewChangingEventArgs)->get_NextView(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollViewerView impl_IScrollViewerViewChangingEventArgs<D>::FinalView() const
{
    Windows::UI::Xaml::Controls::ScrollViewerView value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerViewChangingEventArgs)->get_FinalView(put_abi(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerViewChangingEventArgs<D>::IsInertial() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewerViewChangingEventArgs)->get_IsInertial(&value));
    return value;
}

template <typename D> hstring impl_ISearchBoxQueryChangedEventArgs<D>::QueryText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISearchBoxQueryChangedEventArgs)->get_QueryText(put_abi(value)));
    return value;
}

template <typename D> hstring impl_ISearchBoxQueryChangedEventArgs<D>::Language() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISearchBoxQueryChangedEventArgs)->get_Language(put_abi(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::Search::SearchQueryLinguisticDetails impl_ISearchBoxQueryChangedEventArgs<D>::LinguisticDetails() const
{
    Windows::ApplicationModel::Search::SearchQueryLinguisticDetails value { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxQueryChangedEventArgs)->get_LinguisticDetails(put_abi(value)));
    return value;
}

template <typename D> hstring impl_ISearchBoxQuerySubmittedEventArgs<D>::QueryText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISearchBoxQuerySubmittedEventArgs)->get_QueryText(put_abi(value)));
    return value;
}

template <typename D> hstring impl_ISearchBoxQuerySubmittedEventArgs<D>::Language() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISearchBoxQuerySubmittedEventArgs)->get_Language(put_abi(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::Search::SearchQueryLinguisticDetails impl_ISearchBoxQuerySubmittedEventArgs<D>::LinguisticDetails() const
{
    Windows::ApplicationModel::Search::SearchQueryLinguisticDetails value { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxQuerySubmittedEventArgs)->get_LinguisticDetails(put_abi(value)));
    return value;
}

template <typename D> Windows::System::VirtualKeyModifiers impl_ISearchBoxQuerySubmittedEventArgs<D>::KeyModifiers() const
{
    Windows::System::VirtualKeyModifiers value {};
    check_hresult(WINRT_SHIM(ISearchBoxQuerySubmittedEventArgs)->get_KeyModifiers(&value));
    return value;
}

template <typename D> hstring impl_ISearchBoxResultSuggestionChosenEventArgs<D>::Tag() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISearchBoxResultSuggestionChosenEventArgs)->get_Tag(put_abi(value)));
    return value;
}

template <typename D> Windows::System::VirtualKeyModifiers impl_ISearchBoxResultSuggestionChosenEventArgs<D>::KeyModifiers() const
{
    Windows::System::VirtualKeyModifiers value {};
    check_hresult(WINRT_SHIM(ISearchBoxResultSuggestionChosenEventArgs)->get_KeyModifiers(&value));
    return value;
}

template <typename D> hstring impl_ISearchBoxSuggestionsRequestedEventArgs<D>::QueryText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISearchBoxSuggestionsRequestedEventArgs)->get_QueryText(put_abi(value)));
    return value;
}

template <typename D> hstring impl_ISearchBoxSuggestionsRequestedEventArgs<D>::Language() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISearchBoxSuggestionsRequestedEventArgs)->get_Language(put_abi(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::Search::SearchQueryLinguisticDetails impl_ISearchBoxSuggestionsRequestedEventArgs<D>::LinguisticDetails() const
{
    Windows::ApplicationModel::Search::SearchQueryLinguisticDetails value { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxSuggestionsRequestedEventArgs)->get_LinguisticDetails(put_abi(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::Search::SearchSuggestionsRequest impl_ISearchBoxSuggestionsRequestedEventArgs<D>::Request() const
{
    Windows::ApplicationModel::Search::SearchSuggestionsRequest value { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxSuggestionsRequestedEventArgs)->get_Request(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> impl_ISectionsInViewChangedEventArgs<D>::AddedSections() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> value;
    check_hresult(WINRT_SHIM(ISectionsInViewChangedEventArgs)->get_AddedSections(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> impl_ISectionsInViewChangedEventArgs<D>::RemovedSections() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> value;
    check_hresult(WINRT_SHIM(ISectionsInViewChangedEventArgs)->get_RemovedSections(put_abi(value)));
    return value;
}

template <typename D> bool impl_ISplitViewPaneClosingEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISplitViewPaneClosingEventArgs)->get_Cancel(&value));
    return value;
}

template <typename D> void impl_ISplitViewPaneClosingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(WINRT_SHIM(ISplitViewPaneClosingEventArgs)->put_Cancel(value));
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePickerValueChangedEventArgs<D>::OldTime() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(WINRT_SHIM(ITimePickerValueChangedEventArgs)->get_OldTime(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePickerValueChangedEventArgs<D>::NewTime() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(WINRT_SHIM(ITimePickerValueChangedEventArgs)->get_NewTime(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewContentLoadingEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewContentLoadingEventArgs)->get_Uri(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewDeferredPermissionRequest<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewDeferredPermissionRequest)->get_Uri(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewPermissionType impl_IWebViewDeferredPermissionRequest<D>::PermissionType() const
{
    Windows::UI::Xaml::Controls::WebViewPermissionType value {};
    check_hresult(WINRT_SHIM(IWebViewDeferredPermissionRequest)->get_PermissionType(&value));
    return value;
}

template <typename D> uint32_t impl_IWebViewDeferredPermissionRequest<D>::Id() const
{
    uint32_t value {};
    check_hresult(WINRT_SHIM(IWebViewDeferredPermissionRequest)->get_Id(&value));
    return value;
}

template <typename D> void impl_IWebViewDeferredPermissionRequest<D>::Allow() const
{
    check_hresult(WINRT_SHIM(IWebViewDeferredPermissionRequest)->abi_Allow());
}

template <typename D> void impl_IWebViewDeferredPermissionRequest<D>::Deny() const
{
    check_hresult(WINRT_SHIM(IWebViewDeferredPermissionRequest)->abi_Deny());
}

template <typename D> Windows::Foundation::Uri impl_IWebViewDOMContentLoadedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewDOMContentLoadedEventArgs)->get_Uri(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan impl_IWebViewLongRunningScriptDetectedEventArgs<D>::ExecutionTime() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(WINRT_SHIM(IWebViewLongRunningScriptDetectedEventArgs)->get_ExecutionTime(put_abi(value)));
    return value;
}

template <typename D> bool impl_IWebViewLongRunningScriptDetectedEventArgs<D>::StopPageScriptExecution() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IWebViewLongRunningScriptDetectedEventArgs)->get_StopPageScriptExecution(&value));
    return value;
}

template <typename D> void impl_IWebViewLongRunningScriptDetectedEventArgs<D>::StopPageScriptExecution(bool value) const
{
    check_hresult(WINRT_SHIM(IWebViewLongRunningScriptDetectedEventArgs)->put_StopPageScriptExecution(value));
}

template <typename D> Windows::Foundation::Uri impl_IWebViewNavigationCompletedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewNavigationCompletedEventArgs)->get_Uri(put_abi(value)));
    return value;
}

template <typename D> bool impl_IWebViewNavigationCompletedEventArgs<D>::IsSuccess() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IWebViewNavigationCompletedEventArgs)->get_IsSuccess(&value));
    return value;
}

template <typename D> Windows::Web::WebErrorStatus impl_IWebViewNavigationCompletedEventArgs<D>::WebErrorStatus() const
{
    Windows::Web::WebErrorStatus value {};
    check_hresult(WINRT_SHIM(IWebViewNavigationCompletedEventArgs)->get_WebErrorStatus(&value));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewNavigationFailedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewNavigationFailedEventArgs)->get_Uri(put_abi(value)));
    return value;
}

template <typename D> Windows::Web::WebErrorStatus impl_IWebViewNavigationFailedEventArgs<D>::WebErrorStatus() const
{
    Windows::Web::WebErrorStatus value {};
    check_hresult(WINRT_SHIM(IWebViewNavigationFailedEventArgs)->get_WebErrorStatus(&value));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewNavigationStartingEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewNavigationStartingEventArgs)->get_Uri(put_abi(value)));
    return value;
}

template <typename D> bool impl_IWebViewNavigationStartingEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IWebViewNavigationStartingEventArgs)->get_Cancel(&value));
    return value;
}

template <typename D> void impl_IWebViewNavigationStartingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(WINRT_SHIM(IWebViewNavigationStartingEventArgs)->put_Cancel(value));
}

template <typename D> Windows::Foundation::Uri impl_IWebViewNewWindowRequestedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewNewWindowRequestedEventArgs)->get_Uri(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewNewWindowRequestedEventArgs<D>::Referrer() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewNewWindowRequestedEventArgs)->get_Referrer(put_abi(value)));
    return value;
}

template <typename D> bool impl_IWebViewNewWindowRequestedEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IWebViewNewWindowRequestedEventArgs)->get_Handled(&value));
    return value;
}

template <typename D> void impl_IWebViewNewWindowRequestedEventArgs<D>::Handled(bool value) const
{
    check_hresult(WINRT_SHIM(IWebViewNewWindowRequestedEventArgs)->put_Handled(value));
}

template <typename D> Windows::Foundation::Uri impl_IWebViewPermissionRequest<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewPermissionRequest)->get_Uri(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewPermissionType impl_IWebViewPermissionRequest<D>::PermissionType() const
{
    Windows::UI::Xaml::Controls::WebViewPermissionType value {};
    check_hresult(WINRT_SHIM(IWebViewPermissionRequest)->get_PermissionType(&value));
    return value;
}

template <typename D> uint32_t impl_IWebViewPermissionRequest<D>::Id() const
{
    uint32_t value {};
    check_hresult(WINRT_SHIM(IWebViewPermissionRequest)->get_Id(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewPermissionState impl_IWebViewPermissionRequest<D>::State() const
{
    Windows::UI::Xaml::Controls::WebViewPermissionState value {};
    check_hresult(WINRT_SHIM(IWebViewPermissionRequest)->get_State(&value));
    return value;
}

template <typename D> void impl_IWebViewPermissionRequest<D>::Defer() const
{
    check_hresult(WINRT_SHIM(IWebViewPermissionRequest)->abi_Defer());
}

template <typename D> void impl_IWebViewPermissionRequest<D>::Allow() const
{
    check_hresult(WINRT_SHIM(IWebViewPermissionRequest)->abi_Allow());
}

template <typename D> void impl_IWebViewPermissionRequest<D>::Deny() const
{
    check_hresult(WINRT_SHIM(IWebViewPermissionRequest)->abi_Deny());
}

template <typename D> Windows::UI::Xaml::Controls::WebViewPermissionRequest impl_IWebViewPermissionRequestedEventArgs<D>::PermissionRequest() const
{
    Windows::UI::Xaml::Controls::WebViewPermissionRequest value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewPermissionRequestedEventArgs)->get_PermissionRequest(put_abi(value)));
    return value;
}

template <typename D> bool impl_IWebViewSettings<D>::IsJavaScriptEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IWebViewSettings)->get_IsJavaScriptEnabled(&value));
    return value;
}

template <typename D> void impl_IWebViewSettings<D>::IsJavaScriptEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IWebViewSettings)->put_IsJavaScriptEnabled(value));
}

template <typename D> bool impl_IWebViewSettings<D>::IsIndexedDBEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IWebViewSettings)->get_IsIndexedDBEnabled(&value));
    return value;
}

template <typename D> void impl_IWebViewSettings<D>::IsIndexedDBEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IWebViewSettings)->put_IsIndexedDBEnabled(value));
}

template <typename D> Windows::Foundation::Uri impl_IWebViewUnsupportedUriSchemeIdentifiedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewUnsupportedUriSchemeIdentifiedEventArgs)->get_Uri(put_abi(value)));
    return value;
}

template <typename D> bool impl_IWebViewUnsupportedUriSchemeIdentifiedEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IWebViewUnsupportedUriSchemeIdentifiedEventArgs)->get_Handled(&value));
    return value;
}

template <typename D> void impl_IWebViewUnsupportedUriSchemeIdentifiedEventArgs<D>::Handled(bool value) const
{
    check_hresult(WINRT_SHIM(IWebViewUnsupportedUriSchemeIdentifiedEventArgs)->put_Handled(value));
}

template <typename D> Windows::Foundation::Uri impl_IWebViewUnviewableContentIdentifiedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewUnviewableContentIdentifiedEventArgs)->get_Uri(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewUnviewableContentIdentifiedEventArgs<D>::Referrer() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewUnviewableContentIdentifiedEventArgs)->get_Referrer(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IWebViewUnviewableContentIdentifiedEventArgs2<D>::MediaType() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IWebViewUnviewableContentIdentifiedEventArgs2)->get_MediaType(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IAutoSuggestBoxQuerySubmittedEventArgs<D>::QueryText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IAutoSuggestBoxQuerySubmittedEventArgs)->get_QueryText(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IAutoSuggestBoxQuerySubmittedEventArgs<D>::ChosenSuggestion() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IAutoSuggestBoxQuerySubmittedEventArgs)->get_ChosenSuggestion(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IAutoSuggestBoxSuggestionChosenEventArgs<D>::SelectedItem() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IAutoSuggestBoxSuggestionChosenEventArgs)->get_SelectedItem(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason impl_IAutoSuggestBoxTextChangedEventArgs<D>::Reason() const
{
    Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason value {};
    check_hresult(WINRT_SHIM(IAutoSuggestBoxTextChangedEventArgs)->get_Reason(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBoxTextChangedEventArgs<D>::Reason(Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBoxTextChangedEventArgs)->put_Reason(value));
}

template <typename D> bool impl_IAutoSuggestBoxTextChangedEventArgs<D>::CheckCurrent() const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IAutoSuggestBoxTextChangedEventArgs)->abi_CheckCurrent(&returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxTextChangedEventArgsStatics<D>::ReasonProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxTextChangedEventArgsStatics)->get_ReasonProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IFlyout<D>::Content() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IFlyout)->get_Content(put_abi(value)));
    return value;
}

template <typename D> void impl_IFlyout<D>::Content(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IFlyout)->put_Content(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_IFlyout<D>::FlyoutPresenterStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(WINRT_SHIM(IFlyout)->get_FlyoutPresenterStyle(put_abi(value)));
    return value;
}

template <typename D> void impl_IFlyout<D>::FlyoutPresenterStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(WINRT_SHIM(IFlyout)->put_FlyoutPresenterStyle(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFlyoutStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFlyoutStatics)->get_ContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFlyoutStatics<D>::FlyoutPresenterStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFlyoutStatics)->get_FlyoutPresenterStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Flyout impl_IFlyoutFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Flyout instance { nullptr };
    check_hresult(WINRT_SHIM(IFlyoutFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> impl_IMenuFlyout<D>::Items() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> value;
    check_hresult(WINRT_SHIM(IMenuFlyout)->get_Items(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Style impl_IMenuFlyout<D>::MenuFlyoutPresenterStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyout)->get_MenuFlyoutPresenterStyle(put_abi(value)));
    return value;
}

template <typename D> void impl_IMenuFlyout<D>::MenuFlyoutPresenterStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(WINRT_SHIM(IMenuFlyout)->put_MenuFlyoutPresenterStyle(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMenuFlyoutStatics<D>::MenuFlyoutPresenterStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyoutStatics)->get_MenuFlyoutPresenterStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MenuFlyout impl_IMenuFlyoutFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MenuFlyout instance { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyoutFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> void impl_IMenuFlyout2<D>::ShowAt(const Windows::UI::Xaml::UIElement & targetElement, const Windows::Foundation::Point & point) const
{
    check_hresult(WINRT_SHIM(IMenuFlyout2)->abi_ShowAt(get_abi(targetElement), get_abi(point)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IIconElement<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IIconElement)->get_Foreground(put_abi(value)));
    return value;
}

template <typename D> void impl_IIconElement<D>::Foreground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IIconElement)->put_Foreground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IIconElementStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IIconElementStatics)->get_ForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Input::Inking::InkPresenter impl_IInkCanvas<D>::InkPresenter() const
{
    Windows::UI::Input::Inking::InkPresenter value { nullptr };
    check_hresult(WINRT_SHIM(IInkCanvas)->get_InkPresenter(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkCanvas impl_IInkCanvasFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkCanvas instance { nullptr };
    check_hresult(WINRT_SHIM(IInkCanvasFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Media::ImageSource impl_IMediaElement<D>::PosterSource() const
{
    Windows::UI::Xaml::Media::ImageSource value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElement)->get_PosterSource(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaElement<D>::PosterSource(const Windows::UI::Xaml::Media::ImageSource & value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_PosterSource(get_abi(value)));
}

template <typename D> Windows::Foundation::Uri impl_IMediaElement<D>::Source() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElement)->get_Source(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Source(const Windows::Foundation::Uri & value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_Source(get_abi(value)));
}

template <typename D> bool impl_IMediaElement<D>::IsMuted() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_IsMuted(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::IsMuted(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_IsMuted(value));
}

template <typename D> bool impl_IMediaElement<D>::IsAudioOnly() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_IsAudioOnly(&value));
    return value;
}

template <typename D> bool impl_IMediaElement<D>::AutoPlay() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_AutoPlay(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::AutoPlay(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_AutoPlay(value));
}

template <typename D> double impl_IMediaElement<D>::Volume() const
{
    double value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_Volume(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Volume(double value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_Volume(value));
}

template <typename D> double impl_IMediaElement<D>::Balance() const
{
    double value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_Balance(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Balance(double value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_Balance(value));
}

template <typename D> int32_t impl_IMediaElement<D>::NaturalVideoHeight() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_NaturalVideoHeight(&value));
    return value;
}

template <typename D> int32_t impl_IMediaElement<D>::NaturalVideoWidth() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_NaturalVideoWidth(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Duration impl_IMediaElement<D>::NaturalDuration() const
{
    Windows::UI::Xaml::Duration value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_NaturalDuration(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan impl_IMediaElement<D>::Position() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_Position(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Position(const Windows::Foundation::TimeSpan & value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_Position(get_abi(value)));
}

template <typename D> double impl_IMediaElement<D>::DownloadProgress() const
{
    double value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_DownloadProgress(&value));
    return value;
}

template <typename D> double impl_IMediaElement<D>::BufferingProgress() const
{
    double value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_BufferingProgress(&value));
    return value;
}

template <typename D> double impl_IMediaElement<D>::DownloadProgressOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_DownloadProgressOffset(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::MediaElementState impl_IMediaElement<D>::CurrentState() const
{
    Windows::UI::Xaml::Media::MediaElementState value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_CurrentState(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::TimelineMarkerCollection impl_IMediaElement<D>::Markers() const
{
    Windows::UI::Xaml::Media::TimelineMarkerCollection value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElement)->get_Markers(put_abi(value)));
    return value;
}

template <typename D> bool impl_IMediaElement<D>::CanSeek() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_CanSeek(&value));
    return value;
}

template <typename D> bool impl_IMediaElement<D>::CanPause() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_CanPause(&value));
    return value;
}

template <typename D> int32_t impl_IMediaElement<D>::AudioStreamCount() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_AudioStreamCount(&value));
    return value;
}

template <typename D> Windows::Foundation::IReference<int32_t> impl_IMediaElement<D>::AudioStreamIndex() const
{
    Windows::Foundation::IReference<int32_t> value;
    check_hresult(WINRT_SHIM(IMediaElement)->get_AudioStreamIndex(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaElement<D>::AudioStreamIndex(const optional<int32_t> & value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_AudioStreamIndex(get_abi(value)));
}

template <typename D> double impl_IMediaElement<D>::PlaybackRate() const
{
    double value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_PlaybackRate(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::PlaybackRate(double value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_PlaybackRate(value));
}

template <typename D> bool impl_IMediaElement<D>::IsLooping() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_IsLooping(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::IsLooping(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_IsLooping(value));
}

template <typename D> Windows::Media::PlayTo::PlayToSource impl_IMediaElement<D>::PlayToSource() const
{
    Windows::Media::PlayTo::PlayToSource value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElement)->get_PlayToSource(put_abi(value)));
    return value;
}

template <typename D> double impl_IMediaElement<D>::DefaultPlaybackRate() const
{
    double value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_DefaultPlaybackRate(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::DefaultPlaybackRate(double value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_DefaultPlaybackRate(value));
}

template <typename D> int32_t impl_IMediaElement<D>::AspectRatioWidth() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_AspectRatioWidth(&value));
    return value;
}

template <typename D> int32_t impl_IMediaElement<D>::AspectRatioHeight() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_AspectRatioHeight(&value));
    return value;
}

template <typename D> bool impl_IMediaElement<D>::RealTimePlayback() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_RealTimePlayback(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::RealTimePlayback(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_RealTimePlayback(value));
}

template <typename D> Windows::UI::Xaml::Media::AudioCategory impl_IMediaElement<D>::AudioCategory() const
{
    Windows::UI::Xaml::Media::AudioCategory value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_AudioCategory(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::AudioCategory(Windows::UI::Xaml::Media::AudioCategory value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_AudioCategory(value));
}

template <typename D> Windows::UI::Xaml::Media::AudioDeviceType impl_IMediaElement<D>::AudioDeviceType() const
{
    Windows::UI::Xaml::Media::AudioDeviceType value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_AudioDeviceType(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::AudioDeviceType(Windows::UI::Xaml::Media::AudioDeviceType value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_AudioDeviceType(value));
}

template <typename D> Windows::Media::Protection::MediaProtectionManager impl_IMediaElement<D>::ProtectionManager() const
{
    Windows::Media::Protection::MediaProtectionManager value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElement)->get_ProtectionManager(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaElement<D>::ProtectionManager(const Windows::Media::Protection::MediaProtectionManager & value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_ProtectionManager(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stereo3DVideoPackingMode impl_IMediaElement<D>::Stereo3DVideoPackingMode() const
{
    Windows::UI::Xaml::Media::Stereo3DVideoPackingMode value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_Stereo3DVideoPackingMode(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Stereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_Stereo3DVideoPackingMode(value));
}

template <typename D> Windows::UI::Xaml::Media::Stereo3DVideoRenderMode impl_IMediaElement<D>::Stereo3DVideoRenderMode() const
{
    Windows::UI::Xaml::Media::Stereo3DVideoRenderMode value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_Stereo3DVideoRenderMode(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Stereo3DVideoRenderMode(Windows::UI::Xaml::Media::Stereo3DVideoRenderMode value) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->put_Stereo3DVideoRenderMode(value));
}

template <typename D> bool impl_IMediaElement<D>::IsStereo3DVideo() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_IsStereo3DVideo(&value));
    return value;
}

template <typename D> event_token impl_IMediaElement<D>::MediaOpened(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement)->add_MediaOpened(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::MediaOpened(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_MediaOpened, MediaOpened(value));
}

template <typename D> void impl_IMediaElement<D>::MediaOpened(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->remove_MediaOpened(token));
}

template <typename D> event_token impl_IMediaElement<D>::MediaEnded(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement)->add_MediaEnded(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::MediaEnded(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_MediaEnded, MediaEnded(value));
}

template <typename D> void impl_IMediaElement<D>::MediaEnded(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->remove_MediaEnded(token));
}

template <typename D> event_token impl_IMediaElement<D>::MediaFailed(const Windows::UI::Xaml::ExceptionRoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement)->add_MediaFailed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::MediaFailed(auto_revoke_t, const Windows::UI::Xaml::ExceptionRoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_MediaFailed, MediaFailed(value));
}

template <typename D> void impl_IMediaElement<D>::MediaFailed(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->remove_MediaFailed(token));
}

template <typename D> event_token impl_IMediaElement<D>::DownloadProgressChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement)->add_DownloadProgressChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::DownloadProgressChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_DownloadProgressChanged, DownloadProgressChanged(value));
}

template <typename D> void impl_IMediaElement<D>::DownloadProgressChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->remove_DownloadProgressChanged(token));
}

template <typename D> event_token impl_IMediaElement<D>::BufferingProgressChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement)->add_BufferingProgressChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::BufferingProgressChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_BufferingProgressChanged, BufferingProgressChanged(value));
}

template <typename D> void impl_IMediaElement<D>::BufferingProgressChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->remove_BufferingProgressChanged(token));
}

template <typename D> event_token impl_IMediaElement<D>::CurrentStateChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement)->add_CurrentStateChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::CurrentStateChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_CurrentStateChanged, CurrentStateChanged(value));
}

template <typename D> void impl_IMediaElement<D>::CurrentStateChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->remove_CurrentStateChanged(token));
}

template <typename D> event_token impl_IMediaElement<D>::MarkerReached(const Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement)->add_MarkerReached(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::MarkerReached(auto_revoke_t, const Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_MarkerReached, MarkerReached(value));
}

template <typename D> void impl_IMediaElement<D>::MarkerReached(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->remove_MarkerReached(token));
}

template <typename D> event_token impl_IMediaElement<D>::RateChanged(const Windows::UI::Xaml::Media::RateChangedRoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement)->add_RateChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::RateChanged(auto_revoke_t, const Windows::UI::Xaml::Media::RateChangedRoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_RateChanged, RateChanged(value));
}

template <typename D> void impl_IMediaElement<D>::RateChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->remove_RateChanged(token));
}

template <typename D> event_token impl_IMediaElement<D>::VolumeChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement)->add_VolumeChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::VolumeChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_VolumeChanged, VolumeChanged(value));
}

template <typename D> void impl_IMediaElement<D>::VolumeChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->remove_VolumeChanged(token));
}

template <typename D> event_token impl_IMediaElement<D>::SeekCompleted(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement)->add_SeekCompleted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::SeekCompleted(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_SeekCompleted, SeekCompleted(value));
}

template <typename D> void impl_IMediaElement<D>::SeekCompleted(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->remove_SeekCompleted(token));
}

template <typename D> void impl_IMediaElement<D>::Stop() const
{
    check_hresult(WINRT_SHIM(IMediaElement)->abi_Stop());
}

template <typename D> void impl_IMediaElement<D>::Play() const
{
    check_hresult(WINRT_SHIM(IMediaElement)->abi_Play());
}

template <typename D> void impl_IMediaElement<D>::Pause() const
{
    check_hresult(WINRT_SHIM(IMediaElement)->abi_Pause());
}

template <typename D> Windows::UI::Xaml::Media::MediaCanPlayResponse impl_IMediaElement<D>::CanPlayType(hstring_view type) const
{
    Windows::UI::Xaml::Media::MediaCanPlayResponse returnValue {};
    check_hresult(WINRT_SHIM(IMediaElement)->abi_CanPlayType(get_abi(type), &returnValue));
    return returnValue;
}

template <typename D> void impl_IMediaElement<D>::SetSource(const Windows::Storage::Streams::IRandomAccessStream & stream, hstring_view mimeType) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->abi_SetSource(get_abi(stream), get_abi(mimeType)));
}

template <typename D> hstring impl_IMediaElement<D>::GetAudioStreamLanguage(const optional<int32_t> & index) const
{
    hstring returnValue;
    check_hresult(WINRT_SHIM(IMediaElement)->abi_GetAudioStreamLanguage(get_abi(index), put_abi(returnValue)));
    return returnValue;
}

template <typename D> void impl_IMediaElement<D>::AddAudioEffect(hstring_view effectID, bool effectOptional, const Windows::Foundation::Collections::IPropertySet & effectConfiguration) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->abi_AddAudioEffect(get_abi(effectID), effectOptional, get_abi(effectConfiguration)));
}

template <typename D> void impl_IMediaElement<D>::AddVideoEffect(hstring_view effectID, bool effectOptional, const Windows::Foundation::Collections::IPropertySet & effectConfiguration) const
{
    check_hresult(WINRT_SHIM(IMediaElement)->abi_AddVideoEffect(get_abi(effectID), effectOptional, get_abi(effectConfiguration)));
}

template <typename D> void impl_IMediaElement<D>::RemoveAllEffects() const
{
    check_hresult(WINRT_SHIM(IMediaElement)->abi_RemoveAllEffects());
}

template <typename D> Windows::UI::Xaml::Media::Stereo3DVideoPackingMode impl_IMediaElement<D>::ActualStereo3DVideoPackingMode() const
{
    Windows::UI::Xaml::Media::Stereo3DVideoPackingMode value {};
    check_hresult(WINRT_SHIM(IMediaElement)->get_ActualStereo3DVideoPackingMode(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::PosterSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_PosterSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_SourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::IsMutedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_IsMutedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::IsAudioOnlyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_IsAudioOnlyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AutoPlayProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_AutoPlayProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::VolumeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_VolumeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::BalanceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_BalanceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::NaturalVideoHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_NaturalVideoHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::NaturalVideoWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_NaturalVideoWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::NaturalDurationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_NaturalDurationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::PositionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_PositionProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::DownloadProgressProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_DownloadProgressProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::BufferingProgressProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_BufferingProgressProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::DownloadProgressOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_DownloadProgressOffsetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::CurrentStateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_CurrentStateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::CanSeekProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_CanSeekProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::CanPauseProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_CanPauseProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AudioStreamCountProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_AudioStreamCountProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AudioStreamIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_AudioStreamIndexProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::PlaybackRateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_PlaybackRateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::IsLoopingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_IsLoopingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::PlayToSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_PlayToSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::DefaultPlaybackRateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_DefaultPlaybackRateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AspectRatioWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_AspectRatioWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AspectRatioHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_AspectRatioHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::RealTimePlaybackProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_RealTimePlaybackProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AudioCategoryProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_AudioCategoryProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AudioDeviceTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_AudioDeviceTypeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::ProtectionManagerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_ProtectionManagerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::Stereo3DVideoPackingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_Stereo3DVideoPackingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::Stereo3DVideoRenderModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_Stereo3DVideoRenderModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::IsStereo3DVideoProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_IsStereo3DVideoProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::ActualStereo3DVideoPackingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics)->get_ActualStereo3DVideoPackingModeProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IMediaElement2<D>::AreTransportControlsEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaElement2)->get_AreTransportControlsEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaElement2<D>::AreTransportControlsEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaElement2)->put_AreTransportControlsEnabled(value));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_IMediaElement2<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(WINRT_SHIM(IMediaElement2)->get_Stretch(&value));
    return value;
}

template <typename D> void impl_IMediaElement2<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(WINRT_SHIM(IMediaElement2)->put_Stretch(value));
}

template <typename D> bool impl_IMediaElement2<D>::IsFullWindow() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaElement2)->get_IsFullWindow(&value));
    return value;
}

template <typename D> void impl_IMediaElement2<D>::IsFullWindow(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaElement2)->put_IsFullWindow(value));
}

template <typename D> void impl_IMediaElement2<D>::SetMediaStreamSource(const Windows::Media::Core::IMediaSource & source) const
{
    check_hresult(WINRT_SHIM(IMediaElement2)->abi_SetMediaStreamSource(get_abi(source)));
}

template <typename D> Windows::Foundation::Uri impl_IMediaElement2<D>::PlayToPreferredSourceUri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElement2)->get_PlayToPreferredSourceUri(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaElement2<D>::PlayToPreferredSourceUri(const Windows::Foundation::Uri & value) const
{
    check_hresult(WINRT_SHIM(IMediaElement2)->put_PlayToPreferredSourceUri(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics2<D>::AreTransportControlsEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics2)->get_AreTransportControlsEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics2<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics2)->get_StretchProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics2<D>::IsFullWindowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics2)->get_IsFullWindowProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics2<D>::PlayToPreferredSourceUriProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElementStatics2)->get_PlayToPreferredSourceUriProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MediaTransportControls impl_IMediaElement3<D>::TransportControls() const
{
    Windows::UI::Xaml::Controls::MediaTransportControls value { nullptr };
    check_hresult(WINRT_SHIM(IMediaElement3)->get_TransportControls(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaElement3<D>::TransportControls(const Windows::UI::Xaml::Controls::MediaTransportControls & value) const
{
    check_hresult(WINRT_SHIM(IMediaElement3)->put_TransportControls(get_abi(value)));
}

template <typename D> event_token impl_IMediaElement3<D>::PartialMediaFailureDetected(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaElement, Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMediaElement3)->add_PartialMediaFailureDetected(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement3> impl_IMediaElement3<D>::PartialMediaFailureDetected(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaElement, Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IMediaElement3>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement3::remove_PartialMediaFailureDetected, PartialMediaFailureDetected(value));
}

template <typename D> void impl_IMediaElement3<D>::PartialMediaFailureDetected(event_token token) const
{
    check_hresult(WINRT_SHIM(IMediaElement3)->remove_PartialMediaFailureDetected(token));
}

template <typename D> void impl_IMediaElement3<D>::SetPlaybackSource(const Windows::Media::Playback::IMediaPlaybackSource & source) const
{
    check_hresult(WINRT_SHIM(IMediaElement3)->abi_SetPlaybackSource(get_abi(source)));
}

template <typename D> Windows::Media::Casting::CastingSource impl_IMediaElement3<D>::GetAsCastingSource() const
{
    Windows::Media::Casting::CastingSource returnValue { nullptr };
    check_hresult(WINRT_SHIM(IMediaElement3)->abi_GetAsCastingSource(put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::Media::Playback::MediaPlayer impl_IMediaPlayerPresenter<D>::MediaPlayer() const
{
    Windows::Media::Playback::MediaPlayer value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerPresenter)->get_MediaPlayer(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaPlayerPresenter<D>::MediaPlayer(const Windows::Media::Playback::MediaPlayer & value) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerPresenter)->put_MediaPlayer(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_IMediaPlayerPresenter<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(WINRT_SHIM(IMediaPlayerPresenter)->get_Stretch(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerPresenter<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerPresenter)->put_Stretch(value));
}

template <typename D> bool impl_IMediaPlayerPresenter<D>::IsFullWindow() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaPlayerPresenter)->get_IsFullWindow(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerPresenter<D>::IsFullWindow(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerPresenter)->put_IsFullWindow(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerPresenterStatics<D>::MediaPlayerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerPresenterStatics)->get_MediaPlayerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerPresenterStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerPresenterStatics)->get_StretchProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerPresenterStatics<D>::IsFullWindowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerPresenterStatics)->get_IsFullWindowProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MediaPlayerPresenter impl_IMediaPlayerPresenterFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MediaPlayerPresenter instance { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerPresenterFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Uri impl_IWebView<D>::Source() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IWebView)->get_Source(put_abi(value)));
    return value;
}

template <typename D> void impl_IWebView<D>::Source(const Windows::Foundation::Uri & value) const
{
    check_hresult(WINRT_SHIM(IWebView)->put_Source(get_abi(value)));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> impl_IWebView<D>::AllowedScriptNotifyUris() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> value;
    check_hresult(WINRT_SHIM(IWebView)->get_AllowedScriptNotifyUris(put_abi(value)));
    return value;
}

template <typename D> void impl_IWebView<D>::AllowedScriptNotifyUris(const Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> & value) const
{
    check_hresult(WINRT_SHIM(IWebView)->put_AllowedScriptNotifyUris(get_abi(value)));
}

template <typename D> Windows::ApplicationModel::DataTransfer::DataPackage impl_IWebView<D>::DataTransferPackage() const
{
    Windows::ApplicationModel::DataTransfer::DataPackage value { nullptr };
    check_hresult(WINRT_SHIM(IWebView)->get_DataTransferPackage(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IWebView<D>::LoadCompleted(const Windows::UI::Xaml::Navigation::LoadCompletedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView)->add_LoadCompleted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView> impl_IWebView<D>::LoadCompleted(auto_revoke_t, const Windows::UI::Xaml::Navigation::LoadCompletedEventHandler & value) const
{
    return impl::make_event_revoker<D, IWebView>(this, &ABI::Windows::UI::Xaml::Controls::IWebView::remove_LoadCompleted, LoadCompleted(value));
}

template <typename D> void impl_IWebView<D>::LoadCompleted(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView)->remove_LoadCompleted(token));
}

template <typename D> event_token impl_IWebView<D>::ScriptNotify(const Windows::UI::Xaml::Controls::NotifyEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView)->add_ScriptNotify(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView> impl_IWebView<D>::ScriptNotify(auto_revoke_t, const Windows::UI::Xaml::Controls::NotifyEventHandler & value) const
{
    return impl::make_event_revoker<D, IWebView>(this, &ABI::Windows::UI::Xaml::Controls::IWebView::remove_ScriptNotify, ScriptNotify(value));
}

template <typename D> void impl_IWebView<D>::ScriptNotify(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView)->remove_ScriptNotify(token));
}

template <typename D> event_token impl_IWebView<D>::NavigationFailed(const Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView)->add_NavigationFailed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView> impl_IWebView<D>::NavigationFailed(auto_revoke_t, const Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler & value) const
{
    return impl::make_event_revoker<D, IWebView>(this, &ABI::Windows::UI::Xaml::Controls::IWebView::remove_NavigationFailed, NavigationFailed(value));
}

template <typename D> void impl_IWebView<D>::NavigationFailed(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView)->remove_NavigationFailed(token));
}

template <typename D> hstring impl_IWebView<D>::InvokeScript(hstring_view scriptName, array_view<const hstring> arguments) const
{
    hstring returnValue;
    check_hresult(WINRT_SHIM(IWebView)->abi_InvokeScript(get_abi(scriptName), arguments.size(), get_abi(arguments), put_abi(returnValue)));
    return returnValue;
}

template <typename D> void impl_IWebView<D>::Navigate(const Windows::Foundation::Uri & source) const
{
    check_hresult(WINRT_SHIM(IWebView)->abi_Navigate(get_abi(source)));
}

template <typename D> void impl_IWebView<D>::NavigateToString(hstring_view text) const
{
    check_hresult(WINRT_SHIM(IWebView)->abi_NavigateToString(get_abi(text)));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> impl_IWebViewStatics<D>::AnyScriptNotifyUri() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> value;
    check_hresult(WINRT_SHIM(IWebViewStatics)->get_AnyScriptNotifyUri(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics)->get_SourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics<D>::AllowedScriptNotifyUrisProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics)->get_AllowedScriptNotifyUrisProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics<D>::DataTransferPackageProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics)->get_DataTransferPackageProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IWebView2<D>::CanGoBack() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IWebView2)->get_CanGoBack(&value));
    return value;
}

template <typename D> bool impl_IWebView2<D>::CanGoForward() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IWebView2)->get_CanGoForward(&value));
    return value;
}

template <typename D> hstring impl_IWebView2<D>::DocumentTitle() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IWebView2)->get_DocumentTitle(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IWebView2<D>::NavigationStarting(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_NavigationStarting(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::NavigationStarting(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_NavigationStarting, NavigationStarting(value));
}

template <typename D> void impl_IWebView2<D>::NavigationStarting(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_NavigationStarting(token));
}

template <typename D> event_token impl_IWebView2<D>::ContentLoading(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_ContentLoading(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::ContentLoading(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_ContentLoading, ContentLoading(value));
}

template <typename D> void impl_IWebView2<D>::ContentLoading(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_ContentLoading(token));
}

template <typename D> event_token impl_IWebView2<D>::DOMContentLoaded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_DOMContentLoaded(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::DOMContentLoaded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_DOMContentLoaded, DOMContentLoaded(value));
}

template <typename D> void impl_IWebView2<D>::DOMContentLoaded(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_DOMContentLoaded(token));
}

template <typename D> void impl_IWebView2<D>::GoForward() const
{
    check_hresult(WINRT_SHIM(IWebView2)->abi_GoForward());
}

template <typename D> void impl_IWebView2<D>::GoBack() const
{
    check_hresult(WINRT_SHIM(IWebView2)->abi_GoBack());
}

template <typename D> void impl_IWebView2<D>::Refresh() const
{
    check_hresult(WINRT_SHIM(IWebView2)->abi_Refresh());
}

template <typename D> void impl_IWebView2<D>::Stop() const
{
    check_hresult(WINRT_SHIM(IWebView2)->abi_Stop());
}

template <typename D> Windows::Foundation::IAsyncAction impl_IWebView2<D>::CapturePreviewToStreamAsync(const Windows::Storage::Streams::IRandomAccessStream & stream) const
{
    Windows::Foundation::IAsyncAction returnValue;
    check_hresult(WINRT_SHIM(IWebView2)->abi_CapturePreviewToStreamAsync(get_abi(stream), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::IAsyncOperation<hstring> impl_IWebView2<D>::InvokeScriptAsync(hstring_view scriptName, iterable<hstring> arguments) const
{
    Windows::Foundation::IAsyncOperation<hstring> returnValue;
    check_hresult(WINRT_SHIM(IWebView2)->abi_InvokeScriptAsync(get_abi(scriptName), get_abi(arguments), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::DataTransfer::DataPackage> impl_IWebView2<D>::CaptureSelectedContentToDataPackageAsync() const
{
    Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::DataTransfer::DataPackage> returnValue;
    check_hresult(WINRT_SHIM(IWebView2)->abi_CaptureSelectedContentToDataPackageAsync(put_abi(returnValue)));
    return returnValue;
}

template <typename D> void impl_IWebView2<D>::NavigateToLocalStreamUri(const Windows::Foundation::Uri & source, const Windows::Web::IUriToStreamResolver & streamResolver) const
{
    check_hresult(WINRT_SHIM(IWebView2)->abi_NavigateToLocalStreamUri(get_abi(source), get_abi(streamResolver)));
}

template <typename D> Windows::Foundation::Uri impl_IWebView2<D>::BuildLocalStreamUri(hstring_view contentIdentifier, hstring_view relativePath) const
{
    Windows::Foundation::Uri returnValue { nullptr };
    check_hresult(WINRT_SHIM(IWebView2)->abi_BuildLocalStreamUri(get_abi(contentIdentifier), get_abi(relativePath), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Color impl_IWebView2<D>::DefaultBackgroundColor() const
{
    Windows::UI::Color value {};
    check_hresult(WINRT_SHIM(IWebView2)->get_DefaultBackgroundColor(put_abi(value)));
    return value;
}

template <typename D> void impl_IWebView2<D>::DefaultBackgroundColor(const Windows::UI::Color & value) const
{
    check_hresult(WINRT_SHIM(IWebView2)->put_DefaultBackgroundColor(get_abi(value)));
}

template <typename D> event_token impl_IWebView2<D>::NavigationCompleted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_NavigationCompleted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::NavigationCompleted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_NavigationCompleted, NavigationCompleted(value));
}

template <typename D> void impl_IWebView2<D>::NavigationCompleted(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_NavigationCompleted(token));
}

template <typename D> event_token impl_IWebView2<D>::FrameNavigationStarting(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_FrameNavigationStarting(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::FrameNavigationStarting(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_FrameNavigationStarting, FrameNavigationStarting(value));
}

template <typename D> void impl_IWebView2<D>::FrameNavigationStarting(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_FrameNavigationStarting(token));
}

template <typename D> event_token impl_IWebView2<D>::FrameContentLoading(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_FrameContentLoading(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::FrameContentLoading(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_FrameContentLoading, FrameContentLoading(value));
}

template <typename D> void impl_IWebView2<D>::FrameContentLoading(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_FrameContentLoading(token));
}

template <typename D> event_token impl_IWebView2<D>::FrameDOMContentLoaded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_FrameDOMContentLoaded(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::FrameDOMContentLoaded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_FrameDOMContentLoaded, FrameDOMContentLoaded(value));
}

template <typename D> void impl_IWebView2<D>::FrameDOMContentLoaded(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_FrameDOMContentLoaded(token));
}

template <typename D> event_token impl_IWebView2<D>::FrameNavigationCompleted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_FrameNavigationCompleted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::FrameNavigationCompleted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_FrameNavigationCompleted, FrameNavigationCompleted(value));
}

template <typename D> void impl_IWebView2<D>::FrameNavigationCompleted(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_FrameNavigationCompleted(token));
}

template <typename D> event_token impl_IWebView2<D>::LongRunningScriptDetected(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_LongRunningScriptDetected(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::LongRunningScriptDetected(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_LongRunningScriptDetected, LongRunningScriptDetected(value));
}

template <typename D> void impl_IWebView2<D>::LongRunningScriptDetected(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_LongRunningScriptDetected(token));
}

template <typename D> event_token impl_IWebView2<D>::UnsafeContentWarningDisplaying(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_UnsafeContentWarningDisplaying(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::UnsafeContentWarningDisplaying(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_UnsafeContentWarningDisplaying, UnsafeContentWarningDisplaying(value));
}

template <typename D> void impl_IWebView2<D>::UnsafeContentWarningDisplaying(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_UnsafeContentWarningDisplaying(token));
}

template <typename D> event_token impl_IWebView2<D>::UnviewableContentIdentified(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView2)->add_UnviewableContentIdentified(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::UnviewableContentIdentified(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_UnviewableContentIdentified, UnviewableContentIdentified(value));
}

template <typename D> void impl_IWebView2<D>::UnviewableContentIdentified(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView2)->remove_UnviewableContentIdentified(token));
}

template <typename D> void impl_IWebView2<D>::NavigateWithHttpRequestMessage(const Windows::Web::Http::HttpRequestMessage & requestMessage) const
{
    check_hresult(WINRT_SHIM(IWebView2)->abi_NavigateWithHttpRequestMessage(get_abi(requestMessage)));
}

template <typename D> bool impl_IWebView2<D>::Focus(Windows::UI::Xaml::FocusState value) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IWebView2)->abi_Focus(value, &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics2<D>::CanGoBackProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics2)->get_CanGoBackProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics2<D>::CanGoForwardProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics2)->get_CanGoForwardProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics2<D>::DocumentTitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics2)->get_DocumentTitleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics2<D>::DefaultBackgroundColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics2)->get_DefaultBackgroundColorProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IWebView3<D>::ContainsFullScreenElement() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IWebView3)->get_ContainsFullScreenElement(&value));
    return value;
}

template <typename D> event_token impl_IWebView3<D>::ContainsFullScreenElementChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView3)->add_ContainsFullScreenElementChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView3> impl_IWebView3<D>::ContainsFullScreenElementChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IWebView3>(this, &ABI::Windows::UI::Xaml::Controls::IWebView3::remove_ContainsFullScreenElementChanged, ContainsFullScreenElementChanged(value));
}

template <typename D> void impl_IWebView3<D>::ContainsFullScreenElementChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView3)->remove_ContainsFullScreenElementChanged(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics3<D>::ContainsFullScreenElementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics3)->get_ContainsFullScreenElementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewExecutionMode impl_IWebView4<D>::ExecutionMode() const
{
    Windows::UI::Xaml::Controls::WebViewExecutionMode value {};
    check_hresult(WINRT_SHIM(IWebView4)->get_ExecutionMode(&value));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest> impl_IWebView4<D>::DeferredPermissionRequests() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest> value;
    check_hresult(WINRT_SHIM(IWebView4)->get_DeferredPermissionRequests(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewSettings impl_IWebView4<D>::Settings() const
{
    Windows::UI::Xaml::Controls::WebViewSettings value { nullptr };
    check_hresult(WINRT_SHIM(IWebView4)->get_Settings(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IWebView4<D>::UnsupportedUriSchemeIdentified(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView4)->add_UnsupportedUriSchemeIdentified(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView4> impl_IWebView4<D>::UnsupportedUriSchemeIdentified(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView4>(this, &ABI::Windows::UI::Xaml::Controls::IWebView4::remove_UnsupportedUriSchemeIdentified, UnsupportedUriSchemeIdentified(value));
}

template <typename D> void impl_IWebView4<D>::UnsupportedUriSchemeIdentified(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView4)->remove_UnsupportedUriSchemeIdentified(token));
}

template <typename D> event_token impl_IWebView4<D>::NewWindowRequested(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView4)->add_NewWindowRequested(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView4> impl_IWebView4<D>::NewWindowRequested(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView4>(this, &ABI::Windows::UI::Xaml::Controls::IWebView4::remove_NewWindowRequested, NewWindowRequested(value));
}

template <typename D> void impl_IWebView4<D>::NewWindowRequested(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView4)->remove_NewWindowRequested(token));
}

template <typename D> event_token impl_IWebView4<D>::PermissionRequested(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IWebView4)->add_PermissionRequested(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView4> impl_IWebView4<D>::PermissionRequested(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView4>(this, &ABI::Windows::UI::Xaml::Controls::IWebView4::remove_PermissionRequested, PermissionRequested(value));
}

template <typename D> void impl_IWebView4<D>::PermissionRequested(event_token token) const
{
    check_hresult(WINRT_SHIM(IWebView4)->remove_PermissionRequested(token));
}

template <typename D> void impl_IWebView4<D>::AddWebAllowedObject(hstring_view name, const Windows::Foundation::IInspectable & pObject) const
{
    check_hresult(WINRT_SHIM(IWebView4)->abi_AddWebAllowedObject(get_abi(name), get_abi(pObject)));
}

template <typename D> Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest impl_IWebView4<D>::DeferredPermissionRequestById(uint32_t id) const
{
    Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest returnValue { nullptr };
    check_hresult(WINRT_SHIM(IWebView4)->abi_DeferredPermissionRequestById(id, put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewExecutionMode impl_IWebViewStatics4<D>::DefaultExecutionMode() const
{
    Windows::UI::Xaml::Controls::WebViewExecutionMode value {};
    check_hresult(WINRT_SHIM(IWebViewStatics4)->get_DefaultExecutionMode(&value));
    return value;
}

template <typename D> Windows::Foundation::IAsyncAction impl_IWebViewStatics4<D>::ClearTemporaryWebDataAsync() const
{
    Windows::Foundation::IAsyncAction returnValue;
    check_hresult(WINRT_SHIM(IWebViewStatics4)->abi_ClearTemporaryWebDataAsync(put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::WebView impl_IWebViewFactory4<D>::CreateInstanceWithExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode executionMode) const
{
    Windows::UI::Xaml::Controls::WebView instance { nullptr };
    check_hresult(WINRT_SHIM(IWebViewFactory4)->abi_CreateInstanceWithExecutionMode(executionMode, put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IWebView5<D>::XYFocusLeft() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(WINRT_SHIM(IWebView5)->get_XYFocusLeft(put_abi(value)));
    return value;
}

template <typename D> void impl_IWebView5<D>::XYFocusLeft(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(WINRT_SHIM(IWebView5)->put_XYFocusLeft(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IWebView5<D>::XYFocusRight() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(WINRT_SHIM(IWebView5)->get_XYFocusRight(put_abi(value)));
    return value;
}

template <typename D> void impl_IWebView5<D>::XYFocusRight(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(WINRT_SHIM(IWebView5)->put_XYFocusRight(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IWebView5<D>::XYFocusUp() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(WINRT_SHIM(IWebView5)->get_XYFocusUp(put_abi(value)));
    return value;
}

template <typename D> void impl_IWebView5<D>::XYFocusUp(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(WINRT_SHIM(IWebView5)->put_XYFocusUp(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IWebView5<D>::XYFocusDown() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(WINRT_SHIM(IWebView5)->get_XYFocusDown(put_abi(value)));
    return value;
}

template <typename D> void impl_IWebView5<D>::XYFocusDown(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(WINRT_SHIM(IWebView5)->put_XYFocusDown(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics5<D>::XYFocusLeftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics5)->get_XYFocusLeftProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics5<D>::XYFocusRightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics5)->get_XYFocusRightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics5<D>::XYFocusUpProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics5)->get_XYFocusUpProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics5<D>::XYFocusDownProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewStatics5)->get_XYFocusDownProperty(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IWebViewBrush<D>::SourceName() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IWebViewBrush)->get_SourceName(put_abi(value)));
    return value;
}

template <typename D> void impl_IWebViewBrush<D>::SourceName(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IWebViewBrush)->put_SourceName(get_abi(value)));
}

template <typename D> void impl_IWebViewBrush<D>::Redraw() const
{
    check_hresult(WINRT_SHIM(IWebViewBrush)->abi_Redraw());
}

template <typename D> void impl_IWebViewBrush<D>::SetSource(const Windows::UI::Xaml::Controls::WebView & source) const
{
    check_hresult(WINRT_SHIM(IWebViewBrush)->abi_SetSource(get_abi(source)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewBrushStatics<D>::SourceNameProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWebViewBrushStatics)->get_SourceNameProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarSeparatorStatics<D>::IsCompactProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarSeparatorStatics)->get_IsCompactProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AppBarSeparator impl_IAppBarSeparatorFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::AppBarSeparator instance { nullptr };
    check_hresult(WINRT_SHIM(IAppBarSeparatorFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarSeparatorStatics3<D>::IsInOverflowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarSeparatorStatics3)->get_IsInOverflowProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarSeparatorStatics3<D>::DynamicOverflowOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarSeparatorStatics3)->get_DynamicOverflowOrderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IBitmapIcon<D>::UriSource() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(WINRT_SHIM(IBitmapIcon)->get_UriSource(put_abi(value)));
    return value;
}

template <typename D> void impl_IBitmapIcon<D>::UriSource(const Windows::Foundation::Uri & value) const
{
    check_hresult(WINRT_SHIM(IBitmapIcon)->put_UriSource(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBitmapIconStatics<D>::UriSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IBitmapIconStatics)->get_UriSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::BitmapIcon impl_IBitmapIconFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::BitmapIcon instance { nullptr };
    check_hresult(WINRT_SHIM(IBitmapIconFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IReference<Windows::Foundation::DateTime> impl_ICalendarDatePicker<D>::Date() const
{
    Windows::Foundation::IReference<Windows::Foundation::DateTime> value;
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_Date(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::Date(const optional<Windows::Foundation::DateTime> & value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_Date(get_abi(value)));
}

template <typename D> bool impl_ICalendarDatePicker<D>::IsCalendarOpen() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_IsCalendarOpen(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::IsCalendarOpen(bool value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_IsCalendarOpen(value));
}

template <typename D> hstring impl_ICalendarDatePicker<D>::DateFormat() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_DateFormat(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::DateFormat(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_DateFormat(get_abi(value)));
}

template <typename D> hstring impl_ICalendarDatePicker<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_PlaceholderText(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::PlaceholderText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_PlaceholderText(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable impl_ICalendarDatePicker<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_ICalendarDatePicker<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_ICalendarDatePicker<D>::CalendarViewStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_CalendarViewStyle(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::CalendarViewStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_CalendarViewStyle(get_abi(value)));
}

template <typename D> Windows::Foundation::DateTime impl_ICalendarDatePicker<D>::MinDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_MinDate(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::MinDate(const Windows::Foundation::DateTime & value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_MinDate(get_abi(value)));
}

template <typename D> Windows::Foundation::DateTime impl_ICalendarDatePicker<D>::MaxDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_MaxDate(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::MaxDate(const Windows::Foundation::DateTime & value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_MaxDate(get_abi(value)));
}

template <typename D> bool impl_ICalendarDatePicker<D>::IsTodayHighlighted() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_IsTodayHighlighted(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::IsTodayHighlighted(bool value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_IsTodayHighlighted(value));
}

template <typename D> Windows::UI::Xaml::Controls::CalendarViewDisplayMode impl_ICalendarDatePicker<D>::DisplayMode() const
{
    Windows::UI::Xaml::Controls::CalendarViewDisplayMode value {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_DisplayMode(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_DisplayMode(value));
}

template <typename D> Windows::Globalization::DayOfWeek impl_ICalendarDatePicker<D>::FirstDayOfWeek() const
{
    Windows::Globalization::DayOfWeek value {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_FirstDayOfWeek(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::FirstDayOfWeek(Windows::Globalization::DayOfWeek value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_FirstDayOfWeek(value));
}

template <typename D> hstring impl_ICalendarDatePicker<D>::DayOfWeekFormat() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_DayOfWeekFormat(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::DayOfWeekFormat(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_DayOfWeekFormat(get_abi(value)));
}

template <typename D> hstring impl_ICalendarDatePicker<D>::CalendarIdentifier() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_CalendarIdentifier(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::CalendarIdentifier(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_CalendarIdentifier(get_abi(value)));
}

template <typename D> bool impl_ICalendarDatePicker<D>::IsOutOfScopeEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_IsOutOfScopeEnabled(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::IsOutOfScopeEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_IsOutOfScopeEnabled(value));
}

template <typename D> bool impl_ICalendarDatePicker<D>::IsGroupLabelVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->get_IsGroupLabelVisible(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::IsGroupLabelVisible(bool value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->put_IsGroupLabelVisible(value));
}

template <typename D> event_token impl_ICalendarDatePicker<D>::CalendarViewDayItemChanging(const Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->add_CalendarViewDayItemChanging(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarDatePicker> impl_ICalendarDatePicker<D>::CalendarViewDayItemChanging(auto_revoke_t, const Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler & value) const
{
    return impl::make_event_revoker<D, ICalendarDatePicker>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker::remove_CalendarViewDayItemChanging, CalendarViewDayItemChanging(value));
}

template <typename D> void impl_ICalendarDatePicker<D>::CalendarViewDayItemChanging(event_token token) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->remove_CalendarViewDayItemChanging(token));
}

template <typename D> event_token impl_ICalendarDatePicker<D>::DateChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarDatePicker, Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->add_DateChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarDatePicker> impl_ICalendarDatePicker<D>::DateChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarDatePicker, Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ICalendarDatePicker>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker::remove_DateChanged, DateChanged(value));
}

template <typename D> void impl_ICalendarDatePicker<D>::DateChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->remove_DateChanged(token));
}

template <typename D> event_token impl_ICalendarDatePicker<D>::Opened(const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->add_Opened(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarDatePicker> impl_ICalendarDatePicker<D>::Opened(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, ICalendarDatePicker>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker::remove_Opened, Opened(value));
}

template <typename D> void impl_ICalendarDatePicker<D>::Opened(event_token token) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->remove_Opened(token));
}

template <typename D> event_token impl_ICalendarDatePicker<D>::Closed(const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->add_Closed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarDatePicker> impl_ICalendarDatePicker<D>::Closed(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, ICalendarDatePicker>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker::remove_Closed, Closed(value));
}

template <typename D> void impl_ICalendarDatePicker<D>::Closed(event_token token) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->remove_Closed(token));
}

template <typename D> void impl_ICalendarDatePicker<D>::SetDisplayDate(const Windows::Foundation::DateTime & date) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->abi_SetDisplayDate(get_abi(date)));
}

template <typename D> void impl_ICalendarDatePicker<D>::SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker)->abi_SetYearDecadeDisplayDimensions(columns, rows));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::DateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_DateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::IsCalendarOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_IsCalendarOpenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::DateFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_DateFormatProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_PlaceholderTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::CalendarViewStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_CalendarViewStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::MinDateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_MinDateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::MaxDateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_MaxDateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::IsTodayHighlightedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_IsTodayHighlightedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::DisplayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_DisplayModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::FirstDayOfWeekProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_FirstDayOfWeekProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::DayOfWeekFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_DayOfWeekFormatProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::CalendarIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_CalendarIdentifierProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::IsOutOfScopeEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_IsOutOfScopeEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::IsGroupLabelVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics)->get_IsGroupLabelVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CalendarDatePicker impl_ICalendarDatePickerFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CalendarDatePicker instance { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_ICalendarDatePicker2<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(WINRT_SHIM(ICalendarDatePicker2)->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker2<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(WINRT_SHIM(ICalendarDatePicker2)->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics2<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarDatePickerStatics2)->get_LightDismissOverlayModeProperty(put_abi(value)));
    return value;
}

template <typename D> hstring impl_ICalendarView<D>::CalendarIdentifier() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ICalendarView)->get_CalendarIdentifier(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarIdentifier(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_CalendarIdentifier(get_abi(value)));
}

template <typename D> hstring impl_ICalendarView<D>::DayOfWeekFormat() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ICalendarView)->get_DayOfWeekFormat(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DayOfWeekFormat(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_DayOfWeekFormat(get_abi(value)));
}

template <typename D> bool impl_ICalendarView<D>::IsGroupLabelVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_IsGroupLabelVisible(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::IsGroupLabelVisible(bool value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_IsGroupLabelVisible(value));
}

template <typename D> Windows::UI::Xaml::Controls::CalendarViewDisplayMode impl_ICalendarView<D>::DisplayMode() const
{
    Windows::UI::Xaml::Controls::CalendarViewDisplayMode value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_DisplayMode(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_DisplayMode(value));
}

template <typename D> Windows::Globalization::DayOfWeek impl_ICalendarView<D>::FirstDayOfWeek() const
{
    Windows::Globalization::DayOfWeek value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_FirstDayOfWeek(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstDayOfWeek(Windows::Globalization::DayOfWeek value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_FirstDayOfWeek(value));
}

template <typename D> bool impl_ICalendarView<D>::IsOutOfScopeEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_IsOutOfScopeEnabled(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::IsOutOfScopeEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_IsOutOfScopeEnabled(value));
}

template <typename D> bool impl_ICalendarView<D>::IsTodayHighlighted() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_IsTodayHighlighted(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::IsTodayHighlighted(bool value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_IsTodayHighlighted(value));
}

template <typename D> Windows::Foundation::DateTime impl_ICalendarView<D>::MaxDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_MaxDate(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MaxDate(const Windows::Foundation::DateTime & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_MaxDate(get_abi(value)));
}

template <typename D> Windows::Foundation::DateTime impl_ICalendarView<D>::MinDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_MinDate(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MinDate(const Windows::Foundation::DateTime & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_MinDate(get_abi(value)));
}

template <typename D> int32_t impl_ICalendarView<D>::NumberOfWeeksInView() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_NumberOfWeeksInView(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::NumberOfWeeksInView(int32_t value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_NumberOfWeeksInView(value));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::DateTime> impl_ICalendarView<D>::SelectedDates() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::DateTime> value;
    check_hresult(WINRT_SHIM(ICalendarView)->get_SelectedDates(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CalendarViewSelectionMode impl_ICalendarView<D>::SelectionMode() const
{
    Windows::UI::Xaml::Controls::CalendarViewSelectionMode value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_SelectionMode(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::SelectionMode(Windows::UI::Xaml::Controls::CalendarViewSelectionMode value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_SelectionMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::CalendarViewTemplateSettings impl_ICalendarView<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::CalendarViewTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::FocusBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_FocusBorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FocusBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_FocusBorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::SelectedHoverBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_SelectedHoverBorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::SelectedHoverBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_SelectedHoverBorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::SelectedPressedBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_SelectedPressedBorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::SelectedPressedBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_SelectedPressedBorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::SelectedBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_SelectedBorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::SelectedBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_SelectedBorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::HoverBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_HoverBorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::HoverBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_HoverBorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::PressedBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_PressedBorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::PressedBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_PressedBorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::CalendarItemBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_CalendarItemBorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarItemBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_CalendarItemBorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::OutOfScopeBackground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_OutOfScopeBackground(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::OutOfScopeBackground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_OutOfScopeBackground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::CalendarItemBackground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_CalendarItemBackground(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarItemBackground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_CalendarItemBackground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::PressedForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_PressedForeground(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::PressedForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_PressedForeground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::TodayForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_TodayForeground(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::TodayForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_TodayForeground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::BlackoutForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_BlackoutForeground(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::BlackoutForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_BlackoutForeground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::SelectedForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_SelectedForeground(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::SelectedForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_SelectedForeground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::OutOfScopeForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_OutOfScopeForeground(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::OutOfScopeForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_OutOfScopeForeground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::CalendarItemForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_CalendarItemForeground(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarItemForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_CalendarItemForeground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_ICalendarView<D>::DayItemFontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_DayItemFontFamily(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DayItemFontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_DayItemFontFamily(get_abi(value)));
}

template <typename D> double impl_ICalendarView<D>::DayItemFontSize() const
{
    double value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_DayItemFontSize(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DayItemFontSize(double value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_DayItemFontSize(value));
}

template <typename D> Windows::UI::Text::FontStyle impl_ICalendarView<D>::DayItemFontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_DayItemFontStyle(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DayItemFontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_DayItemFontStyle(value));
}

template <typename D> Windows::UI::Text::FontWeight impl_ICalendarView<D>::DayItemFontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_DayItemFontWeight(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DayItemFontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_DayItemFontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_ICalendarView<D>::TodayFontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_TodayFontWeight(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::TodayFontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_TodayFontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_ICalendarView<D>::FirstOfMonthLabelFontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_FirstOfMonthLabelFontFamily(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfMonthLabelFontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_FirstOfMonthLabelFontFamily(get_abi(value)));
}

template <typename D> double impl_ICalendarView<D>::FirstOfMonthLabelFontSize() const
{
    double value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_FirstOfMonthLabelFontSize(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfMonthLabelFontSize(double value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_FirstOfMonthLabelFontSize(value));
}

template <typename D> Windows::UI::Text::FontStyle impl_ICalendarView<D>::FirstOfMonthLabelFontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_FirstOfMonthLabelFontStyle(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfMonthLabelFontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_FirstOfMonthLabelFontStyle(value));
}

template <typename D> Windows::UI::Text::FontWeight impl_ICalendarView<D>::FirstOfMonthLabelFontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_FirstOfMonthLabelFontWeight(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfMonthLabelFontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_FirstOfMonthLabelFontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_ICalendarView<D>::MonthYearItemFontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_MonthYearItemFontFamily(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MonthYearItemFontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_MonthYearItemFontFamily(get_abi(value)));
}

template <typename D> double impl_ICalendarView<D>::MonthYearItemFontSize() const
{
    double value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_MonthYearItemFontSize(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MonthYearItemFontSize(double value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_MonthYearItemFontSize(value));
}

template <typename D> Windows::UI::Text::FontStyle impl_ICalendarView<D>::MonthYearItemFontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_MonthYearItemFontStyle(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MonthYearItemFontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_MonthYearItemFontStyle(value));
}

template <typename D> Windows::UI::Text::FontWeight impl_ICalendarView<D>::MonthYearItemFontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_MonthYearItemFontWeight(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MonthYearItemFontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_MonthYearItemFontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_ICalendarView<D>::FirstOfYearDecadeLabelFontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_FirstOfYearDecadeLabelFontFamily(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfYearDecadeLabelFontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_FirstOfYearDecadeLabelFontFamily(get_abi(value)));
}

template <typename D> double impl_ICalendarView<D>::FirstOfYearDecadeLabelFontSize() const
{
    double value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_FirstOfYearDecadeLabelFontSize(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfYearDecadeLabelFontSize(double value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_FirstOfYearDecadeLabelFontSize(value));
}

template <typename D> Windows::UI::Text::FontStyle impl_ICalendarView<D>::FirstOfYearDecadeLabelFontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_FirstOfYearDecadeLabelFontStyle(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfYearDecadeLabelFontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_FirstOfYearDecadeLabelFontStyle(value));
}

template <typename D> Windows::UI::Text::FontWeight impl_ICalendarView<D>::FirstOfYearDecadeLabelFontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_FirstOfYearDecadeLabelFontWeight(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfYearDecadeLabelFontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_FirstOfYearDecadeLabelFontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_ICalendarView<D>::HorizontalDayItemAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_HorizontalDayItemAlignment(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::HorizontalDayItemAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_HorizontalDayItemAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_ICalendarView<D>::VerticalDayItemAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_VerticalDayItemAlignment(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::VerticalDayItemAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_VerticalDayItemAlignment(value));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_ICalendarView<D>::HorizontalFirstOfMonthLabelAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_HorizontalFirstOfMonthLabelAlignment(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::HorizontalFirstOfMonthLabelAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_HorizontalFirstOfMonthLabelAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_ICalendarView<D>::VerticalFirstOfMonthLabelAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_VerticalFirstOfMonthLabelAlignment(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::VerticalFirstOfMonthLabelAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_VerticalFirstOfMonthLabelAlignment(value));
}

template <typename D> Windows::UI::Xaml::Thickness impl_ICalendarView<D>::CalendarItemBorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(ICalendarView)->get_CalendarItemBorderThickness(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarItemBorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_CalendarItemBorderThickness(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_ICalendarView<D>::CalendarViewDayItemStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarView)->get_CalendarViewDayItemStyle(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarViewDayItemStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->put_CalendarViewDayItemStyle(get_abi(value)));
}

template <typename D> event_token impl_ICalendarView<D>::CalendarViewDayItemChanging(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ICalendarView)->add_CalendarViewDayItemChanging(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarView> impl_ICalendarView<D>::CalendarViewDayItemChanging(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, ICalendarView>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarView::remove_CalendarViewDayItemChanging, CalendarViewDayItemChanging(value));
}

template <typename D> void impl_ICalendarView<D>::CalendarViewDayItemChanging(event_token token) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->remove_CalendarViewDayItemChanging(token));
}

template <typename D> event_token impl_ICalendarView<D>::SelectedDatesChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ICalendarView)->add_SelectedDatesChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarView> impl_ICalendarView<D>::SelectedDatesChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ICalendarView>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarView::remove_SelectedDatesChanged, SelectedDatesChanged(value));
}

template <typename D> void impl_ICalendarView<D>::SelectedDatesChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->remove_SelectedDatesChanged(token));
}

template <typename D> void impl_ICalendarView<D>::SetDisplayDate(const Windows::Foundation::DateTime & date) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->abi_SetDisplayDate(get_abi(date)));
}

template <typename D> void impl_ICalendarView<D>::SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) const
{
    check_hresult(WINRT_SHIM(ICalendarView)->abi_SetYearDecadeDisplayDimensions(columns, rows));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_CalendarIdentifierProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DayOfWeekFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_DayOfWeekFormatProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::IsGroupLabelVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_IsGroupLabelVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DisplayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_DisplayModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstDayOfWeekProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_FirstDayOfWeekProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::IsOutOfScopeEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_IsOutOfScopeEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::IsTodayHighlightedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_IsTodayHighlightedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MaxDateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_MaxDateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MinDateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_MinDateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::NumberOfWeeksInViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_NumberOfWeeksInViewProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectedDatesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_SelectedDatesProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectionModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_SelectionModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::TemplateSettingsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_TemplateSettingsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FocusBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_FocusBorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectedHoverBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_SelectedHoverBorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectedPressedBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_SelectedPressedBorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectedBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_SelectedBorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::HoverBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_HoverBorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::PressedBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_PressedBorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarItemBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_CalendarItemBorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::OutOfScopeBackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_OutOfScopeBackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarItemBackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_CalendarItemBackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::PressedForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_PressedForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::TodayForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_TodayForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::BlackoutForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_BlackoutForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectedForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_SelectedForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::OutOfScopeForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_OutOfScopeForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarItemForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_CalendarItemForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DayItemFontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_DayItemFontFamilyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DayItemFontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_DayItemFontSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DayItemFontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_DayItemFontStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DayItemFontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_DayItemFontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::TodayFontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_TodayFontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfMonthLabelFontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_FirstOfMonthLabelFontFamilyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfMonthLabelFontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_FirstOfMonthLabelFontSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfMonthLabelFontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_FirstOfMonthLabelFontStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfMonthLabelFontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_FirstOfMonthLabelFontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MonthYearItemFontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_MonthYearItemFontFamilyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MonthYearItemFontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_MonthYearItemFontSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MonthYearItemFontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_MonthYearItemFontStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MonthYearItemFontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_MonthYearItemFontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfYearDecadeLabelFontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_FirstOfYearDecadeLabelFontFamilyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfYearDecadeLabelFontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_FirstOfYearDecadeLabelFontSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfYearDecadeLabelFontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_FirstOfYearDecadeLabelFontStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfYearDecadeLabelFontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_FirstOfYearDecadeLabelFontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::HorizontalDayItemAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_HorizontalDayItemAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::VerticalDayItemAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_VerticalDayItemAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::HorizontalFirstOfMonthLabelAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_HorizontalFirstOfMonthLabelAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::VerticalFirstOfMonthLabelAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_VerticalFirstOfMonthLabelAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarItemBorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_CalendarItemBorderThicknessProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarViewDayItemStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewStatics)->get_CalendarViewDayItemStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CalendarView impl_ICalendarViewFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CalendarView instance { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_ICalendarViewDayItem<D>::IsBlackout() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICalendarViewDayItem)->get_IsBlackout(&value));
    return value;
}

template <typename D> void impl_ICalendarViewDayItem<D>::IsBlackout(bool value) const
{
    check_hresult(WINRT_SHIM(ICalendarViewDayItem)->put_IsBlackout(value));
}

template <typename D> Windows::Foundation::DateTime impl_ICalendarViewDayItem<D>::Date() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(ICalendarViewDayItem)->get_Date(put_abi(value)));
    return value;
}

template <typename D> void impl_ICalendarViewDayItem<D>::SetDensityColors(iterable<Windows::UI::Color> colors) const
{
    check_hresult(WINRT_SHIM(ICalendarViewDayItem)->abi_SetDensityColors(get_abi(colors)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewDayItemStatics<D>::IsBlackoutProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewDayItemStatics)->get_IsBlackoutProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewDayItemStatics<D>::DateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewDayItemStatics)->get_DateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CalendarViewDayItem impl_ICalendarViewDayItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CalendarViewDayItem instance { nullptr };
    check_hresult(WINRT_SHIM(ICalendarViewDayItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IInspectable impl_IDatePicker<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IDatePicker)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IDatePicker<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IDatePicker)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> hstring impl_IDatePicker<D>::CalendarIdentifier() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IDatePicker)->get_CalendarIdentifier(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::CalendarIdentifier(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_CalendarIdentifier(get_abi(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePicker<D>::Date() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(IDatePicker)->get_Date(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::Date(const Windows::Foundation::DateTime & value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_Date(get_abi(value)));
}

template <typename D> bool impl_IDatePicker<D>::DayVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IDatePicker)->get_DayVisible(&value));
    return value;
}

template <typename D> void impl_IDatePicker<D>::DayVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_DayVisible(value));
}

template <typename D> bool impl_IDatePicker<D>::MonthVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IDatePicker)->get_MonthVisible(&value));
    return value;
}

template <typename D> void impl_IDatePicker<D>::MonthVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_MonthVisible(value));
}

template <typename D> bool impl_IDatePicker<D>::YearVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IDatePicker)->get_YearVisible(&value));
    return value;
}

template <typename D> void impl_IDatePicker<D>::YearVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_YearVisible(value));
}

template <typename D> hstring impl_IDatePicker<D>::DayFormat() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IDatePicker)->get_DayFormat(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::DayFormat(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_DayFormat(get_abi(value)));
}

template <typename D> hstring impl_IDatePicker<D>::MonthFormat() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IDatePicker)->get_MonthFormat(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::MonthFormat(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_MonthFormat(get_abi(value)));
}

template <typename D> hstring impl_IDatePicker<D>::YearFormat() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IDatePicker)->get_YearFormat(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::YearFormat(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_YearFormat(get_abi(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePicker<D>::MinYear() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(IDatePicker)->get_MinYear(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::MinYear(const Windows::Foundation::DateTime & value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_MinYear(get_abi(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePicker<D>::MaxYear() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(IDatePicker)->get_MaxYear(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::MaxYear(const Windows::Foundation::DateTime & value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_MaxYear(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IDatePicker<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(WINRT_SHIM(IDatePicker)->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IDatePicker<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->put_Orientation(value));
}

template <typename D> event_token impl_IDatePicker<D>::DateChanged(const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IDatePicker)->add_DateChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IDatePicker> impl_IDatePicker<D>::DateChanged(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IDatePicker>(this, &ABI::Windows::UI::Xaml::Controls::IDatePicker::remove_DateChanged, DateChanged(value));
}

template <typename D> void impl_IDatePicker<D>::DateChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IDatePicker)->remove_DateChanged(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::CalendarIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_CalendarIdentifierProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::DateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_DateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::DayVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_DayVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::MonthVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_MonthVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::YearVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_YearVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::DayFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_DayFormatProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::MonthFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_MonthFormatProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::YearFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_YearFormatProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::MinYearProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_MinYearProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::MaxYearProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_MaxYearProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::DatePicker impl_IDatePickerFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::DatePicker instance { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_IDatePicker2<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(WINRT_SHIM(IDatePicker2)->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_IDatePicker2<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(WINRT_SHIM(IDatePicker2)->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics2<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerStatics2)->get_LightDismissOverlayModeProperty(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IFontIcon<D>::Glyph() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IFontIcon)->get_Glyph(put_abi(value)));
    return value;
}

template <typename D> void impl_IFontIcon<D>::Glyph(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IFontIcon)->put_Glyph(get_abi(value)));
}

template <typename D> double impl_IFontIcon<D>::FontSize() const
{
    double value {};
    check_hresult(WINRT_SHIM(IFontIcon)->get_FontSize(&value));
    return value;
}

template <typename D> void impl_IFontIcon<D>::FontSize(double value) const
{
    check_hresult(WINRT_SHIM(IFontIcon)->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_IFontIcon<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(WINRT_SHIM(IFontIcon)->get_FontFamily(put_abi(value)));
    return value;
}

template <typename D> void impl_IFontIcon<D>::FontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(WINRT_SHIM(IFontIcon)->put_FontFamily(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_IFontIcon<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(WINRT_SHIM(IFontIcon)->get_FontWeight(put_abi(value)));
    return value;
}

template <typename D> void impl_IFontIcon<D>::FontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(WINRT_SHIM(IFontIcon)->put_FontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontStyle impl_IFontIcon<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(WINRT_SHIM(IFontIcon)->get_FontStyle(&value));
    return value;
}

template <typename D> void impl_IFontIcon<D>::FontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(WINRT_SHIM(IFontIcon)->put_FontStyle(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics<D>::GlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFontIconStatics)->get_GlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFontIconStatics)->get_FontSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFontIconStatics)->get_FontFamilyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFontIconStatics)->get_FontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFontIconStatics)->get_FontStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::FontIcon impl_IFontIconFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::FontIcon instance { nullptr };
    check_hresult(WINRT_SHIM(IFontIconFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_IFontIcon2<D>::IsTextScaleFactorEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IFontIcon2)->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void impl_IFontIcon2<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IFontIcon2)->put_IsTextScaleFactorEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics2<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFontIconStatics2)->get_IsTextScaleFactorEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IFontIcon3<D>::MirroredWhenRightToLeft() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IFontIcon3)->get_MirroredWhenRightToLeft(&value));
    return value;
}

template <typename D> void impl_IFontIcon3<D>::MirroredWhenRightToLeft(bool value) const
{
    check_hresult(WINRT_SHIM(IFontIcon3)->put_MirroredWhenRightToLeft(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics3<D>::MirroredWhenRightToLeftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFontIconStatics3)->get_MirroredWhenRightToLeftProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IHub<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IHub)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IHub<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IHub)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IHub<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IHub)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IHub<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IHub)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IHub<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(WINRT_SHIM(IHub)->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IHub<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(WINRT_SHIM(IHub)->put_Orientation(value));
}

template <typename D> int32_t impl_IHub<D>::DefaultSectionIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IHub)->get_DefaultSectionIndex(&value));
    return value;
}

template <typename D> void impl_IHub<D>::DefaultSectionIndex(int32_t value) const
{
    check_hresult(WINRT_SHIM(IHub)->put_DefaultSectionIndex(value));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> impl_IHub<D>::Sections() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> value;
    check_hresult(WINRT_SHIM(IHub)->get_Sections(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> impl_IHub<D>::SectionsInView() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> value;
    check_hresult(WINRT_SHIM(IHub)->get_SectionsInView(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> impl_IHub<D>::SectionHeaders() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value;
    check_hresult(WINRT_SHIM(IHub)->get_SectionHeaders(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IHub<D>::SectionHeaderClick(const Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IHub)->add_SectionHeaderClick(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IHub> impl_IHub<D>::SectionHeaderClick(auto_revoke_t, const Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler & value) const
{
    return impl::make_event_revoker<D, IHub>(this, &ABI::Windows::UI::Xaml::Controls::IHub::remove_SectionHeaderClick, SectionHeaderClick(value));
}

template <typename D> void impl_IHub<D>::SectionHeaderClick(event_token token) const
{
    check_hresult(WINRT_SHIM(IHub)->remove_SectionHeaderClick(token));
}

template <typename D> event_token impl_IHub<D>::SectionsInViewChanged(const Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IHub)->add_SectionsInViewChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IHub> impl_IHub<D>::SectionsInViewChanged(auto_revoke_t, const Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, IHub>(this, &ABI::Windows::UI::Xaml::Controls::IHub::remove_SectionsInViewChanged, SectionsInViewChanged(value));
}

template <typename D> void impl_IHub<D>::SectionsInViewChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IHub)->remove_SectionsInViewChanged(token));
}

template <typename D> void impl_IHub<D>::ScrollToSection(const Windows::UI::Xaml::Controls::HubSection & section) const
{
    check_hresult(WINRT_SHIM(IHub)->abi_ScrollToSection(get_abi(section)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubStatics)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::DefaultSectionIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubStatics)->get_DefaultSectionIndexProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::SemanticZoomOwnerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubStatics)->get_SemanticZoomOwnerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::IsActiveViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubStatics)->get_IsActiveViewProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::IsZoomedInViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubStatics)->get_IsZoomedInViewProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Hub impl_IHubFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Hub instance { nullptr };
    check_hresult(WINRT_SHIM(IHubFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IInspectable impl_IHubSection<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IHubSection)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IHubSection<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IHubSection)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IHubSection<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IHubSection)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IHubSection<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IHubSection)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IHubSection<D>::ContentTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IHubSection)->get_ContentTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IHubSection<D>::ContentTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IHubSection)->put_ContentTemplate(get_abi(value)));
}

template <typename D> bool impl_IHubSection<D>::IsHeaderInteractive() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IHubSection)->get_IsHeaderInteractive(&value));
    return value;
}

template <typename D> void impl_IHubSection<D>::IsHeaderInteractive(bool value) const
{
    check_hresult(WINRT_SHIM(IHubSection)->put_IsHeaderInteractive(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubSectionStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubSectionStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubSectionStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubSectionStatics)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubSectionStatics<D>::ContentTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubSectionStatics)->get_ContentTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubSectionStatics<D>::IsHeaderInteractiveProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IHubSectionStatics)->get_IsHeaderInteractiveProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::HubSection impl_IHubSectionFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::HubSection instance { nullptr };
    check_hresult(WINRT_SHIM(IHubSectionFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Thickness impl_IItemsStackPanel<D>::GroupPadding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel)->get_GroupPadding(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsStackPanel<D>::GroupPadding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IItemsStackPanel)->put_GroupPadding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IItemsStackPanel<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel)->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IItemsStackPanel<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(WINRT_SHIM(IItemsStackPanel)->put_Orientation(value));
}

template <typename D> int32_t impl_IItemsStackPanel<D>::FirstCacheIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel)->get_FirstCacheIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsStackPanel<D>::FirstVisibleIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel)->get_FirstVisibleIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsStackPanel<D>::LastVisibleIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel)->get_LastVisibleIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsStackPanel<D>::LastCacheIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel)->get_LastCacheIndex(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PanelScrollingDirection impl_IItemsStackPanel<D>::ScrollingDirection() const
{
    Windows::UI::Xaml::Controls::PanelScrollingDirection value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel)->get_ScrollingDirection(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement impl_IItemsStackPanel<D>::GroupHeaderPlacement() const
{
    Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel)->get_GroupHeaderPlacement(&value));
    return value;
}

template <typename D> void impl_IItemsStackPanel<D>::GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) const
{
    check_hresult(WINRT_SHIM(IItemsStackPanel)->put_GroupHeaderPlacement(value));
}

template <typename D> Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode impl_IItemsStackPanel<D>::ItemsUpdatingScrollMode() const
{
    Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel)->get_ItemsUpdatingScrollMode(&value));
    return value;
}

template <typename D> void impl_IItemsStackPanel<D>::ItemsUpdatingScrollMode(Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode value) const
{
    check_hresult(WINRT_SHIM(IItemsStackPanel)->put_ItemsUpdatingScrollMode(value));
}

template <typename D> double impl_IItemsStackPanel<D>::CacheLength() const
{
    double value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel)->get_CacheLength(&value));
    return value;
}

template <typename D> void impl_IItemsStackPanel<D>::CacheLength(double value) const
{
    check_hresult(WINRT_SHIM(IItemsStackPanel)->put_CacheLength(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsStackPanelStatics<D>::GroupPaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsStackPanelStatics)->get_GroupPaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsStackPanelStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsStackPanelStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsStackPanelStatics<D>::GroupHeaderPlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsStackPanelStatics)->get_GroupHeaderPlacementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsStackPanelStatics<D>::CacheLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsStackPanelStatics)->get_CacheLengthProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IItemsStackPanel2<D>::AreStickyGroupHeadersEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IItemsStackPanel2)->get_AreStickyGroupHeadersEnabled(&value));
    return value;
}

template <typename D> void impl_IItemsStackPanel2<D>::AreStickyGroupHeadersEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IItemsStackPanel2)->put_AreStickyGroupHeadersEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsStackPanelStatics2<D>::AreStickyGroupHeadersEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsStackPanelStatics2)->get_AreStickyGroupHeadersEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Thickness impl_IItemsWrapGrid<D>::GroupPadding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_GroupPadding(put_abi(value)));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::GroupPadding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->put_GroupPadding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IItemsWrapGrid<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->put_Orientation(value));
}

template <typename D> int32_t impl_IItemsWrapGrid<D>::MaximumRowsOrColumns() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_MaximumRowsOrColumns(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::MaximumRowsOrColumns(int32_t value) const
{
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->put_MaximumRowsOrColumns(value));
}

template <typename D> double impl_IItemsWrapGrid<D>::ItemWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_ItemWidth(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::ItemWidth(double value) const
{
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->put_ItemWidth(value));
}

template <typename D> double impl_IItemsWrapGrid<D>::ItemHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_ItemHeight(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::ItemHeight(double value) const
{
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->put_ItemHeight(value));
}

template <typename D> int32_t impl_IItemsWrapGrid<D>::FirstCacheIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_FirstCacheIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsWrapGrid<D>::FirstVisibleIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_FirstVisibleIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsWrapGrid<D>::LastVisibleIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_LastVisibleIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsWrapGrid<D>::LastCacheIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_LastCacheIndex(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PanelScrollingDirection impl_IItemsWrapGrid<D>::ScrollingDirection() const
{
    Windows::UI::Xaml::Controls::PanelScrollingDirection value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_ScrollingDirection(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement impl_IItemsWrapGrid<D>::GroupHeaderPlacement() const
{
    Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_GroupHeaderPlacement(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) const
{
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->put_GroupHeaderPlacement(value));
}

template <typename D> double impl_IItemsWrapGrid<D>::CacheLength() const
{
    double value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->get_CacheLength(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::CacheLength(double value) const
{
    check_hresult(WINRT_SHIM(IItemsWrapGrid)->put_CacheLength(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::GroupPaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsWrapGridStatics)->get_GroupPaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsWrapGridStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::MaximumRowsOrColumnsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsWrapGridStatics)->get_MaximumRowsOrColumnsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::ItemWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsWrapGridStatics)->get_ItemWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::ItemHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsWrapGridStatics)->get_ItemHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::GroupHeaderPlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsWrapGridStatics)->get_GroupHeaderPlacementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::CacheLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsWrapGridStatics)->get_CacheLengthProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IItemsWrapGrid2<D>::AreStickyGroupHeadersEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IItemsWrapGrid2)->get_AreStickyGroupHeadersEnabled(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid2<D>::AreStickyGroupHeadersEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IItemsWrapGrid2)->put_AreStickyGroupHeadersEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics2<D>::AreStickyGroupHeadersEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IItemsWrapGridStatics2)->get_AreStickyGroupHeadersEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Media::Playback::IMediaPlaybackSource impl_IMediaPlayerElement<D>::Source() const
{
    Windows::Media::Playback::IMediaPlaybackSource value;
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->get_Source(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::Source(const Windows::Media::Playback::IMediaPlaybackSource & value) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->put_Source(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::MediaTransportControls impl_IMediaPlayerElement<D>::TransportControls() const
{
    Windows::UI::Xaml::Controls::MediaTransportControls value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->get_TransportControls(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::TransportControls(const Windows::UI::Xaml::Controls::MediaTransportControls & value) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->put_TransportControls(get_abi(value)));
}

template <typename D> bool impl_IMediaPlayerElement<D>::AreTransportControlsEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->get_AreTransportControlsEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::AreTransportControlsEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->put_AreTransportControlsEnabled(value));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource impl_IMediaPlayerElement<D>::PosterSource() const
{
    Windows::UI::Xaml::Media::ImageSource value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->get_PosterSource(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::PosterSource(const Windows::UI::Xaml::Media::ImageSource & value) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->put_PosterSource(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_IMediaPlayerElement<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->get_Stretch(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->put_Stretch(value));
}

template <typename D> bool impl_IMediaPlayerElement<D>::AutoPlay() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->get_AutoPlay(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::AutoPlay(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->put_AutoPlay(value));
}

template <typename D> bool impl_IMediaPlayerElement<D>::IsFullWindow() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->get_IsFullWindow(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::IsFullWindow(bool value) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->put_IsFullWindow(value));
}

template <typename D> Windows::Media::Playback::MediaPlayer impl_IMediaPlayerElement<D>::MediaPlayer() const
{
    Windows::Media::Playback::MediaPlayer value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->get_MediaPlayer(put_abi(value)));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::SetMediaPlayer(const Windows::Media::Playback::MediaPlayer & mediaPlayer) const
{
    check_hresult(WINRT_SHIM(IMediaPlayerElement)->abi_SetMediaPlayer(get_abi(mediaPlayer)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElementStatics)->get_SourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::AreTransportControlsEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElementStatics)->get_AreTransportControlsEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::PosterSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElementStatics)->get_PosterSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElementStatics)->get_StretchProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::AutoPlayProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElementStatics)->get_AutoPlayProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::IsFullWindowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElementStatics)->get_IsFullWindowProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::MediaPlayerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElementStatics)->get_MediaPlayerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MediaPlayerElement impl_IMediaPlayerElementFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MediaPlayerElement instance { nullptr };
    check_hresult(WINRT_SHIM(IMediaPlayerElementFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Media::Geometry impl_IPathIcon<D>::Data() const
{
    Windows::UI::Xaml::Media::Geometry value { nullptr };
    check_hresult(WINRT_SHIM(IPathIcon)->get_Data(put_abi(value)));
    return value;
}

template <typename D> void impl_IPathIcon<D>::Data(const Windows::UI::Xaml::Media::Geometry & value) const
{
    check_hresult(WINRT_SHIM(IPathIcon)->put_Data(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPathIconStatics<D>::DataProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPathIconStatics)->get_DataProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PathIcon impl_IPathIconFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::PathIcon instance { nullptr };
    check_hresult(WINRT_SHIM(IPathIconFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_IScrollContentPresenter<D>::CanVerticallyScroll() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->get_CanVerticallyScroll(&value));
    return value;
}

template <typename D> void impl_IScrollContentPresenter<D>::CanVerticallyScroll(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->put_CanVerticallyScroll(value));
}

template <typename D> bool impl_IScrollContentPresenter<D>::CanHorizontallyScroll() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->get_CanHorizontallyScroll(&value));
    return value;
}

template <typename D> void impl_IScrollContentPresenter<D>::CanHorizontallyScroll(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->put_CanHorizontallyScroll(value));
}

template <typename D> double impl_IScrollContentPresenter<D>::ExtentWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->get_ExtentWidth(&value));
    return value;
}

template <typename D> double impl_IScrollContentPresenter<D>::ExtentHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->get_ExtentHeight(&value));
    return value;
}

template <typename D> double impl_IScrollContentPresenter<D>::ViewportWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->get_ViewportWidth(&value));
    return value;
}

template <typename D> double impl_IScrollContentPresenter<D>::ViewportHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->get_ViewportHeight(&value));
    return value;
}

template <typename D> double impl_IScrollContentPresenter<D>::HorizontalOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->get_HorizontalOffset(&value));
    return value;
}

template <typename D> double impl_IScrollContentPresenter<D>::VerticalOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->get_VerticalOffset(&value));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IScrollContentPresenter<D>::ScrollOwner() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->get_ScrollOwner(put_abi(value)));
    return value;
}

template <typename D> void impl_IScrollContentPresenter<D>::ScrollOwner(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->put_ScrollOwner(get_abi(value)));
}

template <typename D> void impl_IScrollContentPresenter<D>::LineUp() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_LineUp());
}

template <typename D> void impl_IScrollContentPresenter<D>::LineDown() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_LineDown());
}

template <typename D> void impl_IScrollContentPresenter<D>::LineLeft() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_LineLeft());
}

template <typename D> void impl_IScrollContentPresenter<D>::LineRight() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_LineRight());
}

template <typename D> void impl_IScrollContentPresenter<D>::PageUp() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_PageUp());
}

template <typename D> void impl_IScrollContentPresenter<D>::PageDown() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_PageDown());
}

template <typename D> void impl_IScrollContentPresenter<D>::PageLeft() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_PageLeft());
}

template <typename D> void impl_IScrollContentPresenter<D>::PageRight() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_PageRight());
}

template <typename D> void impl_IScrollContentPresenter<D>::MouseWheelUp() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_MouseWheelUp());
}

template <typename D> void impl_IScrollContentPresenter<D>::MouseWheelDown() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_MouseWheelDown());
}

template <typename D> void impl_IScrollContentPresenter<D>::MouseWheelLeft() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_MouseWheelLeft());
}

template <typename D> void impl_IScrollContentPresenter<D>::MouseWheelRight() const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_MouseWheelRight());
}

template <typename D> void impl_IScrollContentPresenter<D>::SetHorizontalOffset(double offset) const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_SetHorizontalOffset(offset));
}

template <typename D> void impl_IScrollContentPresenter<D>::SetVerticalOffset(double offset) const
{
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_SetVerticalOffset(offset));
}

template <typename D> Windows::Foundation::Rect impl_IScrollContentPresenter<D>::MakeVisible(const Windows::UI::Xaml::UIElement & visual, const Windows::Foundation::Rect & rectangle) const
{
    Windows::Foundation::Rect returnValue {};
    check_hresult(WINRT_SHIM(IScrollContentPresenter)->abi_MakeVisible(get_abi(visual), get_abi(rectangle), put_abi(returnValue)));
    return returnValue;
}

template <typename D> bool impl_ISearchBox<D>::SearchHistoryEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISearchBox)->get_SearchHistoryEnabled(&value));
    return value;
}

template <typename D> void impl_ISearchBox<D>::SearchHistoryEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->put_SearchHistoryEnabled(value));
}

template <typename D> hstring impl_ISearchBox<D>::SearchHistoryContext() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISearchBox)->get_SearchHistoryContext(put_abi(value)));
    return value;
}

template <typename D> void impl_ISearchBox<D>::SearchHistoryContext(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->put_SearchHistoryContext(get_abi(value)));
}

template <typename D> hstring impl_ISearchBox<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISearchBox)->get_PlaceholderText(put_abi(value)));
    return value;
}

template <typename D> void impl_ISearchBox<D>::PlaceholderText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->put_PlaceholderText(get_abi(value)));
}

template <typename D> hstring impl_ISearchBox<D>::QueryText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ISearchBox)->get_QueryText(put_abi(value)));
    return value;
}

template <typename D> void impl_ISearchBox<D>::QueryText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->put_QueryText(get_abi(value)));
}

template <typename D> bool impl_ISearchBox<D>::FocusOnKeyboardInput() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISearchBox)->get_FocusOnKeyboardInput(&value));
    return value;
}

template <typename D> void impl_ISearchBox<D>::FocusOnKeyboardInput(bool value) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->put_FocusOnKeyboardInput(value));
}

template <typename D> bool impl_ISearchBox<D>::ChooseSuggestionOnEnter() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISearchBox)->get_ChooseSuggestionOnEnter(&value));
    return value;
}

template <typename D> void impl_ISearchBox<D>::ChooseSuggestionOnEnter(bool value) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->put_ChooseSuggestionOnEnter(value));
}

template <typename D> event_token impl_ISearchBox<D>::QueryChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISearchBox)->add_QueryChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISearchBox> impl_ISearchBox<D>::QueryChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISearchBox>(this, &ABI::Windows::UI::Xaml::Controls::ISearchBox::remove_QueryChanged, QueryChanged(value));
}

template <typename D> void impl_ISearchBox<D>::QueryChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->remove_QueryChanged(token));
}

template <typename D> event_token impl_ISearchBox<D>::SuggestionsRequested(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISearchBox)->add_SuggestionsRequested(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISearchBox> impl_ISearchBox<D>::SuggestionsRequested(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISearchBox>(this, &ABI::Windows::UI::Xaml::Controls::ISearchBox::remove_SuggestionsRequested, SuggestionsRequested(value));
}

template <typename D> void impl_ISearchBox<D>::SuggestionsRequested(event_token token) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->remove_SuggestionsRequested(token));
}

template <typename D> event_token impl_ISearchBox<D>::QuerySubmitted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISearchBox)->add_QuerySubmitted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISearchBox> impl_ISearchBox<D>::QuerySubmitted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISearchBox>(this, &ABI::Windows::UI::Xaml::Controls::ISearchBox::remove_QuerySubmitted, QuerySubmitted(value));
}

template <typename D> void impl_ISearchBox<D>::QuerySubmitted(event_token token) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->remove_QuerySubmitted(token));
}

template <typename D> event_token impl_ISearchBox<D>::ResultSuggestionChosen(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISearchBox)->add_ResultSuggestionChosen(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISearchBox> impl_ISearchBox<D>::ResultSuggestionChosen(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISearchBox>(this, &ABI::Windows::UI::Xaml::Controls::ISearchBox::remove_ResultSuggestionChosen, ResultSuggestionChosen(value));
}

template <typename D> void impl_ISearchBox<D>::ResultSuggestionChosen(event_token token) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->remove_ResultSuggestionChosen(token));
}

template <typename D> event_token impl_ISearchBox<D>::PrepareForFocusOnKeyboardInput(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISearchBox)->add_PrepareForFocusOnKeyboardInput(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISearchBox> impl_ISearchBox<D>::PrepareForFocusOnKeyboardInput(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISearchBox>(this, &ABI::Windows::UI::Xaml::Controls::ISearchBox::remove_PrepareForFocusOnKeyboardInput, PrepareForFocusOnKeyboardInput(value));
}

template <typename D> void impl_ISearchBox<D>::PrepareForFocusOnKeyboardInput(event_token token) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->remove_PrepareForFocusOnKeyboardInput(token));
}

template <typename D> void impl_ISearchBox<D>::SetLocalContentSuggestionSettings(const Windows::ApplicationModel::Search::LocalContentSuggestionSettings & settings) const
{
    check_hresult(WINRT_SHIM(ISearchBox)->abi_SetLocalContentSuggestionSettings(get_abi(settings)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::SearchHistoryEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxStatics)->get_SearchHistoryEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::SearchHistoryContextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxStatics)->get_SearchHistoryContextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxStatics)->get_PlaceholderTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::QueryTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxStatics)->get_QueryTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::FocusOnKeyboardInputProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxStatics)->get_FocusOnKeyboardInputProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::ChooseSuggestionOnEnterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxStatics)->get_ChooseSuggestionOnEnterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SearchBox impl_ISearchBoxFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SearchBox instance { nullptr };
    check_hresult(WINRT_SHIM(ISearchBoxFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::UIElement impl_ISplitView<D>::Content() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(ISplitView)->get_Content(put_abi(value)));
    return value;
}

template <typename D> void impl_ISplitView<D>::Content(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(ISplitView)->put_Content(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement impl_ISplitView<D>::Pane() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(ISplitView)->get_Pane(put_abi(value)));
    return value;
}

template <typename D> void impl_ISplitView<D>::Pane(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(ISplitView)->put_Pane(get_abi(value)));
}

template <typename D> bool impl_ISplitView<D>::IsPaneOpen() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ISplitView)->get_IsPaneOpen(&value));
    return value;
}

template <typename D> void impl_ISplitView<D>::IsPaneOpen(bool value) const
{
    check_hresult(WINRT_SHIM(ISplitView)->put_IsPaneOpen(value));
}

template <typename D> double impl_ISplitView<D>::OpenPaneLength() const
{
    double value {};
    check_hresult(WINRT_SHIM(ISplitView)->get_OpenPaneLength(&value));
    return value;
}

template <typename D> void impl_ISplitView<D>::OpenPaneLength(double value) const
{
    check_hresult(WINRT_SHIM(ISplitView)->put_OpenPaneLength(value));
}

template <typename D> double impl_ISplitView<D>::CompactPaneLength() const
{
    double value {};
    check_hresult(WINRT_SHIM(ISplitView)->get_CompactPaneLength(&value));
    return value;
}

template <typename D> void impl_ISplitView<D>::CompactPaneLength(double value) const
{
    check_hresult(WINRT_SHIM(ISplitView)->put_CompactPaneLength(value));
}

template <typename D> Windows::UI::Xaml::Controls::SplitViewPanePlacement impl_ISplitView<D>::PanePlacement() const
{
    Windows::UI::Xaml::Controls::SplitViewPanePlacement value {};
    check_hresult(WINRT_SHIM(ISplitView)->get_PanePlacement(&value));
    return value;
}

template <typename D> void impl_ISplitView<D>::PanePlacement(Windows::UI::Xaml::Controls::SplitViewPanePlacement value) const
{
    check_hresult(WINRT_SHIM(ISplitView)->put_PanePlacement(value));
}

template <typename D> Windows::UI::Xaml::Controls::SplitViewDisplayMode impl_ISplitView<D>::DisplayMode() const
{
    Windows::UI::Xaml::Controls::SplitViewDisplayMode value {};
    check_hresult(WINRT_SHIM(ISplitView)->get_DisplayMode(&value));
    return value;
}

template <typename D> void impl_ISplitView<D>::DisplayMode(Windows::UI::Xaml::Controls::SplitViewDisplayMode value) const
{
    check_hresult(WINRT_SHIM(ISplitView)->put_DisplayMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SplitViewTemplateSettings impl_ISplitView<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::SplitViewTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(ISplitView)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ISplitView<D>::PaneBackground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(ISplitView)->get_PaneBackground(put_abi(value)));
    return value;
}

template <typename D> void impl_ISplitView<D>::PaneBackground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(ISplitView)->put_PaneBackground(get_abi(value)));
}

template <typename D> event_token impl_ISplitView<D>::PaneClosing(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISplitView)->add_PaneClosing(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISplitView> impl_ISplitView<D>::PaneClosing(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISplitView>(this, &ABI::Windows::UI::Xaml::Controls::ISplitView::remove_PaneClosing, PaneClosing(value));
}

template <typename D> void impl_ISplitView<D>::PaneClosing(event_token token) const
{
    check_hresult(WINRT_SHIM(ISplitView)->remove_PaneClosing(token));
}

template <typename D> event_token impl_ISplitView<D>::PaneClosed(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISplitView)->add_PaneClosed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISplitView> impl_ISplitView<D>::PaneClosed(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, ISplitView>(this, &ABI::Windows::UI::Xaml::Controls::ISplitView::remove_PaneClosed, PaneClosed(value));
}

template <typename D> void impl_ISplitView<D>::PaneClosed(event_token token) const
{
    check_hresult(WINRT_SHIM(ISplitView)->remove_PaneClosed(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewStatics)->get_ContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::PaneProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewStatics)->get_PaneProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::IsPaneOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewStatics)->get_IsPaneOpenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::OpenPaneLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewStatics)->get_OpenPaneLengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::CompactPaneLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewStatics)->get_CompactPaneLengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::PanePlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewStatics)->get_PanePlacementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::DisplayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewStatics)->get_DisplayModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::TemplateSettingsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewStatics)->get_TemplateSettingsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::PaneBackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewStatics)->get_PaneBackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SplitView impl_ISplitViewFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SplitView instance { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_ISplitView2<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(WINRT_SHIM(ISplitView2)->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_ISplitView2<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(WINRT_SHIM(ISplitView2)->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics2<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISplitViewStatics2)->get_LightDismissOverlayModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Symbol impl_ISymbolIcon<D>::Symbol() const
{
    Windows::UI::Xaml::Controls::Symbol value {};
    check_hresult(WINRT_SHIM(ISymbolIcon)->get_Symbol(&value));
    return value;
}

template <typename D> void impl_ISymbolIcon<D>::Symbol(Windows::UI::Xaml::Controls::Symbol value) const
{
    check_hresult(WINRT_SHIM(ISymbolIcon)->put_Symbol(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISymbolIconStatics<D>::SymbolProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISymbolIconStatics)->get_SymbolProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SymbolIcon impl_ISymbolIconFactory<D>::CreateInstanceWithSymbol(Windows::UI::Xaml::Controls::Symbol symbol) const
{
    Windows::UI::Xaml::Controls::SymbolIcon instance { nullptr };
    check_hresult(WINRT_SHIM(ISymbolIconFactory)->abi_CreateInstanceWithSymbol(symbol, put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IInspectable impl_ITimePicker<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(ITimePicker)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_ITimePicker<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(ITimePicker)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_ITimePicker<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(ITimePicker)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_ITimePicker<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(ITimePicker)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> hstring impl_ITimePicker<D>::ClockIdentifier() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ITimePicker)->get_ClockIdentifier(put_abi(value)));
    return value;
}

template <typename D> void impl_ITimePicker<D>::ClockIdentifier(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ITimePicker)->put_ClockIdentifier(get_abi(value)));
}

template <typename D> int32_t impl_ITimePicker<D>::MinuteIncrement() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITimePicker)->get_MinuteIncrement(&value));
    return value;
}

template <typename D> void impl_ITimePicker<D>::MinuteIncrement(int32_t value) const
{
    check_hresult(WINRT_SHIM(ITimePicker)->put_MinuteIncrement(value));
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePicker<D>::Time() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(WINRT_SHIM(ITimePicker)->get_Time(put_abi(value)));
    return value;
}

template <typename D> void impl_ITimePicker<D>::Time(const Windows::Foundation::TimeSpan & value) const
{
    check_hresult(WINRT_SHIM(ITimePicker)->put_Time(get_abi(value)));
}

template <typename D> event_token impl_ITimePicker<D>::TimeChanged(const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITimePicker)->add_TimeChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITimePicker> impl_ITimePicker<D>::TimeChanged(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITimePicker>(this, &ABI::Windows::UI::Xaml::Controls::ITimePicker::remove_TimeChanged, TimeChanged(value));
}

template <typename D> void impl_ITimePicker<D>::TimeChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(ITimePicker)->remove_TimeChanged(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITimePickerStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITimePickerStatics)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics<D>::ClockIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITimePickerStatics)->get_ClockIdentifierProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics<D>::MinuteIncrementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITimePickerStatics)->get_MinuteIncrementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics<D>::TimeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITimePickerStatics)->get_TimeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::TimePicker impl_ITimePickerFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::TimePicker instance { nullptr };
    check_hresult(WINRT_SHIM(ITimePickerFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_ITimePicker2<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(WINRT_SHIM(ITimePicker2)->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_ITimePicker2<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(WINRT_SHIM(ITimePicker2)->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics2<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITimePickerStatics2)->get_LightDismissOverlayModeProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IAppBar<D>::IsOpen() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IAppBar)->get_IsOpen(&value));
    return value;
}

template <typename D> void impl_IAppBar<D>::IsOpen(bool value) const
{
    check_hresult(WINRT_SHIM(IAppBar)->put_IsOpen(value));
}

template <typename D> bool impl_IAppBar<D>::IsSticky() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IAppBar)->get_IsSticky(&value));
    return value;
}

template <typename D> void impl_IAppBar<D>::IsSticky(bool value) const
{
    check_hresult(WINRT_SHIM(IAppBar)->put_IsSticky(value));
}

template <typename D> event_token impl_IAppBar<D>::Opened(const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IAppBar)->add_Opened(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IAppBar> impl_IAppBar<D>::Opened(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IAppBar>(this, &ABI::Windows::UI::Xaml::Controls::IAppBar::remove_Opened, Opened(value));
}

template <typename D> void impl_IAppBar<D>::Opened(event_token token) const
{
    check_hresult(WINRT_SHIM(IAppBar)->remove_Opened(token));
}

template <typename D> event_token impl_IAppBar<D>::Closed(const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IAppBar)->add_Closed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IAppBar> impl_IAppBar<D>::Closed(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IAppBar>(this, &ABI::Windows::UI::Xaml::Controls::IAppBar::remove_Closed, Closed(value));
}

template <typename D> void impl_IAppBar<D>::Closed(event_token token) const
{
    check_hresult(WINRT_SHIM(IAppBar)->remove_Closed(token));
}

template <typename D> void impl_IAppBarOverrides<D>::OnClosed(const Windows::Foundation::IInspectable & e) const
{
    check_hresult(WINRT_SHIM(IAppBarOverrides)->abi_OnClosed(get_abi(e)));
}

template <typename D> void impl_IAppBarOverrides<D>::OnOpened(const Windows::Foundation::IInspectable & e) const
{
    check_hresult(WINRT_SHIM(IAppBarOverrides)->abi_OnOpened(get_abi(e)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarStatics<D>::IsOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarStatics)->get_IsOpenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarStatics<D>::IsStickyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarStatics)->get_IsStickyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AppBar impl_IAppBarFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::AppBar instance { nullptr };
    check_hresult(WINRT_SHIM(IAppBarFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::AppBarClosedDisplayMode impl_IAppBar2<D>::ClosedDisplayMode() const
{
    Windows::UI::Xaml::Controls::AppBarClosedDisplayMode value {};
    check_hresult(WINRT_SHIM(IAppBar2)->get_ClosedDisplayMode(&value));
    return value;
}

template <typename D> void impl_IAppBar2<D>::ClosedDisplayMode(Windows::UI::Xaml::Controls::AppBarClosedDisplayMode value) const
{
    check_hresult(WINRT_SHIM(IAppBar2)->put_ClosedDisplayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarStatics2<D>::ClosedDisplayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarStatics2)->get_ClosedDisplayModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::AppBarTemplateSettings impl_IAppBar3<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::AppBarTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(IAppBar3)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IAppBar3<D>::Opening(const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IAppBar3)->add_Opening(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IAppBar3> impl_IAppBar3<D>::Opening(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IAppBar3>(this, &ABI::Windows::UI::Xaml::Controls::IAppBar3::remove_Opening, Opening(value));
}

template <typename D> void impl_IAppBar3<D>::Opening(event_token token) const
{
    check_hresult(WINRT_SHIM(IAppBar3)->remove_Opening(token));
}

template <typename D> event_token impl_IAppBar3<D>::Closing(const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IAppBar3)->add_Closing(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IAppBar3> impl_IAppBar3<D>::Closing(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IAppBar3>(this, &ABI::Windows::UI::Xaml::Controls::IAppBar3::remove_Closing, Closing(value));
}

template <typename D> void impl_IAppBar3<D>::Closing(event_token token) const
{
    check_hresult(WINRT_SHIM(IAppBar3)->remove_Closing(token));
}

template <typename D> void impl_IAppBarOverrides3<D>::OnClosing(const Windows::Foundation::IInspectable & e) const
{
    check_hresult(WINRT_SHIM(IAppBarOverrides3)->abi_OnClosing(get_abi(e)));
}

template <typename D> void impl_IAppBarOverrides3<D>::OnOpening(const Windows::Foundation::IInspectable & e) const
{
    check_hresult(WINRT_SHIM(IAppBarOverrides3)->abi_OnOpening(get_abi(e)));
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_IAppBar4<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(WINRT_SHIM(IAppBar4)->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_IAppBar4<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(WINRT_SHIM(IAppBar4)->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarStatics4<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarStatics4)->get_LightDismissOverlayModeProperty(put_abi(value)));
    return value;
}

template <typename D> double impl_IAutoSuggestBox<D>::MaxSuggestionListHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->get_MaxSuggestionListHeight(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::MaxSuggestionListHeight(double value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->put_MaxSuggestionListHeight(value));
}

template <typename D> bool impl_IAutoSuggestBox<D>::IsSuggestionListOpen() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->get_IsSuggestionListOpen(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::IsSuggestionListOpen(bool value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->put_IsSuggestionListOpen(value));
}

template <typename D> hstring impl_IAutoSuggestBox<D>::TextMemberPath() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->get_TextMemberPath(put_abi(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::TextMemberPath(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->put_TextMemberPath(get_abi(value)));
}

template <typename D> hstring impl_IAutoSuggestBox<D>::Text() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->get_Text(put_abi(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::Text(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->put_Text(get_abi(value)));
}

template <typename D> bool impl_IAutoSuggestBox<D>::UpdateTextOnSelect() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->get_UpdateTextOnSelect(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::UpdateTextOnSelect(bool value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->put_UpdateTextOnSelect(value));
}

template <typename D> hstring impl_IAutoSuggestBox<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->get_PlaceholderText(put_abi(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::PlaceholderText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->put_PlaceholderText(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable impl_IAutoSuggestBox<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->put_Header(get_abi(value)));
}

template <typename D> bool impl_IAutoSuggestBox<D>::AutoMaximizeSuggestionArea() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->get_AutoMaximizeSuggestionArea(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::AutoMaximizeSuggestionArea(bool value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->put_AutoMaximizeSuggestionArea(value));
}

template <typename D> Windows::UI::Xaml::Style impl_IAutoSuggestBox<D>::TextBoxStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->get_TextBoxStyle(put_abi(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::TextBoxStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->put_TextBoxStyle(get_abi(value)));
}

template <typename D> event_token impl_IAutoSuggestBox<D>::SuggestionChosen(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->add_SuggestionChosen(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IAutoSuggestBox> impl_IAutoSuggestBox<D>::SuggestionChosen(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> & value) const
{
    return impl::make_event_revoker<D, IAutoSuggestBox>(this, &ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox::remove_SuggestionChosen, SuggestionChosen(value));
}

template <typename D> void impl_IAutoSuggestBox<D>::SuggestionChosen(event_token token) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->remove_SuggestionChosen(token));
}

template <typename D> event_token impl_IAutoSuggestBox<D>::TextChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->add_TextChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IAutoSuggestBox> impl_IAutoSuggestBox<D>::TextChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IAutoSuggestBox>(this, &ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox::remove_TextChanged, TextChanged(value));
}

template <typename D> void impl_IAutoSuggestBox<D>::TextChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox)->remove_TextChanged(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::MaxSuggestionListHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics)->get_MaxSuggestionListHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::IsSuggestionListOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics)->get_IsSuggestionListOpenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::TextMemberPathProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics)->get_TextMemberPathProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics)->get_TextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::UpdateTextOnSelectProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics)->get_UpdateTextOnSelectProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics)->get_PlaceholderTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::AutoMaximizeSuggestionAreaProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics)->get_AutoMaximizeSuggestionAreaProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::TextBoxStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics)->get_TextBoxStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::IconElement impl_IAutoSuggestBox2<D>::QueryIcon() const
{
    Windows::UI::Xaml::Controls::IconElement value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBox2)->get_QueryIcon(put_abi(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox2<D>::QueryIcon(const Windows::UI::Xaml::Controls::IconElement & value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox2)->put_QueryIcon(get_abi(value)));
}

template <typename D> event_token impl_IAutoSuggestBox2<D>::QuerySubmitted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IAutoSuggestBox2)->add_QuerySubmitted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IAutoSuggestBox2> impl_IAutoSuggestBox2<D>::QuerySubmitted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IAutoSuggestBox2>(this, &ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox2::remove_QuerySubmitted, QuerySubmitted(value));
}

template <typename D> void impl_IAutoSuggestBox2<D>::QuerySubmitted(event_token token) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox2)->remove_QuerySubmitted(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics2<D>::QueryIconProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics2)->get_QueryIconProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_IAutoSuggestBox3<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(WINRT_SHIM(IAutoSuggestBox3)->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBox3<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(WINRT_SHIM(IAutoSuggestBox3)->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics3<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAutoSuggestBoxStatics3)->get_LightDismissOverlayModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarOverflowPresenter impl_ICommandBarOverflowPresenterFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CommandBarOverflowPresenter instance { nullptr };
    check_hresult(WINRT_SHIM(ICommandBarOverflowPresenterFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IInspectable impl_IContentDialog<D>::Title() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IContentDialog)->get_Title(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::Title(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_Title(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IContentDialog<D>::TitleTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialog)->get_TitleTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::TitleTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_TitleTemplate(get_abi(value)));
}

template <typename D> bool impl_IContentDialog<D>::FullSizeDesired() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IContentDialog)->get_FullSizeDesired(&value));
    return value;
}

template <typename D> void impl_IContentDialog<D>::FullSizeDesired(bool value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_FullSizeDesired(value));
}

template <typename D> hstring impl_IContentDialog<D>::PrimaryButtonText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IContentDialog)->get_PrimaryButtonText(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::PrimaryButtonText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_PrimaryButtonText(get_abi(value)));
}

template <typename D> hstring impl_IContentDialog<D>::SecondaryButtonText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IContentDialog)->get_SecondaryButtonText(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::SecondaryButtonText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_SecondaryButtonText(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Input::ICommand impl_IContentDialog<D>::PrimaryButtonCommand() const
{
    Windows::UI::Xaml::Input::ICommand value;
    check_hresult(WINRT_SHIM(IContentDialog)->get_PrimaryButtonCommand(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::PrimaryButtonCommand(const Windows::UI::Xaml::Input::ICommand & value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_PrimaryButtonCommand(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Input::ICommand impl_IContentDialog<D>::SecondaryButtonCommand() const
{
    Windows::UI::Xaml::Input::ICommand value;
    check_hresult(WINRT_SHIM(IContentDialog)->get_SecondaryButtonCommand(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::SecondaryButtonCommand(const Windows::UI::Xaml::Input::ICommand & value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_SecondaryButtonCommand(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable impl_IContentDialog<D>::PrimaryButtonCommandParameter() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IContentDialog)->get_PrimaryButtonCommandParameter(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::PrimaryButtonCommandParameter(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_PrimaryButtonCommandParameter(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable impl_IContentDialog<D>::SecondaryButtonCommandParameter() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IContentDialog)->get_SecondaryButtonCommandParameter(put_abi(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::SecondaryButtonCommandParameter(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_SecondaryButtonCommandParameter(get_abi(value)));
}

template <typename D> bool impl_IContentDialog<D>::IsPrimaryButtonEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IContentDialog)->get_IsPrimaryButtonEnabled(&value));
    return value;
}

template <typename D> void impl_IContentDialog<D>::IsPrimaryButtonEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_IsPrimaryButtonEnabled(value));
}

template <typename D> bool impl_IContentDialog<D>::IsSecondaryButtonEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IContentDialog)->get_IsSecondaryButtonEnabled(&value));
    return value;
}

template <typename D> void impl_IContentDialog<D>::IsSecondaryButtonEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->put_IsSecondaryButtonEnabled(value));
}

template <typename D> event_token impl_IContentDialog<D>::Closing(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IContentDialog)->add_Closing(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IContentDialog> impl_IContentDialog<D>::Closing(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IContentDialog>(this, &ABI::Windows::UI::Xaml::Controls::IContentDialog::remove_Closing, Closing(value));
}

template <typename D> void impl_IContentDialog<D>::Closing(event_token token) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->remove_Closing(token));
}

template <typename D> event_token impl_IContentDialog<D>::Closed(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IContentDialog)->add_Closed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IContentDialog> impl_IContentDialog<D>::Closed(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IContentDialog>(this, &ABI::Windows::UI::Xaml::Controls::IContentDialog::remove_Closed, Closed(value));
}

template <typename D> void impl_IContentDialog<D>::Closed(event_token token) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->remove_Closed(token));
}

template <typename D> event_token impl_IContentDialog<D>::Opened(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IContentDialog)->add_Opened(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IContentDialog> impl_IContentDialog<D>::Opened(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IContentDialog>(this, &ABI::Windows::UI::Xaml::Controls::IContentDialog::remove_Opened, Opened(value));
}

template <typename D> void impl_IContentDialog<D>::Opened(event_token token) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->remove_Opened(token));
}

template <typename D> event_token impl_IContentDialog<D>::PrimaryButtonClick(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IContentDialog)->add_PrimaryButtonClick(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IContentDialog> impl_IContentDialog<D>::PrimaryButtonClick(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> & value) const
{
    return impl::make_event_revoker<D, IContentDialog>(this, &ABI::Windows::UI::Xaml::Controls::IContentDialog::remove_PrimaryButtonClick, PrimaryButtonClick(value));
}

template <typename D> void impl_IContentDialog<D>::PrimaryButtonClick(event_token token) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->remove_PrimaryButtonClick(token));
}

template <typename D> event_token impl_IContentDialog<D>::SecondaryButtonClick(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IContentDialog)->add_SecondaryButtonClick(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IContentDialog> impl_IContentDialog<D>::SecondaryButtonClick(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> & value) const
{
    return impl::make_event_revoker<D, IContentDialog>(this, &ABI::Windows::UI::Xaml::Controls::IContentDialog::remove_SecondaryButtonClick, SecondaryButtonClick(value));
}

template <typename D> void impl_IContentDialog<D>::SecondaryButtonClick(event_token token) const
{
    check_hresult(WINRT_SHIM(IContentDialog)->remove_SecondaryButtonClick(token));
}

template <typename D> void impl_IContentDialog<D>::Hide() const
{
    check_hresult(WINRT_SHIM(IContentDialog)->abi_Hide());
}

template <typename D> Windows::Foundation::IAsyncOperation<winrt::Windows::UI::Xaml::Controls::ContentDialogResult> impl_IContentDialog<D>::ShowAsync() const
{
    Windows::Foundation::IAsyncOperation<winrt::Windows::UI::Xaml::Controls::ContentDialogResult> returnValue;
    check_hresult(WINRT_SHIM(IContentDialog)->abi_ShowAsync(put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::TitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_TitleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::TitleTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_TitleTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::FullSizeDesiredProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_FullSizeDesiredProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::PrimaryButtonTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_PrimaryButtonTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::SecondaryButtonTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_SecondaryButtonTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::PrimaryButtonCommandProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_PrimaryButtonCommandProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::SecondaryButtonCommandProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_SecondaryButtonCommandProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::PrimaryButtonCommandParameterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_PrimaryButtonCommandParameterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::SecondaryButtonCommandParameterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_SecondaryButtonCommandParameterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::IsPrimaryButtonEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_IsPrimaryButtonEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::IsSecondaryButtonEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogStatics)->get_IsSecondaryButtonEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ContentDialog impl_IContentDialogFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ContentDialog instance { nullptr };
    check_hresult(WINRT_SHIM(IContentDialogFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::FlyoutPresenter impl_IFlyoutPresenterFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::FlyoutPresenter instance { nullptr };
    check_hresult(WINRT_SHIM(IFlyoutPresenterFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> int32_t impl_IFrame<D>::CacheSize() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IFrame)->get_CacheSize(&value));
    return value;
}

template <typename D> void impl_IFrame<D>::CacheSize(int32_t value) const
{
    check_hresult(WINRT_SHIM(IFrame)->put_CacheSize(value));
}

template <typename D> bool impl_IFrame<D>::CanGoBack() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IFrame)->get_CanGoBack(&value));
    return value;
}

template <typename D> bool impl_IFrame<D>::CanGoForward() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IFrame)->get_CanGoForward(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Interop::TypeName impl_IFrame<D>::CurrentSourcePageType() const
{
    Windows::UI::Xaml::Interop::TypeName value {};
    check_hresult(WINRT_SHIM(IFrame)->get_CurrentSourcePageType(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Interop::TypeName impl_IFrame<D>::SourcePageType() const
{
    Windows::UI::Xaml::Interop::TypeName value {};
    check_hresult(WINRT_SHIM(IFrame)->get_SourcePageType(put_abi(value)));
    return value;
}

template <typename D> void impl_IFrame<D>::SourcePageType(const Windows::UI::Xaml::Interop::TypeName & value) const
{
    check_hresult(WINRT_SHIM(IFrame)->put_SourcePageType(get_abi(value)));
}

template <typename D> int32_t impl_IFrame<D>::BackStackDepth() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IFrame)->get_BackStackDepth(&value));
    return value;
}

template <typename D> event_token impl_IFrame<D>::Navigated(const Windows::UI::Xaml::Navigation::NavigatedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IFrame)->add_Navigated(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IFrame> impl_IFrame<D>::Navigated(auto_revoke_t, const Windows::UI::Xaml::Navigation::NavigatedEventHandler & value) const
{
    return impl::make_event_revoker<D, IFrame>(this, &ABI::Windows::UI::Xaml::Controls::IFrame::remove_Navigated, Navigated(value));
}

template <typename D> void impl_IFrame<D>::Navigated(event_token token) const
{
    check_hresult(WINRT_SHIM(IFrame)->remove_Navigated(token));
}

template <typename D> event_token impl_IFrame<D>::Navigating(const Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IFrame)->add_Navigating(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IFrame> impl_IFrame<D>::Navigating(auto_revoke_t, const Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler & value) const
{
    return impl::make_event_revoker<D, IFrame>(this, &ABI::Windows::UI::Xaml::Controls::IFrame::remove_Navigating, Navigating(value));
}

template <typename D> void impl_IFrame<D>::Navigating(event_token token) const
{
    check_hresult(WINRT_SHIM(IFrame)->remove_Navigating(token));
}

template <typename D> event_token impl_IFrame<D>::NavigationFailed(const Windows::UI::Xaml::Navigation::NavigationFailedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IFrame)->add_NavigationFailed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IFrame> impl_IFrame<D>::NavigationFailed(auto_revoke_t, const Windows::UI::Xaml::Navigation::NavigationFailedEventHandler & value) const
{
    return impl::make_event_revoker<D, IFrame>(this, &ABI::Windows::UI::Xaml::Controls::IFrame::remove_NavigationFailed, NavigationFailed(value));
}

template <typename D> void impl_IFrame<D>::NavigationFailed(event_token token) const
{
    check_hresult(WINRT_SHIM(IFrame)->remove_NavigationFailed(token));
}

template <typename D> event_token impl_IFrame<D>::NavigationStopped(const Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IFrame)->add_NavigationStopped(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IFrame> impl_IFrame<D>::NavigationStopped(auto_revoke_t, const Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler & value) const
{
    return impl::make_event_revoker<D, IFrame>(this, &ABI::Windows::UI::Xaml::Controls::IFrame::remove_NavigationStopped, NavigationStopped(value));
}

template <typename D> void impl_IFrame<D>::NavigationStopped(event_token token) const
{
    check_hresult(WINRT_SHIM(IFrame)->remove_NavigationStopped(token));
}

template <typename D> void impl_IFrame<D>::GoBack() const
{
    check_hresult(WINRT_SHIM(IFrame)->abi_GoBack());
}

template <typename D> void impl_IFrame<D>::GoForward() const
{
    check_hresult(WINRT_SHIM(IFrame)->abi_GoForward());
}

template <typename D> bool impl_IFrame<D>::Navigate(const Windows::UI::Xaml::Interop::TypeName & sourcePageType, const Windows::Foundation::IInspectable & parameter) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IFrame)->abi_Navigate(get_abi(sourcePageType), get_abi(parameter), &returnValue));
    return returnValue;
}

template <typename D> hstring impl_IFrame<D>::GetNavigationState() const
{
    hstring returnValue;
    check_hresult(WINRT_SHIM(IFrame)->abi_GetNavigationState(put_abi(returnValue)));
    return returnValue;
}

template <typename D> void impl_IFrame<D>::SetNavigationState(hstring_view navigationState) const
{
    check_hresult(WINRT_SHIM(IFrame)->abi_SetNavigationState(get_abi(navigationState)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::CacheSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFrameStatics)->get_CacheSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::CanGoBackProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFrameStatics)->get_CanGoBackProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::CanGoForwardProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFrameStatics)->get_CanGoForwardProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::CurrentSourcePageTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFrameStatics)->get_CurrentSourcePageTypeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::SourcePageTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFrameStatics)->get_SourcePageTypeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::BackStackDepthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFrameStatics)->get_BackStackDepthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Frame impl_IFrameFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Frame instance { nullptr };
    check_hresult(WINRT_SHIM(IFrameFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> impl_IFrame2<D>::BackStack() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> value;
    check_hresult(WINRT_SHIM(IFrame2)->get_BackStack(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> impl_IFrame2<D>::ForwardStack() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> value;
    check_hresult(WINRT_SHIM(IFrame2)->get_ForwardStack(put_abi(value)));
    return value;
}

template <typename D> bool impl_IFrame2<D>::Navigate(const Windows::UI::Xaml::Interop::TypeName & sourcePageType, const Windows::Foundation::IInspectable & parameter, const Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo & infoOverride) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IFrame2)->abi_Navigate(get_abi(sourcePageType), get_abi(parameter), get_abi(infoOverride), &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics2<D>::BackStackProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFrameStatics2)->get_BackStackProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics2<D>::ForwardStackProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IFrameStatics2)->get_ForwardStackProperty(put_abi(value)));
    return value;
}

template <typename D> void impl_IFrame3<D>::GoBack(const Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo & transitionInfoOverride) const
{
    check_hresult(WINRT_SHIM(IFrame3)->abi_GoBack(get_abi(transitionInfoOverride)));
}

template <typename D> hstring impl_IMenuFlyoutItem<D>::Text() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IMenuFlyoutItem)->get_Text(put_abi(value)));
    return value;
}

template <typename D> void impl_IMenuFlyoutItem<D>::Text(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IMenuFlyoutItem)->put_Text(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Input::ICommand impl_IMenuFlyoutItem<D>::Command() const
{
    Windows::UI::Xaml::Input::ICommand value;
    check_hresult(WINRT_SHIM(IMenuFlyoutItem)->get_Command(put_abi(value)));
    return value;
}

template <typename D> void impl_IMenuFlyoutItem<D>::Command(const Windows::UI::Xaml::Input::ICommand & value) const
{
    check_hresult(WINRT_SHIM(IMenuFlyoutItem)->put_Command(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable impl_IMenuFlyoutItem<D>::CommandParameter() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IMenuFlyoutItem)->get_CommandParameter(put_abi(value)));
    return value;
}

template <typename D> void impl_IMenuFlyoutItem<D>::CommandParameter(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IMenuFlyoutItem)->put_CommandParameter(get_abi(value)));
}

template <typename D> event_token impl_IMenuFlyoutItem<D>::Click(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IMenuFlyoutItem)->add_Click(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IMenuFlyoutItem> impl_IMenuFlyoutItem<D>::Click(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMenuFlyoutItem>(this, &ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem::remove_Click, Click(value));
}

template <typename D> void impl_IMenuFlyoutItem<D>::Click(event_token token) const
{
    check_hresult(WINRT_SHIM(IMenuFlyoutItem)->remove_Click(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMenuFlyoutItemStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyoutItemStatics)->get_TextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMenuFlyoutItemStatics<D>::CommandProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyoutItemStatics)->get_CommandProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMenuFlyoutItemStatics<D>::CommandParameterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyoutItemStatics)->get_CommandParameterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MenuFlyoutItem impl_IMenuFlyoutItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MenuFlyoutItem instance { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyoutItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::MenuFlyoutPresenter impl_IMenuFlyoutPresenterFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MenuFlyoutPresenter instance { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyoutPresenterFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::MenuFlyoutPresenterTemplateSettings impl_IMenuFlyoutPresenter2<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::MenuFlyoutPresenterTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyoutPresenter2)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MenuFlyoutSeparator impl_IMenuFlyoutSeparatorFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MenuFlyoutSeparator instance { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyoutSeparatorFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> impl_IMenuFlyoutSubItem<D>::Items() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> value;
    check_hresult(WINRT_SHIM(IMenuFlyoutSubItem)->get_Items(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IMenuFlyoutSubItem<D>::Text() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IMenuFlyoutSubItem)->get_Text(put_abi(value)));
    return value;
}

template <typename D> void impl_IMenuFlyoutSubItem<D>::Text(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IMenuFlyoutSubItem)->put_Text(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMenuFlyoutSubItemStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IMenuFlyoutSubItemStatics)->get_TextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Frame impl_IPage<D>::Frame() const
{
    Windows::UI::Xaml::Controls::Frame value { nullptr };
    check_hresult(WINRT_SHIM(IPage)->get_Frame(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Navigation::NavigationCacheMode impl_IPage<D>::NavigationCacheMode() const
{
    Windows::UI::Xaml::Navigation::NavigationCacheMode value {};
    check_hresult(WINRT_SHIM(IPage)->get_NavigationCacheMode(&value));
    return value;
}

template <typename D> void impl_IPage<D>::NavigationCacheMode(Windows::UI::Xaml::Navigation::NavigationCacheMode value) const
{
    check_hresult(WINRT_SHIM(IPage)->put_NavigationCacheMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::AppBar impl_IPage<D>::TopAppBar() const
{
    Windows::UI::Xaml::Controls::AppBar value { nullptr };
    check_hresult(WINRT_SHIM(IPage)->get_TopAppBar(put_abi(value)));
    return value;
}

template <typename D> void impl_IPage<D>::TopAppBar(const Windows::UI::Xaml::Controls::AppBar & value) const
{
    check_hresult(WINRT_SHIM(IPage)->put_TopAppBar(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::AppBar impl_IPage<D>::BottomAppBar() const
{
    Windows::UI::Xaml::Controls::AppBar value { nullptr };
    check_hresult(WINRT_SHIM(IPage)->get_BottomAppBar(put_abi(value)));
    return value;
}

template <typename D> void impl_IPage<D>::BottomAppBar(const Windows::UI::Xaml::Controls::AppBar & value) const
{
    check_hresult(WINRT_SHIM(IPage)->put_BottomAppBar(get_abi(value)));
}

template <typename D> void impl_IPageOverrides<D>::OnNavigatedFrom(const Windows::UI::Xaml::Navigation::NavigationEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IPageOverrides)->abi_OnNavigatedFrom(get_abi(e)));
}

template <typename D> void impl_IPageOverrides<D>::OnNavigatedTo(const Windows::UI::Xaml::Navigation::NavigationEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IPageOverrides)->abi_OnNavigatedTo(get_abi(e)));
}

template <typename D> void impl_IPageOverrides<D>::OnNavigatingFrom(const Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IPageOverrides)->abi_OnNavigatingFrom(get_abi(e)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPageStatics<D>::FrameProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPageStatics)->get_FrameProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPageStatics<D>::TopAppBarProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPageStatics)->get_TopAppBarProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPageStatics<D>::BottomAppBarProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPageStatics)->get_BottomAppBarProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Page impl_IPageFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Page instance { nullptr };
    check_hresult(WINRT_SHIM(IPageFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollBarVisibility impl_IScrollViewer<D>::HorizontalScrollBarVisibility() const
{
    Windows::UI::Xaml::Controls::ScrollBarVisibility value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_HorizontalScrollBarVisibility(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::HorizontalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_HorizontalScrollBarVisibility(value));
}

template <typename D> Windows::UI::Xaml::Controls::ScrollBarVisibility impl_IScrollViewer<D>::VerticalScrollBarVisibility() const
{
    Windows::UI::Xaml::Controls::ScrollBarVisibility value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_VerticalScrollBarVisibility(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::VerticalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_VerticalScrollBarVisibility(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsHorizontalRailEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_IsHorizontalRailEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsHorizontalRailEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_IsHorizontalRailEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsVerticalRailEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_IsVerticalRailEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsVerticalRailEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_IsVerticalRailEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsHorizontalScrollChainingEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_IsHorizontalScrollChainingEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsHorizontalScrollChainingEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_IsHorizontalScrollChainingEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsVerticalScrollChainingEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_IsVerticalScrollChainingEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsVerticalScrollChainingEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_IsVerticalScrollChainingEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsZoomChainingEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_IsZoomChainingEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsZoomChainingEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_IsZoomChainingEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsScrollInertiaEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_IsScrollInertiaEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsScrollInertiaEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_IsScrollInertiaEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsZoomInertiaEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_IsZoomInertiaEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsZoomInertiaEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_IsZoomInertiaEnabled(value));
}

template <typename D> Windows::UI::Xaml::Controls::ScrollMode impl_IScrollViewer<D>::HorizontalScrollMode() const
{
    Windows::UI::Xaml::Controls::ScrollMode value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_HorizontalScrollMode(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::HorizontalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_HorizontalScrollMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::ScrollMode impl_IScrollViewer<D>::VerticalScrollMode() const
{
    Windows::UI::Xaml::Controls::ScrollMode value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_VerticalScrollMode(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::VerticalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_VerticalScrollMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::ZoomMode impl_IScrollViewer<D>::ZoomMode() const
{
    Windows::UI::Xaml::Controls::ZoomMode value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ZoomMode(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::ZoomMode(Windows::UI::Xaml::Controls::ZoomMode value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_ZoomMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment impl_IScrollViewer<D>::HorizontalSnapPointsAlignment() const
{
    Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_HorizontalSnapPointsAlignment(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::HorizontalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_HorizontalSnapPointsAlignment(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment impl_IScrollViewer<D>::VerticalSnapPointsAlignment() const
{
    Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_VerticalSnapPointsAlignment(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::VerticalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_VerticalSnapPointsAlignment(value));
}

template <typename D> Windows::UI::Xaml::Controls::SnapPointsType impl_IScrollViewer<D>::HorizontalSnapPointsType() const
{
    Windows::UI::Xaml::Controls::SnapPointsType value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_HorizontalSnapPointsType(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::HorizontalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_HorizontalSnapPointsType(value));
}

template <typename D> Windows::UI::Xaml::Controls::SnapPointsType impl_IScrollViewer<D>::VerticalSnapPointsType() const
{
    Windows::UI::Xaml::Controls::SnapPointsType value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_VerticalSnapPointsType(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::VerticalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_VerticalSnapPointsType(value));
}

template <typename D> Windows::UI::Xaml::Controls::SnapPointsType impl_IScrollViewer<D>::ZoomSnapPointsType() const
{
    Windows::UI::Xaml::Controls::SnapPointsType value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ZoomSnapPointsType(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::ZoomSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_ZoomSnapPointsType(value));
}

template <typename D> double impl_IScrollViewer<D>::HorizontalOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_HorizontalOffset(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ViewportWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ViewportWidth(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ScrollableWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ScrollableWidth(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility impl_IScrollViewer<D>::ComputedHorizontalScrollBarVisibility() const
{
    Windows::UI::Xaml::Visibility value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ComputedHorizontalScrollBarVisibility(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ExtentWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ExtentWidth(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::VerticalOffset() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_VerticalOffset(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ViewportHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ViewportHeight(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ScrollableHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ScrollableHeight(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility impl_IScrollViewer<D>::ComputedVerticalScrollBarVisibility() const
{
    Windows::UI::Xaml::Visibility value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ComputedVerticalScrollBarVisibility(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ExtentHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ExtentHeight(&value));
    return value;
}

template <typename D> float impl_IScrollViewer<D>::MinZoomFactor() const
{
    float value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_MinZoomFactor(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::MinZoomFactor(float value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_MinZoomFactor(value));
}

template <typename D> float impl_IScrollViewer<D>::MaxZoomFactor() const
{
    float value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_MaxZoomFactor(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::MaxZoomFactor(float value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_MaxZoomFactor(value));
}

template <typename D> float impl_IScrollViewer<D>::ZoomFactor() const
{
    float value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ZoomFactor(&value));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<float> impl_IScrollViewer<D>::ZoomSnapPoints() const
{
    Windows::Foundation::Collections::IVector<float> value;
    check_hresult(WINRT_SHIM(IScrollViewer)->get_ZoomSnapPoints(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IScrollViewer<D>::ViewChanged(const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IScrollViewer)->add_ViewChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IScrollViewer> impl_IScrollViewer<D>::ViewChanged(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IScrollViewer>(this, &ABI::Windows::UI::Xaml::Controls::IScrollViewer::remove_ViewChanged, ViewChanged(value));
}

template <typename D> void impl_IScrollViewer<D>::ViewChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->remove_ViewChanged(token));
}

template <typename D> void impl_IScrollViewer<D>::ScrollToHorizontalOffset(double offset) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->abi_ScrollToHorizontalOffset(offset));
}

template <typename D> void impl_IScrollViewer<D>::ScrollToVerticalOffset(double offset) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->abi_ScrollToVerticalOffset(offset));
}

template <typename D> void impl_IScrollViewer<D>::ZoomToFactor(float factor) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->abi_ZoomToFactor(factor));
}

template <typename D> void impl_IScrollViewer<D>::InvalidateScrollInfo() const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->abi_InvalidateScrollInfo());
}

template <typename D> bool impl_IScrollViewer<D>::IsDeferredScrollingEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_IsDeferredScrollingEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsDeferredScrollingEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_IsDeferredScrollingEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::BringIntoViewOnFocusChange() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IScrollViewer)->get_BringIntoViewOnFocusChange(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::BringIntoViewOnFocusChange(bool value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer)->put_BringIntoViewOnFocusChange(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::HorizontalSnapPointsAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_HorizontalSnapPointsAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::VerticalSnapPointsAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_VerticalSnapPointsAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::HorizontalSnapPointsTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_HorizontalSnapPointsTypeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::VerticalSnapPointsTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_VerticalSnapPointsTypeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ZoomSnapPointsTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ZoomSnapPointsTypeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::HorizontalOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_HorizontalOffsetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ViewportWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ViewportWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ScrollableWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ScrollableWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ComputedHorizontalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ComputedHorizontalScrollBarVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ExtentWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ExtentWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::VerticalOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_VerticalOffsetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ViewportHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ViewportHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ScrollableHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ScrollableHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ComputedVerticalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ComputedVerticalScrollBarVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ExtentHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ExtentHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::MinZoomFactorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_MinZoomFactorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::MaxZoomFactorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_MaxZoomFactorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ZoomFactorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ZoomFactorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ZoomSnapPointsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ZoomSnapPointsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::HorizontalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_HorizontalScrollBarVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollBarVisibility impl_IScrollViewerStatics<D>::GetHorizontalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetHorizontalScrollBarVisibility(get_abi(element), &horizontalScrollBarVisibility));
    return horizontalScrollBarVisibility;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetHorizontalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetHorizontalScrollBarVisibility(get_abi(element), horizontalScrollBarVisibility));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::VerticalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_VerticalScrollBarVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollBarVisibility impl_IScrollViewerStatics<D>::GetVerticalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetVerticalScrollBarVisibility(get_abi(element), &verticalScrollBarVisibility));
    return verticalScrollBarVisibility;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetVerticalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetVerticalScrollBarVisibility(get_abi(element), verticalScrollBarVisibility));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsHorizontalRailEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_IsHorizontalRailEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsHorizontalRailEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isHorizontalRailEnabled {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetIsHorizontalRailEnabled(get_abi(element), &isHorizontalRailEnabled));
    return isHorizontalRailEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsHorizontalRailEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isHorizontalRailEnabled) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetIsHorizontalRailEnabled(get_abi(element), isHorizontalRailEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsVerticalRailEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_IsVerticalRailEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsVerticalRailEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isVerticalRailEnabled {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetIsVerticalRailEnabled(get_abi(element), &isVerticalRailEnabled));
    return isVerticalRailEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsVerticalRailEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isVerticalRailEnabled) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetIsVerticalRailEnabled(get_abi(element), isVerticalRailEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsHorizontalScrollChainingEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_IsHorizontalScrollChainingEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsHorizontalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isHorizontalScrollChainingEnabled {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetIsHorizontalScrollChainingEnabled(get_abi(element), &isHorizontalScrollChainingEnabled));
    return isHorizontalScrollChainingEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsHorizontalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isHorizontalScrollChainingEnabled) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetIsHorizontalScrollChainingEnabled(get_abi(element), isHorizontalScrollChainingEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsVerticalScrollChainingEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_IsVerticalScrollChainingEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsVerticalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isVerticalScrollChainingEnabled {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetIsVerticalScrollChainingEnabled(get_abi(element), &isVerticalScrollChainingEnabled));
    return isVerticalScrollChainingEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsVerticalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isVerticalScrollChainingEnabled) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetIsVerticalScrollChainingEnabled(get_abi(element), isVerticalScrollChainingEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsZoomChainingEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_IsZoomChainingEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsZoomChainingEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isZoomChainingEnabled {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetIsZoomChainingEnabled(get_abi(element), &isZoomChainingEnabled));
    return isZoomChainingEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsZoomChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isZoomChainingEnabled) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetIsZoomChainingEnabled(get_abi(element), isZoomChainingEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsScrollInertiaEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_IsScrollInertiaEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsScrollInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isScrollInertiaEnabled {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetIsScrollInertiaEnabled(get_abi(element), &isScrollInertiaEnabled));
    return isScrollInertiaEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsScrollInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isScrollInertiaEnabled) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetIsScrollInertiaEnabled(get_abi(element), isScrollInertiaEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsZoomInertiaEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_IsZoomInertiaEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsZoomInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isZoomInertiaEnabled {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetIsZoomInertiaEnabled(get_abi(element), &isZoomInertiaEnabled));
    return isZoomInertiaEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsZoomInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isZoomInertiaEnabled) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetIsZoomInertiaEnabled(get_abi(element), isZoomInertiaEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::HorizontalScrollModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_HorizontalScrollModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollMode impl_IScrollViewerStatics<D>::GetHorizontalScrollMode(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetHorizontalScrollMode(get_abi(element), &horizontalScrollMode));
    return horizontalScrollMode;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetHorizontalScrollMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetHorizontalScrollMode(get_abi(element), horizontalScrollMode));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::VerticalScrollModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_VerticalScrollModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollMode impl_IScrollViewerStatics<D>::GetVerticalScrollMode(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetVerticalScrollMode(get_abi(element), &verticalScrollMode));
    return verticalScrollMode;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetVerticalScrollMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetVerticalScrollMode(get_abi(element), verticalScrollMode));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ZoomModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_ZoomModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ZoomMode impl_IScrollViewerStatics<D>::GetZoomMode(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ZoomMode zoomMode {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetZoomMode(get_abi(element), &zoomMode));
    return zoomMode;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetZoomMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ZoomMode zoomMode) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetZoomMode(get_abi(element), zoomMode));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsDeferredScrollingEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_IsDeferredScrollingEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsDeferredScrollingEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isDeferredScrollingEnabled {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetIsDeferredScrollingEnabled(get_abi(element), &isDeferredScrollingEnabled));
    return isDeferredScrollingEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsDeferredScrollingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isDeferredScrollingEnabled) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetIsDeferredScrollingEnabled(get_abi(element), isDeferredScrollingEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::BringIntoViewOnFocusChangeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->get_BringIntoViewOnFocusChangeProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetBringIntoViewOnFocusChange(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool bringIntoViewOnFocusChange {};
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_GetBringIntoViewOnFocusChange(get_abi(element), &bringIntoViewOnFocusChange));
    return bringIntoViewOnFocusChange;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetBringIntoViewOnFocusChange(const Windows::UI::Xaml::DependencyObject & element, bool bringIntoViewOnFocusChange) const
{
    check_hresult(WINRT_SHIM(IScrollViewerStatics)->abi_SetBringIntoViewOnFocusChange(get_abi(element), bringIntoViewOnFocusChange));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IScrollViewer2<D>::TopLeftHeader() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewer2)->get_TopLeftHeader(put_abi(value)));
    return value;
}

template <typename D> void impl_IScrollViewer2<D>::TopLeftHeader(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer2)->put_TopLeftHeader(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IScrollViewer2<D>::LeftHeader() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewer2)->get_LeftHeader(put_abi(value)));
    return value;
}

template <typename D> void impl_IScrollViewer2<D>::LeftHeader(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer2)->put_LeftHeader(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IScrollViewer2<D>::TopHeader() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewer2)->get_TopHeader(put_abi(value)));
    return value;
}

template <typename D> void impl_IScrollViewer2<D>::TopHeader(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IScrollViewer2)->put_TopHeader(get_abi(value)));
}

template <typename D> event_token impl_IScrollViewer2<D>::ViewChanging(const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IScrollViewer2)->add_ViewChanging(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IScrollViewer2> impl_IScrollViewer2<D>::ViewChanging(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IScrollViewer2>(this, &ABI::Windows::UI::Xaml::Controls::IScrollViewer2::remove_ViewChanging, ViewChanging(value));
}

template <typename D> void impl_IScrollViewer2<D>::ViewChanging(event_token token) const
{
    check_hresult(WINRT_SHIM(IScrollViewer2)->remove_ViewChanging(token));
}

template <typename D> bool impl_IScrollViewer2<D>::ChangeView(const optional<double> & horizontalOffset, const optional<double> & verticalOffset, const optional<float> & zoomFactor) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IScrollViewer2)->abi_ChangeView(get_abi(horizontalOffset), get_abi(verticalOffset), get_abi(zoomFactor), &returnValue));
    return returnValue;
}

template <typename D> bool impl_IScrollViewer2<D>::ChangeView(const optional<double> & horizontalOffset, const optional<double> & verticalOffset, const optional<float> & zoomFactor, bool disableAnimation) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IScrollViewer2)->abi_ChangeViewWithOptionalAnimation(get_abi(horizontalOffset), get_abi(verticalOffset), get_abi(zoomFactor), disableAnimation, &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics2<D>::TopLeftHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics2)->get_TopLeftHeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics2<D>::LeftHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics2)->get_LeftHeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics2<D>::TopHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IScrollViewerStatics2)->get_TopHeaderProperty(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IScrollViewer3<D>::DirectManipulationStarted(const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IScrollViewer3)->add_DirectManipulationStarted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IScrollViewer3> impl_IScrollViewer3<D>::DirectManipulationStarted(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IScrollViewer3>(this, &ABI::Windows::UI::Xaml::Controls::IScrollViewer3::remove_DirectManipulationStarted, DirectManipulationStarted(value));
}

template <typename D> void impl_IScrollViewer3<D>::DirectManipulationStarted(event_token token) const
{
    check_hresult(WINRT_SHIM(IScrollViewer3)->remove_DirectManipulationStarted(token));
}

template <typename D> event_token impl_IScrollViewer3<D>::DirectManipulationCompleted(const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IScrollViewer3)->add_DirectManipulationCompleted(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IScrollViewer3> impl_IScrollViewer3<D>::DirectManipulationCompleted(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IScrollViewer3>(this, &ABI::Windows::UI::Xaml::Controls::IScrollViewer3::remove_DirectManipulationCompleted, DirectManipulationCompleted(value));
}

template <typename D> void impl_IScrollViewer3<D>::DirectManipulationCompleted(event_token token) const
{
    check_hresult(WINRT_SHIM(IScrollViewer3)->remove_DirectManipulationCompleted(token));
}

template <typename D> Windows::UI::Xaml::Controls::SwapChainBackgroundPanel impl_ISwapChainBackgroundPanelFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SwapChainBackgroundPanel instance { nullptr };
    check_hresult(WINRT_SHIM(ISwapChainBackgroundPanelFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Core::CoreIndependentInputSource impl_ISwapChainBackgroundPanel2<D>::CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes) const
{
    Windows::UI::Core::CoreIndependentInputSource returnValue { nullptr };
    check_hresult(WINRT_SHIM(ISwapChainBackgroundPanel2)->abi_CreateCoreIndependentInputSource(deviceTypes, put_abi(returnValue)));
    return returnValue;
}

template <typename D> float impl_ISwapChainPanel<D>::CompositionScaleX() const
{
    float value {};
    check_hresult(WINRT_SHIM(ISwapChainPanel)->get_CompositionScaleX(&value));
    return value;
}

template <typename D> float impl_ISwapChainPanel<D>::CompositionScaleY() const
{
    float value {};
    check_hresult(WINRT_SHIM(ISwapChainPanel)->get_CompositionScaleY(&value));
    return value;
}

template <typename D> event_token impl_ISwapChainPanel<D>::CompositionScaleChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ISwapChainPanel)->add_CompositionScaleChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ISwapChainPanel> impl_ISwapChainPanel<D>::CompositionScaleChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, ISwapChainPanel>(this, &ABI::Windows::UI::Xaml::Controls::ISwapChainPanel::remove_CompositionScaleChanged, CompositionScaleChanged(value));
}

template <typename D> void impl_ISwapChainPanel<D>::CompositionScaleChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(ISwapChainPanel)->remove_CompositionScaleChanged(token));
}

template <typename D> Windows::UI::Core::CoreIndependentInputSource impl_ISwapChainPanel<D>::CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes) const
{
    Windows::UI::Core::CoreIndependentInputSource returnValue { nullptr };
    check_hresult(WINRT_SHIM(ISwapChainPanel)->abi_CreateCoreIndependentInputSource(deviceTypes, put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISwapChainPanelStatics<D>::CompositionScaleXProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISwapChainPanelStatics)->get_CompositionScaleXProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISwapChainPanelStatics<D>::CompositionScaleYProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ISwapChainPanelStatics)->get_CompositionScaleYProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SwapChainPanel impl_ISwapChainPanelFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SwapChainPanel instance { nullptr };
    check_hresult(WINRT_SHIM(ISwapChainPanelFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> impl_ICommandBar<D>::PrimaryCommands() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> value;
    check_hresult(WINRT_SHIM(ICommandBar)->get_PrimaryCommands(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> impl_ICommandBar<D>::SecondaryCommands() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> value;
    check_hresult(WINRT_SHIM(ICommandBar)->get_SecondaryCommands(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics<D>::PrimaryCommandsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICommandBarStatics)->get_PrimaryCommandsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics<D>::SecondaryCommandsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICommandBarStatics)->get_SecondaryCommandsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBar impl_ICommandBarFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CommandBar instance { nullptr };
    check_hresult(WINRT_SHIM(ICommandBarFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Style impl_ICommandBar2<D>::CommandBarOverflowPresenterStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(WINRT_SHIM(ICommandBar2)->get_CommandBarOverflowPresenterStyle(put_abi(value)));
    return value;
}

template <typename D> void impl_ICommandBar2<D>::CommandBarOverflowPresenterStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(WINRT_SHIM(ICommandBar2)->put_CommandBarOverflowPresenterStyle(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::CommandBarTemplateSettings impl_ICommandBar2<D>::CommandBarTemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::CommandBarTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(ICommandBar2)->get_CommandBarTemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics2<D>::CommandBarOverflowPresenterStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICommandBarStatics2)->get_CommandBarOverflowPresenterStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition impl_ICommandBar3<D>::DefaultLabelPosition() const
{
    Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition value {};
    check_hresult(WINRT_SHIM(ICommandBar3)->get_DefaultLabelPosition(&value));
    return value;
}

template <typename D> void impl_ICommandBar3<D>::DefaultLabelPosition(Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition value) const
{
    check_hresult(WINRT_SHIM(ICommandBar3)->put_DefaultLabelPosition(value));
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility impl_ICommandBar3<D>::OverflowButtonVisibility() const
{
    Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility value {};
    check_hresult(WINRT_SHIM(ICommandBar3)->get_OverflowButtonVisibility(&value));
    return value;
}

template <typename D> void impl_ICommandBar3<D>::OverflowButtonVisibility(Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility value) const
{
    check_hresult(WINRT_SHIM(ICommandBar3)->put_OverflowButtonVisibility(value));
}

template <typename D> bool impl_ICommandBar3<D>::IsDynamicOverflowEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(ICommandBar3)->get_IsDynamicOverflowEnabled(&value));
    return value;
}

template <typename D> void impl_ICommandBar3<D>::IsDynamicOverflowEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(ICommandBar3)->put_IsDynamicOverflowEnabled(value));
}

template <typename D> event_token impl_ICommandBar3<D>::DynamicOverflowItemsChanging(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ICommandBar3)->add_DynamicOverflowItemsChanging(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ICommandBar3> impl_ICommandBar3<D>::DynamicOverflowItemsChanging(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, ICommandBar3>(this, &ABI::Windows::UI::Xaml::Controls::ICommandBar3::remove_DynamicOverflowItemsChanging, DynamicOverflowItemsChanging(value));
}

template <typename D> void impl_ICommandBar3<D>::DynamicOverflowItemsChanging(event_token token) const
{
    check_hresult(WINRT_SHIM(ICommandBar3)->remove_DynamicOverflowItemsChanging(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics3<D>::DefaultLabelPositionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICommandBarStatics3)->get_DefaultLabelPositionProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics3<D>::OverflowButtonVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICommandBarStatics3)->get_OverflowButtonVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics3<D>::IsDynamicOverflowEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ICommandBarStatics3)->get_IsDynamicOverflowEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::GridViewHeaderItem impl_IGridViewHeaderItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GridViewHeaderItem instance { nullptr };
    check_hresult(WINRT_SHIM(IGridViewHeaderItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings impl_IGridViewItem<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(IGridViewItem)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::GridViewItem impl_IGridViewItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GridViewItem instance { nullptr };
    check_hresult(WINRT_SHIM(IGridViewItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewHeaderItem impl_IListViewHeaderItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListViewHeaderItem instance { nullptr };
    check_hresult(WINRT_SHIM(IListViewHeaderItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings impl_IListViewItem<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings value { nullptr };
    check_hresult(WINRT_SHIM(IListViewItem)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewItem impl_IListViewItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListViewItem instance { nullptr };
    check_hresult(WINRT_SHIM(IListViewItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_IToggleMenuFlyoutItem<D>::IsChecked() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IToggleMenuFlyoutItem)->get_IsChecked(&value));
    return value;
}

template <typename D> void impl_IToggleMenuFlyoutItem<D>::IsChecked(bool value) const
{
    check_hresult(WINRT_SHIM(IToggleMenuFlyoutItem)->put_IsChecked(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleMenuFlyoutItemStatics<D>::IsCheckedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IToggleMenuFlyoutItemStatics)->get_IsCheckedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem impl_IToggleMenuFlyoutItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem instance { nullptr };
    check_hresult(WINRT_SHIM(IToggleMenuFlyoutItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> double impl_IWrapGrid<D>::ItemWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IWrapGrid)->get_ItemWidth(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::ItemWidth(double value) const
{
    check_hresult(WINRT_SHIM(IWrapGrid)->put_ItemWidth(value));
}

template <typename D> double impl_IWrapGrid<D>::ItemHeight() const
{
    double value {};
    check_hresult(WINRT_SHIM(IWrapGrid)->get_ItemHeight(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::ItemHeight(double value) const
{
    check_hresult(WINRT_SHIM(IWrapGrid)->put_ItemHeight(value));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IWrapGrid<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(WINRT_SHIM(IWrapGrid)->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(WINRT_SHIM(IWrapGrid)->put_Orientation(value));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_IWrapGrid<D>::HorizontalChildrenAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(WINRT_SHIM(IWrapGrid)->get_HorizontalChildrenAlignment(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(WINRT_SHIM(IWrapGrid)->put_HorizontalChildrenAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_IWrapGrid<D>::VerticalChildrenAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(WINRT_SHIM(IWrapGrid)->get_VerticalChildrenAlignment(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(WINRT_SHIM(IWrapGrid)->put_VerticalChildrenAlignment(value));
}

template <typename D> int32_t impl_IWrapGrid<D>::MaximumRowsOrColumns() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IWrapGrid)->get_MaximumRowsOrColumns(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::MaximumRowsOrColumns(int32_t value) const
{
    check_hresult(WINRT_SHIM(IWrapGrid)->put_MaximumRowsOrColumns(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::ItemWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWrapGridStatics)->get_ItemWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::ItemHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWrapGridStatics)->get_ItemHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWrapGridStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::HorizontalChildrenAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWrapGridStatics)->get_HorizontalChildrenAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::VerticalChildrenAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWrapGridStatics)->get_VerticalChildrenAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::MaximumRowsOrColumnsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IWrapGridStatics)->get_MaximumRowsOrColumnsProperty(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IAppBarButton<D>::Label() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IAppBarButton)->get_Label(put_abi(value)));
    return value;
}

template <typename D> void impl_IAppBarButton<D>::Label(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IAppBarButton)->put_Label(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::IconElement impl_IAppBarButton<D>::Icon() const
{
    Windows::UI::Xaml::Controls::IconElement value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarButton)->get_Icon(put_abi(value)));
    return value;
}

template <typename D> void impl_IAppBarButton<D>::Icon(const Windows::UI::Xaml::Controls::IconElement & value) const
{
    check_hresult(WINRT_SHIM(IAppBarButton)->put_Icon(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics<D>::LabelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarButtonStatics)->get_LabelProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics<D>::IconProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarButtonStatics)->get_IconProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics<D>::IsCompactProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarButtonStatics)->get_IsCompactProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AppBarButton impl_IAppBarButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::AppBarButton instance { nullptr };
    check_hresult(WINRT_SHIM(IAppBarButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarLabelPosition impl_IAppBarButton3<D>::LabelPosition() const
{
    Windows::UI::Xaml::Controls::CommandBarLabelPosition value {};
    check_hresult(WINRT_SHIM(IAppBarButton3)->get_LabelPosition(&value));
    return value;
}

template <typename D> void impl_IAppBarButton3<D>::LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition value) const
{
    check_hresult(WINRT_SHIM(IAppBarButton3)->put_LabelPosition(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics3<D>::LabelPositionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarButtonStatics3)->get_LabelPositionProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics3<D>::IsInOverflowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarButtonStatics3)->get_IsInOverflowProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics3<D>::DynamicOverflowOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarButtonStatics3)->get_DynamicOverflowOrderProperty(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IAppBarToggleButton<D>::Label() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IAppBarToggleButton)->get_Label(put_abi(value)));
    return value;
}

template <typename D> void impl_IAppBarToggleButton<D>::Label(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IAppBarToggleButton)->put_Label(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::IconElement impl_IAppBarToggleButton<D>::Icon() const
{
    Windows::UI::Xaml::Controls::IconElement value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarToggleButton)->get_Icon(put_abi(value)));
    return value;
}

template <typename D> void impl_IAppBarToggleButton<D>::Icon(const Windows::UI::Xaml::Controls::IconElement & value) const
{
    check_hresult(WINRT_SHIM(IAppBarToggleButton)->put_Icon(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics<D>::LabelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarToggleButtonStatics)->get_LabelProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics<D>::IconProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarToggleButtonStatics)->get_IconProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics<D>::IsCompactProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarToggleButtonStatics)->get_IsCompactProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AppBarToggleButton impl_IAppBarToggleButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::AppBarToggleButton instance { nullptr };
    check_hresult(WINRT_SHIM(IAppBarToggleButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarLabelPosition impl_IAppBarToggleButton3<D>::LabelPosition() const
{
    Windows::UI::Xaml::Controls::CommandBarLabelPosition value {};
    check_hresult(WINRT_SHIM(IAppBarToggleButton3)->get_LabelPosition(&value));
    return value;
}

template <typename D> void impl_IAppBarToggleButton3<D>::LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition value) const
{
    check_hresult(WINRT_SHIM(IAppBarToggleButton3)->put_LabelPosition(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics3<D>::LabelPositionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarToggleButtonStatics3)->get_LabelPositionProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics3<D>::IsInOverflowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarToggleButtonStatics3)->get_IsInOverflowProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics3<D>::DynamicOverflowOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IAppBarToggleButtonStatics3)->get_DynamicOverflowOrderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::GridView impl_IGridViewFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GridView instance { nullptr };
    check_hresult(WINRT_SHIM(IGridViewFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::ListView impl_IListViewFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListView instance { nullptr };
    check_hresult(WINRT_SHIM(IListViewFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Interop::TypeName impl_IControlTemplate<D>::TargetType() const
{
    Windows::UI::Xaml::Interop::TypeName value {};
    check_hresult(WINRT_SHIM(IControlTemplate)->get_TargetType(put_abi(value)));
    return value;
}

template <typename D> void impl_IControlTemplate<D>::TargetType(const Windows::UI::Xaml::Interop::TypeName & value) const
{
    check_hresult(WINRT_SHIM(IControlTemplate)->put_TargetType(get_abi(value)));
}

template <typename D> double impl_IControl<D>::FontSize() const
{
    double value {};
    check_hresult(WINRT_SHIM(IControl)->get_FontSize(&value));
    return value;
}

template <typename D> void impl_IControl<D>::FontSize(double value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_IControl<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(WINRT_SHIM(IControl)->get_FontFamily(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl<D>::FontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_FontFamily(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_IControl<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(WINRT_SHIM(IControl)->get_FontWeight(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl<D>::FontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_FontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontStyle impl_IControl<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(WINRT_SHIM(IControl)->get_FontStyle(&value));
    return value;
}

template <typename D> void impl_IControl<D>::FontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_FontStyle(value));
}

template <typename D> Windows::UI::Text::FontStretch impl_IControl<D>::FontStretch() const
{
    Windows::UI::Text::FontStretch value {};
    check_hresult(WINRT_SHIM(IControl)->get_FontStretch(&value));
    return value;
}

template <typename D> void impl_IControl<D>::FontStretch(Windows::UI::Text::FontStretch value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_FontStretch(value));
}

template <typename D> int32_t impl_IControl<D>::CharacterSpacing() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IControl)->get_CharacterSpacing(&value));
    return value;
}

template <typename D> void impl_IControl<D>::CharacterSpacing(int32_t value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_CharacterSpacing(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IControl<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IControl)->get_Foreground(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl<D>::Foreground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_Foreground(get_abi(value)));
}

template <typename D> bool impl_IControl<D>::IsTabStop() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IControl)->get_IsTabStop(&value));
    return value;
}

template <typename D> void impl_IControl<D>::IsTabStop(bool value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_IsTabStop(value));
}

template <typename D> bool impl_IControl<D>::IsEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IControl)->get_IsEnabled(&value));
    return value;
}

template <typename D> void impl_IControl<D>::IsEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_IsEnabled(value));
}

template <typename D> int32_t impl_IControl<D>::TabIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IControl)->get_TabIndex(&value));
    return value;
}

template <typename D> void impl_IControl<D>::TabIndex(int32_t value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_TabIndex(value));
}

template <typename D> Windows::UI::Xaml::Input::KeyboardNavigationMode impl_IControl<D>::TabNavigation() const
{
    Windows::UI::Xaml::Input::KeyboardNavigationMode value {};
    check_hresult(WINRT_SHIM(IControl)->get_TabNavigation(&value));
    return value;
}

template <typename D> void impl_IControl<D>::TabNavigation(Windows::UI::Xaml::Input::KeyboardNavigationMode value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_TabNavigation(value));
}

template <typename D> Windows::UI::Xaml::Controls::ControlTemplate impl_IControl<D>::Template() const
{
    Windows::UI::Xaml::Controls::ControlTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IControl)->get_Template(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl<D>::Template(const Windows::UI::Xaml::Controls::ControlTemplate & value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_Template(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IControl<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IControl)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_Padding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_IControl<D>::HorizontalContentAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(WINRT_SHIM(IControl)->get_HorizontalContentAlignment(&value));
    return value;
}

template <typename D> void impl_IControl<D>::HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_HorizontalContentAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_IControl<D>::VerticalContentAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(WINRT_SHIM(IControl)->get_VerticalContentAlignment(&value));
    return value;
}

template <typename D> void impl_IControl<D>::VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_VerticalContentAlignment(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IControl<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IControl)->get_Background(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl<D>::Background(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_Background(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IControl<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(WINRT_SHIM(IControl)->get_BorderThickness(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_BorderThickness(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IControl<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IControl)->get_BorderBrush(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(WINRT_SHIM(IControl)->put_BorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::FocusState impl_IControl<D>::FocusState() const
{
    Windows::UI::Xaml::FocusState value {};
    check_hresult(WINRT_SHIM(IControl)->get_FocusState(&value));
    return value;
}

template <typename D> event_token impl_IControl<D>::IsEnabledChanged(const Windows::UI::Xaml::DependencyPropertyChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IControl)->add_IsEnabledChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IControl> impl_IControl<D>::IsEnabledChanged(auto_revoke_t, const Windows::UI::Xaml::DependencyPropertyChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, IControl>(this, &ABI::Windows::UI::Xaml::Controls::IControl::remove_IsEnabledChanged, IsEnabledChanged(value));
}

template <typename D> void impl_IControl<D>::IsEnabledChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IControl)->remove_IsEnabledChanged(token));
}

template <typename D> bool impl_IControl<D>::ApplyTemplate() const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IControl)->abi_ApplyTemplate(&returnValue));
    return returnValue;
}

template <typename D> bool impl_IControl<D>::Focus(Windows::UI::Xaml::FocusState value) const
{
    bool returnValue {};
    check_hresult(WINRT_SHIM(IControl)->abi_Focus(value, &returnValue));
    return returnValue;
}

template <typename D> void impl_IControlOverrides<D>::OnPointerEntered(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnPointerEntered(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerPressed(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnPointerPressed(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerMoved(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnPointerMoved(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerReleased(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnPointerReleased(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerExited(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnPointerExited(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerCaptureLost(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnPointerCaptureLost(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerCanceled(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnPointerCanceled(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerWheelChanged(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnPointerWheelChanged(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnTapped(const Windows::UI::Xaml::Input::TappedRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnTapped(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnDoubleTapped(const Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnDoubleTapped(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnHolding(const Windows::UI::Xaml::Input::HoldingRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnHolding(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnRightTapped(const Windows::UI::Xaml::Input::RightTappedRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnRightTapped(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnManipulationStarting(const Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnManipulationStarting(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnManipulationInertiaStarting(const Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnManipulationInertiaStarting(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnManipulationStarted(const Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnManipulationStarted(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnManipulationDelta(const Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnManipulationDelta(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnManipulationCompleted(const Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnManipulationCompleted(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnKeyUp(const Windows::UI::Xaml::Input::KeyRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnKeyUp(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnKeyDown(const Windows::UI::Xaml::Input::KeyRoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnKeyDown(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnGotFocus(const Windows::UI::Xaml::RoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnGotFocus(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnLostFocus(const Windows::UI::Xaml::RoutedEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnLostFocus(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnDragEnter(const Windows::UI::Xaml::DragEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnDragEnter(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnDragLeave(const Windows::UI::Xaml::DragEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnDragLeave(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnDragOver(const Windows::UI::Xaml::DragEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnDragOver(get_abi(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnDrop(const Windows::UI::Xaml::DragEventArgs & e) const
{
    check_hresult(WINRT_SHIM(IControlOverrides)->abi_OnDrop(get_abi(e)));
}

template <typename D> Windows::Foundation::IInspectable impl_IControlProtected<D>::DefaultStyleKey() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IControlProtected)->get_DefaultStyleKey(put_abi(value)));
    return value;
}

template <typename D> void impl_IControlProtected<D>::DefaultStyleKey(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IControlProtected)->put_DefaultStyleKey(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IControlProtected<D>::GetTemplateChild(hstring_view childName) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(WINRT_SHIM(IControlProtected)->abi_GetTemplateChild(get_abi(childName), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_FontSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_FontFamilyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_FontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_FontStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FontStretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_FontStretchProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::CharacterSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_CharacterSpacingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_ForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::IsTabStopProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_IsTabStopProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::IsEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_IsEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::TabIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_TabIndexProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::TabNavigationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_TabNavigationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::TemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_TemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::HorizontalContentAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_HorizontalContentAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::VerticalContentAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_VerticalContentAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_BackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_BorderThicknessProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_BorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::DefaultStyleKeyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_DefaultStyleKeyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FocusStateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics)->get_FocusStateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Control impl_IControlFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Control instance { nullptr };
    check_hresult(WINRT_SHIM(IControlFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> bool impl_IControl2<D>::IsTextScaleFactorEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IControl2)->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void impl_IControl2<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IControl2)->put_IsTextScaleFactorEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics2<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics2)->get_IsTextScaleFactorEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IControl3<D>::UseSystemFocusVisuals() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IControl3)->get_UseSystemFocusVisuals(&value));
    return value;
}

template <typename D> void impl_IControl3<D>::UseSystemFocusVisuals(bool value) const
{
    check_hresult(WINRT_SHIM(IControl3)->put_UseSystemFocusVisuals(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics3<D>::UseSystemFocusVisualsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics3)->get_UseSystemFocusVisualsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics3<D>::IsTemplateFocusTargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics3)->get_IsTemplateFocusTargetProperty(put_abi(value)));
    return value;
}

template <typename D> bool impl_IControlStatics3<D>::GetIsTemplateFocusTarget(const Windows::UI::Xaml::FrameworkElement & element) const
{
    bool value {};
    check_hresult(WINRT_SHIM(IControlStatics3)->abi_GetIsTemplateFocusTarget(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IControlStatics3<D>::SetIsTemplateFocusTarget(const Windows::UI::Xaml::FrameworkElement & element, bool value) const
{
    check_hresult(WINRT_SHIM(IControlStatics3)->abi_SetIsTemplateFocusTarget(get_abi(element), value));
}

template <typename D> bool impl_IControl4<D>::IsFocusEngagementEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IControl4)->get_IsFocusEngagementEnabled(&value));
    return value;
}

template <typename D> void impl_IControl4<D>::IsFocusEngagementEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IControl4)->put_IsFocusEngagementEnabled(value));
}

template <typename D> bool impl_IControl4<D>::IsFocusEngaged() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IControl4)->get_IsFocusEngaged(&value));
    return value;
}

template <typename D> void impl_IControl4<D>::IsFocusEngaged(bool value) const
{
    check_hresult(WINRT_SHIM(IControl4)->put_IsFocusEngaged(value));
}

template <typename D> Windows::UI::Xaml::Controls::RequiresPointer impl_IControl4<D>::RequiresPointer() const
{
    Windows::UI::Xaml::Controls::RequiresPointer value {};
    check_hresult(WINRT_SHIM(IControl4)->get_RequiresPointer(&value));
    return value;
}

template <typename D> void impl_IControl4<D>::RequiresPointer(Windows::UI::Xaml::Controls::RequiresPointer value) const
{
    check_hresult(WINRT_SHIM(IControl4)->put_RequiresPointer(value));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IControl4<D>::XYFocusLeft() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(WINRT_SHIM(IControl4)->get_XYFocusLeft(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl4<D>::XYFocusLeft(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(WINRT_SHIM(IControl4)->put_XYFocusLeft(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IControl4<D>::XYFocusRight() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(WINRT_SHIM(IControl4)->get_XYFocusRight(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl4<D>::XYFocusRight(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(WINRT_SHIM(IControl4)->put_XYFocusRight(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IControl4<D>::XYFocusUp() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(WINRT_SHIM(IControl4)->get_XYFocusUp(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl4<D>::XYFocusUp(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(WINRT_SHIM(IControl4)->put_XYFocusUp(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IControl4<D>::XYFocusDown() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(WINRT_SHIM(IControl4)->get_XYFocusDown(put_abi(value)));
    return value;
}

template <typename D> void impl_IControl4<D>::XYFocusDown(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(WINRT_SHIM(IControl4)->put_XYFocusDown(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::ElementSoundMode impl_IControl4<D>::ElementSoundMode() const
{
    Windows::UI::Xaml::ElementSoundMode value {};
    check_hresult(WINRT_SHIM(IControl4)->get_ElementSoundMode(&value));
    return value;
}

template <typename D> void impl_IControl4<D>::ElementSoundMode(Windows::UI::Xaml::ElementSoundMode value) const
{
    check_hresult(WINRT_SHIM(IControl4)->put_ElementSoundMode(value));
}

template <typename D> event_token impl_IControl4<D>::FocusEngaged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusEngagedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IControl4)->add_FocusEngaged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IControl4> impl_IControl4<D>::FocusEngaged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusEngagedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IControl4>(this, &ABI::Windows::UI::Xaml::Controls::IControl4::remove_FocusEngaged, FocusEngaged(value));
}

template <typename D> void impl_IControl4<D>::FocusEngaged(event_token token) const
{
    check_hresult(WINRT_SHIM(IControl4)->remove_FocusEngaged(token));
}

template <typename D> event_token impl_IControl4<D>::FocusDisengaged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IControl4)->add_FocusDisengaged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IControl4> impl_IControl4<D>::FocusDisengaged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IControl4>(this, &ABI::Windows::UI::Xaml::Controls::IControl4::remove_FocusDisengaged, FocusDisengaged(value));
}

template <typename D> void impl_IControl4<D>::FocusDisengaged(event_token token) const
{
    check_hresult(WINRT_SHIM(IControl4)->remove_FocusDisengaged(token));
}

template <typename D> void impl_IControl4<D>::RemoveFocusEngagement() const
{
    check_hresult(WINRT_SHIM(IControl4)->abi_RemoveFocusEngagement());
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::IsFocusEngagementEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics4)->get_IsFocusEngagementEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::IsFocusEngagedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics4)->get_IsFocusEngagedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::RequiresPointerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics4)->get_RequiresPointerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::XYFocusLeftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics4)->get_XYFocusLeftProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::XYFocusRightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics4)->get_XYFocusRightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::XYFocusUpProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics4)->get_XYFocusUpProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::XYFocusDownProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics4)->get_XYFocusDownProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::ElementSoundModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IControlStatics4)->get_ElementSoundModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkToolbarCustomPen<D>::CreateInkDrawingAttributes(const Windows::UI::Xaml::Media::Brush & brush, double strokeWidth) const
{
    Windows::UI::Input::Inking::InkDrawingAttributes returnValue { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomPen)->abi_CreateInkDrawingAttributes(get_abi(brush), strokeWidth, put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkToolbarCustomPenOverrides<D>::CreateInkDrawingAttributesCore(const Windows::UI::Xaml::Media::Brush & brush, double strokeWidth) const
{
    Windows::UI::Input::Inking::InkDrawingAttributes returnValue { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomPenOverrides)->abi_CreateInkDrawingAttributesCore(get_abi(brush), strokeWidth, put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarCustomPen impl_IInkToolbarCustomPenFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarCustomPen instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomPenFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarInitialControls impl_IInkToolbar<D>::InitialControls() const
{
    Windows::UI::Xaml::Controls::InkToolbarInitialControls value {};
    check_hresult(WINRT_SHIM(IInkToolbar)->get_InitialControls(&value));
    return value;
}

template <typename D> void impl_IInkToolbar<D>::InitialControls(Windows::UI::Xaml::Controls::InkToolbarInitialControls value) const
{
    check_hresult(WINRT_SHIM(IInkToolbar)->put_InitialControls(value));
}

template <typename D> Windows::UI::Xaml::DependencyObjectCollection impl_IInkToolbar<D>::Children() const
{
    Windows::UI::Xaml::DependencyObjectCollection value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbar)->get_Children(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarToolButton impl_IInkToolbar<D>::ActiveTool() const
{
    Windows::UI::Xaml::Controls::InkToolbarToolButton value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbar)->get_ActiveTool(put_abi(value)));
    return value;
}

template <typename D> void impl_IInkToolbar<D>::ActiveTool(const Windows::UI::Xaml::Controls::InkToolbarToolButton & value) const
{
    check_hresult(WINRT_SHIM(IInkToolbar)->put_ActiveTool(get_abi(value)));
}

template <typename D> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkToolbar<D>::InkDrawingAttributes() const
{
    Windows::UI::Input::Inking::InkDrawingAttributes value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbar)->get_InkDrawingAttributes(put_abi(value)));
    return value;
}

template <typename D> bool impl_IInkToolbar<D>::IsRulerButtonChecked() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IInkToolbar)->get_IsRulerButtonChecked(&value));
    return value;
}

template <typename D> void impl_IInkToolbar<D>::IsRulerButtonChecked(bool value) const
{
    check_hresult(WINRT_SHIM(IInkToolbar)->put_IsRulerButtonChecked(value));
}

template <typename D> Windows::UI::Xaml::Controls::InkCanvas impl_IInkToolbar<D>::TargetInkCanvas() const
{
    Windows::UI::Xaml::Controls::InkCanvas value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbar)->get_TargetInkCanvas(put_abi(value)));
    return value;
}

template <typename D> void impl_IInkToolbar<D>::TargetInkCanvas(const Windows::UI::Xaml::Controls::InkCanvas & value) const
{
    check_hresult(WINRT_SHIM(IInkToolbar)->put_TargetInkCanvas(get_abi(value)));
}

template <typename D> event_token impl_IInkToolbar<D>::ActiveToolChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IInkToolbar)->add_ActiveToolChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IInkToolbar> impl_IInkToolbar<D>::ActiveToolChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IInkToolbar>(this, &ABI::Windows::UI::Xaml::Controls::IInkToolbar::remove_ActiveToolChanged, ActiveToolChanged(value));
}

template <typename D> void impl_IInkToolbar<D>::ActiveToolChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IInkToolbar)->remove_ActiveToolChanged(token));
}

template <typename D> event_token impl_IInkToolbar<D>::InkDrawingAttributesChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IInkToolbar)->add_InkDrawingAttributesChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IInkToolbar> impl_IInkToolbar<D>::InkDrawingAttributesChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IInkToolbar>(this, &ABI::Windows::UI::Xaml::Controls::IInkToolbar::remove_InkDrawingAttributesChanged, InkDrawingAttributesChanged(value));
}

template <typename D> void impl_IInkToolbar<D>::InkDrawingAttributesChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IInkToolbar)->remove_InkDrawingAttributesChanged(token));
}

template <typename D> event_token impl_IInkToolbar<D>::EraseAllClicked(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IInkToolbar)->add_EraseAllClicked(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IInkToolbar> impl_IInkToolbar<D>::EraseAllClicked(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IInkToolbar>(this, &ABI::Windows::UI::Xaml::Controls::IInkToolbar::remove_EraseAllClicked, EraseAllClicked(value));
}

template <typename D> void impl_IInkToolbar<D>::EraseAllClicked(event_token token) const
{
    check_hresult(WINRT_SHIM(IInkToolbar)->remove_EraseAllClicked(token));
}

template <typename D> event_token impl_IInkToolbar<D>::IsRulerButtonCheckedChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IInkToolbar)->add_IsRulerButtonCheckedChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IInkToolbar> impl_IInkToolbar<D>::IsRulerButtonCheckedChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IInkToolbar>(this, &ABI::Windows::UI::Xaml::Controls::IInkToolbar::remove_IsRulerButtonCheckedChanged, IsRulerButtonCheckedChanged(value));
}

template <typename D> void impl_IInkToolbar<D>::IsRulerButtonCheckedChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IInkToolbar)->remove_IsRulerButtonCheckedChanged(token));
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarToolButton impl_IInkToolbar<D>::GetToolButton(Windows::UI::Xaml::Controls::InkToolbarTool tool) const
{
    Windows::UI::Xaml::Controls::InkToolbarToolButton returnValue { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbar)->abi_GetToolButton(tool, put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarToggleButton impl_IInkToolbar<D>::GetToggleButton(Windows::UI::Xaml::Controls::InkToolbarToggle tool) const
{
    Windows::UI::Xaml::Controls::InkToolbarToggleButton returnValue { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbar)->abi_GetToggleButton(tool, put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::InitialControlsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarStatics)->get_InitialControlsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::ChildrenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarStatics)->get_ChildrenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::ActiveToolProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarStatics)->get_ActiveToolProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::InkDrawingAttributesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarStatics)->get_InkDrawingAttributesProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::IsRulerButtonCheckedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarStatics)->get_IsRulerButtonCheckedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::TargetInkCanvasProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarStatics)->get_TargetInkCanvasProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbar impl_IInkToolbarFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbar instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarPenButton impl_IInkToolbarPenConfigurationControl<D>::PenButton() const
{
    Windows::UI::Xaml::Controls::InkToolbarPenButton value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPenConfigurationControl)->get_PenButton(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenConfigurationControlStatics<D>::PenButtonProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPenConfigurationControlStatics)->get_PenButtonProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl impl_IInkToolbarPenConfigurationControlFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPenConfigurationControlFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarToggle impl_IInkToolbarToggleButton<D>::ToggleKind() const
{
    Windows::UI::Xaml::Controls::InkToolbarToggle value {};
    check_hresult(WINRT_SHIM(IInkToolbarToggleButton)->get_ToggleKind(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarTool impl_IInkToolbarToolButton<D>::ToolKind() const
{
    Windows::UI::Xaml::Controls::InkToolbarTool value {};
    check_hresult(WINRT_SHIM(IInkToolbarToolButton)->get_ToolKind(&value));
    return value;
}

template <typename D> bool impl_IInkToolbarToolButton<D>::IsExtensionGlyphShown() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IInkToolbarToolButton)->get_IsExtensionGlyphShown(&value));
    return value;
}

template <typename D> void impl_IInkToolbarToolButton<D>::IsExtensionGlyphShown(bool value) const
{
    check_hresult(WINRT_SHIM(IInkToolbarToolButton)->put_IsExtensionGlyphShown(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarToolButtonStatics<D>::IsExtensionGlyphShownProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarToolButtonStatics)->get_IsExtensionGlyphShownProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton impl_IInkToolbarCustomToggleButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomToggleButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IInkToolbarCustomToolButton<D>::ConfigurationContent() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomToolButton)->get_ConfigurationContent(put_abi(value)));
    return value;
}

template <typename D> void impl_IInkToolbarCustomToolButton<D>::ConfigurationContent(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IInkToolbarCustomToolButton)->put_ConfigurationContent(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarCustomToolButtonStatics<D>::ConfigurationContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomToolButtonStatics)->get_ConfigurationContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarCustomToolButton impl_IInkToolbarCustomToolButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarCustomToolButton instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomToolButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarEraserButton impl_IInkToolbarEraserButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarEraserButton instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarEraserButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush> impl_IInkToolbarPenButton<D>::Palette() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush> value;
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->get_Palette(put_abi(value)));
    return value;
}

template <typename D> void impl_IInkToolbarPenButton<D>::Palette(const Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush> & value) const
{
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->put_Palette(get_abi(value)));
}

template <typename D> double impl_IInkToolbarPenButton<D>::MinStrokeWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->get_MinStrokeWidth(&value));
    return value;
}

template <typename D> void impl_IInkToolbarPenButton<D>::MinStrokeWidth(double value) const
{
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->put_MinStrokeWidth(value));
}

template <typename D> double impl_IInkToolbarPenButton<D>::MaxStrokeWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->get_MaxStrokeWidth(&value));
    return value;
}

template <typename D> void impl_IInkToolbarPenButton<D>::MaxStrokeWidth(double value) const
{
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->put_MaxStrokeWidth(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IInkToolbarPenButton<D>::SelectedBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->get_SelectedBrush(put_abi(value)));
    return value;
}

template <typename D> int32_t impl_IInkToolbarPenButton<D>::SelectedBrushIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->get_SelectedBrushIndex(&value));
    return value;
}

template <typename D> void impl_IInkToolbarPenButton<D>::SelectedBrushIndex(int32_t value) const
{
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->put_SelectedBrushIndex(value));
}

template <typename D> double impl_IInkToolbarPenButton<D>::SelectedStrokeWidth() const
{
    double value {};
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->get_SelectedStrokeWidth(&value));
    return value;
}

template <typename D> void impl_IInkToolbarPenButton<D>::SelectedStrokeWidth(double value) const
{
    check_hresult(WINRT_SHIM(IInkToolbarPenButton)->put_SelectedStrokeWidth(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::PaletteProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPenButtonStatics)->get_PaletteProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::MinStrokeWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPenButtonStatics)->get_MinStrokeWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::MaxStrokeWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPenButtonStatics)->get_MaxStrokeWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::SelectedBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPenButtonStatics)->get_SelectedBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::SelectedBrushIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPenButtonStatics)->get_SelectedBrushIndexProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::SelectedStrokeWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPenButtonStatics)->get_SelectedStrokeWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Input::Inking::InkPresenterRuler impl_IInkToolbarRulerButton<D>::Ruler() const
{
    Windows::UI::Input::Inking::InkPresenterRuler value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarRulerButton)->get_Ruler(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarRulerButtonStatics<D>::RulerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarRulerButtonStatics)->get_RulerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarRulerButton impl_IInkToolbarRulerButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarRulerButton instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarRulerButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton impl_IInkToolbarBallpointPenButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarBallpointPenButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarCustomPen impl_IInkToolbarCustomPenButton<D>::CustomPen() const
{
    Windows::UI::Xaml::Controls::InkToolbarCustomPen value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomPenButton)->get_CustomPen(put_abi(value)));
    return value;
}

template <typename D> void impl_IInkToolbarCustomPenButton<D>::CustomPen(const Windows::UI::Xaml::Controls::InkToolbarCustomPen & value) const
{
    check_hresult(WINRT_SHIM(IInkToolbarCustomPenButton)->put_CustomPen(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IInkToolbarCustomPenButton<D>::ConfigurationContent() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomPenButton)->get_ConfigurationContent(put_abi(value)));
    return value;
}

template <typename D> void impl_IInkToolbarCustomPenButton<D>::ConfigurationContent(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IInkToolbarCustomPenButton)->put_ConfigurationContent(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarCustomPenButtonStatics<D>::CustomPenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomPenButtonStatics)->get_CustomPenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarCustomPenButtonStatics<D>::ConfigurationContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomPenButtonStatics)->get_ConfigurationContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarCustomPenButton impl_IInkToolbarCustomPenButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarCustomPenButton instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarCustomPenButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarHighlighterButton impl_IInkToolbarHighlighterButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarHighlighterButton instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarHighlighterButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarPencilButton impl_IInkToolbarPencilButtonFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarPencilButton instance { nullptr };
    check_hresult(WINRT_SHIM(IInkToolbarPencilButtonFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::PivotItem impl_IPivotItemEventArgs<D>::Item() const
{
    Windows::UI::Xaml::Controls::PivotItem value { nullptr };
    check_hresult(WINRT_SHIM(IPivotItemEventArgs)->get_Item(put_abi(value)));
    return value;
}

template <typename D> void impl_IPivotItemEventArgs<D>::Item(const Windows::UI::Xaml::Controls::PivotItem & value) const
{
    check_hresult(WINRT_SHIM(IPivotItemEventArgs)->put_Item(get_abi(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickedEventArgs<D>::OldDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(IDatePickedEventArgs)->get_OldDate(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickedEventArgs<D>::NewDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(IDatePickedEventArgs)->get_NewDate(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IDatePickerFlyoutItem<D>::PrimaryText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IDatePickerFlyoutItem)->get_PrimaryText(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyoutItem<D>::PrimaryText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyoutItem)->put_PrimaryText(get_abi(value)));
}

template <typename D> hstring impl_IDatePickerFlyoutItem<D>::SecondaryText() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IDatePickerFlyoutItem)->get_SecondaryText(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyoutItem<D>::SecondaryText(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyoutItem)->put_SecondaryText(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutItemStatics<D>::PrimaryTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutItemStatics)->get_PrimaryTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutItemStatics<D>::SecondaryTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutItemStatics)->get_SecondaryTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> impl_IItemsPickedEventArgs<D>::AddedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value;
    check_hresult(WINRT_SHIM(IItemsPickedEventArgs)->get_AddedItems(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> impl_IItemsPickedEventArgs<D>::RemovedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value;
    check_hresult(WINRT_SHIM(IItemsPickedEventArgs)->get_RemovedItems(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePickedEventArgs<D>::OldTime() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(WINRT_SHIM(ITimePickedEventArgs)->get_OldTime(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePickedEventArgs<D>::NewTime() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(WINRT_SHIM(ITimePickedEventArgs)->get_NewTime(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IDatePickerFlyout<D>::CalendarIdentifier() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->get_CalendarIdentifier(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::CalendarIdentifier(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->put_CalendarIdentifier(get_abi(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickerFlyout<D>::Date() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->get_Date(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::Date(const Windows::Foundation::DateTime & value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->put_Date(get_abi(value)));
}

template <typename D> bool impl_IDatePickerFlyout<D>::DayVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->get_DayVisible(&value));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::DayVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->put_DayVisible(value));
}

template <typename D> bool impl_IDatePickerFlyout<D>::MonthVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->get_MonthVisible(&value));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::MonthVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->put_MonthVisible(value));
}

template <typename D> bool impl_IDatePickerFlyout<D>::YearVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->get_YearVisible(&value));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::YearVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->put_YearVisible(value));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickerFlyout<D>::MinYear() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->get_MinYear(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::MinYear(const Windows::Foundation::DateTime & value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->put_MinYear(get_abi(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickerFlyout<D>::MaxYear() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->get_MaxYear(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::MaxYear(const Windows::Foundation::DateTime & value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->put_MaxYear(get_abi(value)));
}

template <typename D> event_token impl_IDatePickerFlyout<D>::DatePicked(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::DatePickerFlyout, Windows::UI::Xaml::Controls::DatePickedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->add_DatePicked(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IDatePickerFlyout> impl_IDatePickerFlyout<D>::DatePicked(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::DatePickerFlyout, Windows::UI::Xaml::Controls::DatePickedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IDatePickerFlyout>(this, &ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout::remove_DatePicked, DatePicked(value));
}

template <typename D> void impl_IDatePickerFlyout<D>::DatePicked(event_token token) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->remove_DatePicked(token));
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::DateTime>> impl_IDatePickerFlyout<D>::ShowAtAsync(const Windows::UI::Xaml::FrameworkElement & target) const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::DateTime>> returnValue;
    check_hresult(WINRT_SHIM(IDatePickerFlyout)->abi_ShowAtAsync(get_abi(target), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::CalendarIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutStatics)->get_CalendarIdentifierProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::DateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutStatics)->get_DateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::DayVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutStatics)->get_DayVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::MonthVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutStatics)->get_MonthVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::YearVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutStatics)->get_YearVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::MinYearProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutStatics)->get_MinYearProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::MaxYearProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutStatics)->get_MaxYearProperty(put_abi(value)));
    return value;
}

template <typename D> hstring impl_IDatePickerFlyout2<D>::DayFormat() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IDatePickerFlyout2)->get_DayFormat(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout2<D>::DayFormat(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout2)->put_DayFormat(get_abi(value)));
}

template <typename D> hstring impl_IDatePickerFlyout2<D>::MonthFormat() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IDatePickerFlyout2)->get_MonthFormat(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout2<D>::MonthFormat(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout2)->put_MonthFormat(get_abi(value)));
}

template <typename D> hstring impl_IDatePickerFlyout2<D>::YearFormat() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IDatePickerFlyout2)->get_YearFormat(put_abi(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout2<D>::YearFormat(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IDatePickerFlyout2)->put_YearFormat(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics2<D>::DayFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutStatics2)->get_DayFormatProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics2<D>::MonthFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutStatics2)->get_MonthFormatProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics2<D>::YearFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IDatePickerFlyoutStatics2)->get_YearFormatProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IListPickerFlyout<D>::ItemsSource() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IListPickerFlyout)->get_ItemsSource(put_abi(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::ItemsSource(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IListPickerFlyout)->put_ItemsSource(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IListPickerFlyout<D>::ItemTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IListPickerFlyout)->get_ItemTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::ItemTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IListPickerFlyout)->put_ItemTemplate(get_abi(value)));
}

template <typename D> hstring impl_IListPickerFlyout<D>::DisplayMemberPath() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IListPickerFlyout)->get_DisplayMemberPath(put_abi(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::DisplayMemberPath(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IListPickerFlyout)->put_DisplayMemberPath(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode impl_IListPickerFlyout<D>::SelectionMode() const
{
    Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode value {};
    check_hresult(WINRT_SHIM(IListPickerFlyout)->get_SelectionMode(&value));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::SelectionMode(Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode value) const
{
    check_hresult(WINRT_SHIM(IListPickerFlyout)->put_SelectionMode(value));
}

template <typename D> int32_t impl_IListPickerFlyout<D>::SelectedIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IListPickerFlyout)->get_SelectedIndex(&value));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::SelectedIndex(int32_t value) const
{
    check_hresult(WINRT_SHIM(IListPickerFlyout)->put_SelectedIndex(value));
}

template <typename D> Windows::Foundation::IInspectable impl_IListPickerFlyout<D>::SelectedItem() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IListPickerFlyout)->get_SelectedItem(put_abi(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::SelectedItem(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IListPickerFlyout)->put_SelectedItem(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable impl_IListPickerFlyout<D>::SelectedValue() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IListPickerFlyout)->get_SelectedValue(put_abi(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::SelectedValue(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IListPickerFlyout)->put_SelectedValue(get_abi(value)));
}

template <typename D> hstring impl_IListPickerFlyout<D>::SelectedValuePath() const
{
    hstring value;
    check_hresult(WINRT_SHIM(IListPickerFlyout)->get_SelectedValuePath(put_abi(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::SelectedValuePath(hstring_view value) const
{
    check_hresult(WINRT_SHIM(IListPickerFlyout)->put_SelectedValuePath(get_abi(value)));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> impl_IListPickerFlyout<D>::SelectedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value;
    check_hresult(WINRT_SHIM(IListPickerFlyout)->get_SelectedItems(put_abi(value)));
    return value;
}

template <typename D> event_token impl_IListPickerFlyout<D>::ItemsPicked(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListPickerFlyout, Windows::UI::Xaml::Controls::ItemsPickedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IListPickerFlyout)->add_ItemsPicked(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IListPickerFlyout> impl_IListPickerFlyout<D>::ItemsPicked(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListPickerFlyout, Windows::UI::Xaml::Controls::ItemsPickedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IListPickerFlyout>(this, &ABI::Windows::UI::Xaml::Controls::IListPickerFlyout::remove_ItemsPicked, ItemsPicked(value));
}

template <typename D> void impl_IListPickerFlyout<D>::ItemsPicked(event_token token) const
{
    check_hresult(WINRT_SHIM(IListPickerFlyout)->remove_ItemsPicked(token));
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable>> impl_IListPickerFlyout<D>::ShowAtAsync(const Windows::UI::Xaml::FrameworkElement & target) const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable>> returnValue;
    check_hresult(WINRT_SHIM(IListPickerFlyout)->abi_ShowAtAsync(get_abi(target), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::ItemsSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListPickerFlyoutStatics)->get_ItemsSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::ItemTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListPickerFlyoutStatics)->get_ItemTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::DisplayMemberPathProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListPickerFlyoutStatics)->get_DisplayMemberPathProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::SelectionModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListPickerFlyoutStatics)->get_SelectionModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::SelectedIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListPickerFlyoutStatics)->get_SelectedIndexProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::SelectedItemProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListPickerFlyoutStatics)->get_SelectedItemProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::SelectedValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListPickerFlyoutStatics)->get_SelectedValueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::SelectedValuePathProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IListPickerFlyoutStatics)->get_SelectedValuePathProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IPickerFlyout<D>::Content() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(WINRT_SHIM(IPickerFlyout)->get_Content(put_abi(value)));
    return value;
}

template <typename D> void impl_IPickerFlyout<D>::Content(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(WINRT_SHIM(IPickerFlyout)->put_Content(get_abi(value)));
}

template <typename D> bool impl_IPickerFlyout<D>::ConfirmationButtonsVisible() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IPickerFlyout)->get_ConfirmationButtonsVisible(&value));
    return value;
}

template <typename D> void impl_IPickerFlyout<D>::ConfirmationButtonsVisible(bool value) const
{
    check_hresult(WINRT_SHIM(IPickerFlyout)->put_ConfirmationButtonsVisible(value));
}

template <typename D> event_token impl_IPickerFlyout<D>::Confirmed(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PickerFlyout, Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IPickerFlyout)->add_Confirmed(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IPickerFlyout> impl_IPickerFlyout<D>::Confirmed(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PickerFlyout, Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IPickerFlyout>(this, &ABI::Windows::UI::Xaml::Controls::IPickerFlyout::remove_Confirmed, Confirmed(value));
}

template <typename D> void impl_IPickerFlyout<D>::Confirmed(event_token token) const
{
    check_hresult(WINRT_SHIM(IPickerFlyout)->remove_Confirmed(token));
}

template <typename D> Windows::Foundation::IAsyncOperation<bool> impl_IPickerFlyout<D>::ShowAtAsync(const Windows::UI::Xaml::FrameworkElement & target) const
{
    Windows::Foundation::IAsyncOperation<bool> returnValue;
    check_hresult(WINRT_SHIM(IPickerFlyout)->abi_ShowAtAsync(get_abi(target), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPickerFlyoutStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPickerFlyoutStatics)->get_ContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPickerFlyoutStatics<D>::ConfirmationButtonsVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPickerFlyoutStatics)->get_ConfirmationButtonsVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> hstring impl_ITimePickerFlyout<D>::ClockIdentifier() const
{
    hstring value;
    check_hresult(WINRT_SHIM(ITimePickerFlyout)->get_ClockIdentifier(put_abi(value)));
    return value;
}

template <typename D> void impl_ITimePickerFlyout<D>::ClockIdentifier(hstring_view value) const
{
    check_hresult(WINRT_SHIM(ITimePickerFlyout)->put_ClockIdentifier(get_abi(value)));
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePickerFlyout<D>::Time() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(WINRT_SHIM(ITimePickerFlyout)->get_Time(put_abi(value)));
    return value;
}

template <typename D> void impl_ITimePickerFlyout<D>::Time(const Windows::Foundation::TimeSpan & value) const
{
    check_hresult(WINRT_SHIM(ITimePickerFlyout)->put_Time(get_abi(value)));
}

template <typename D> int32_t impl_ITimePickerFlyout<D>::MinuteIncrement() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(ITimePickerFlyout)->get_MinuteIncrement(&value));
    return value;
}

template <typename D> void impl_ITimePickerFlyout<D>::MinuteIncrement(int32_t value) const
{
    check_hresult(WINRT_SHIM(ITimePickerFlyout)->put_MinuteIncrement(value));
}

template <typename D> event_token impl_ITimePickerFlyout<D>::TimePicked(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TimePickerFlyout, Windows::UI::Xaml::Controls::TimePickedEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(ITimePickerFlyout)->add_TimePicked(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<ITimePickerFlyout> impl_ITimePickerFlyout<D>::TimePicked(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TimePickerFlyout, Windows::UI::Xaml::Controls::TimePickedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITimePickerFlyout>(this, &ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout::remove_TimePicked, TimePicked(value));
}

template <typename D> void impl_ITimePickerFlyout<D>::TimePicked(event_token token) const
{
    check_hresult(WINRT_SHIM(ITimePickerFlyout)->remove_TimePicked(token));
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::TimeSpan>> impl_ITimePickerFlyout<D>::ShowAtAsync(const Windows::UI::Xaml::FrameworkElement & target) const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::TimeSpan>> returnValue;
    check_hresult(WINRT_SHIM(ITimePickerFlyout)->abi_ShowAtAsync(get_abi(target), put_abi(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerFlyoutStatics<D>::ClockIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITimePickerFlyoutStatics)->get_ClockIdentifierProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerFlyoutStatics<D>::TimeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITimePickerFlyoutStatics)->get_TimeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerFlyoutStatics<D>::MinuteIncrementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(ITimePickerFlyoutStatics)->get_MinuteIncrementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IPivot<D>::Title() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IPivot)->get_Title(put_abi(value)));
    return value;
}

template <typename D> void impl_IPivot<D>::Title(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IPivot)->put_Title(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IPivot<D>::TitleTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IPivot)->get_TitleTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IPivot<D>::TitleTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IPivot)->put_TitleTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IPivot<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IPivot)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IPivot<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IPivot)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> int32_t impl_IPivot<D>::SelectedIndex() const
{
    int32_t value {};
    check_hresult(WINRT_SHIM(IPivot)->get_SelectedIndex(&value));
    return value;
}

template <typename D> void impl_IPivot<D>::SelectedIndex(int32_t value) const
{
    check_hresult(WINRT_SHIM(IPivot)->put_SelectedIndex(value));
}

template <typename D> Windows::Foundation::IInspectable impl_IPivot<D>::SelectedItem() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IPivot)->get_SelectedItem(put_abi(value)));
    return value;
}

template <typename D> void impl_IPivot<D>::SelectedItem(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IPivot)->put_SelectedItem(get_abi(value)));
}

template <typename D> bool impl_IPivot<D>::IsLocked() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IPivot)->get_IsLocked(&value));
    return value;
}

template <typename D> void impl_IPivot<D>::IsLocked(bool value) const
{
    check_hresult(WINRT_SHIM(IPivot)->put_IsLocked(value));
}

template <typename D> event_token impl_IPivot<D>::SelectionChanged(const Windows::UI::Xaml::Controls::SelectionChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IPivot)->add_SelectionChanged(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IPivot> impl_IPivot<D>::SelectionChanged(auto_revoke_t, const Windows::UI::Xaml::Controls::SelectionChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, IPivot>(this, &ABI::Windows::UI::Xaml::Controls::IPivot::remove_SelectionChanged, SelectionChanged(value));
}

template <typename D> void impl_IPivot<D>::SelectionChanged(event_token token) const
{
    check_hresult(WINRT_SHIM(IPivot)->remove_SelectionChanged(token));
}

template <typename D> event_token impl_IPivot<D>::PivotItemLoading(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IPivot)->add_PivotItemLoading(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IPivot> impl_IPivot<D>::PivotItemLoading(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    return impl::make_event_revoker<D, IPivot>(this, &ABI::Windows::UI::Xaml::Controls::IPivot::remove_PivotItemLoading, PivotItemLoading(value));
}

template <typename D> void impl_IPivot<D>::PivotItemLoading(event_token token) const
{
    check_hresult(WINRT_SHIM(IPivot)->remove_PivotItemLoading(token));
}

template <typename D> event_token impl_IPivot<D>::PivotItemLoaded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IPivot)->add_PivotItemLoaded(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IPivot> impl_IPivot<D>::PivotItemLoaded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    return impl::make_event_revoker<D, IPivot>(this, &ABI::Windows::UI::Xaml::Controls::IPivot::remove_PivotItemLoaded, PivotItemLoaded(value));
}

template <typename D> void impl_IPivot<D>::PivotItemLoaded(event_token token) const
{
    check_hresult(WINRT_SHIM(IPivot)->remove_PivotItemLoaded(token));
}

template <typename D> event_token impl_IPivot<D>::PivotItemUnloading(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IPivot)->add_PivotItemUnloading(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IPivot> impl_IPivot<D>::PivotItemUnloading(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    return impl::make_event_revoker<D, IPivot>(this, &ABI::Windows::UI::Xaml::Controls::IPivot::remove_PivotItemUnloading, PivotItemUnloading(value));
}

template <typename D> void impl_IPivot<D>::PivotItemUnloading(event_token token) const
{
    check_hresult(WINRT_SHIM(IPivot)->remove_PivotItemUnloading(token));
}

template <typename D> event_token impl_IPivot<D>::PivotItemUnloaded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    event_token token {};
    check_hresult(WINRT_SHIM(IPivot)->add_PivotItemUnloaded(get_abi(value), &token));
    return token;
}

template <typename D> event_revoker<IPivot> impl_IPivot<D>::PivotItemUnloaded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    return impl::make_event_revoker<D, IPivot>(this, &ABI::Windows::UI::Xaml::Controls::IPivot::remove_PivotItemUnloaded, PivotItemUnloaded(value));
}

template <typename D> void impl_IPivot<D>::PivotItemUnloaded(event_token token) const
{
    check_hresult(WINRT_SHIM(IPivot)->remove_PivotItemUnloaded(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::TitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics)->get_TitleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::TitleTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics)->get_TitleTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::SelectedIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics)->get_SelectedIndexProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::SelectedItemProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics)->get_SelectedItemProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::IsLockedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics)->get_IsLockedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::SlideInAnimationGroupProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics)->get_SlideInAnimationGroupProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup impl_IPivotStatics<D>::GetSlideInAnimationGroup(const Windows::UI::Xaml::FrameworkElement & element) const
{
    Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup value {};
    check_hresult(WINRT_SHIM(IPivotStatics)->abi_GetSlideInAnimationGroup(get_abi(element), &value));
    return value;
}

template <typename D> void impl_IPivotStatics<D>::SetSlideInAnimationGroup(const Windows::UI::Xaml::FrameworkElement & element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup value) const
{
    check_hresult(WINRT_SHIM(IPivotStatics)->abi_SetSlideInAnimationGroup(get_abi(element), value));
}

template <typename D> Windows::UI::Xaml::Controls::Pivot impl_IPivotFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Pivot instance { nullptr };
    check_hresult(WINRT_SHIM(IPivotFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IInspectable impl_IPivot2<D>::LeftHeader() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IPivot2)->get_LeftHeader(put_abi(value)));
    return value;
}

template <typename D> void impl_IPivot2<D>::LeftHeader(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IPivot2)->put_LeftHeader(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IPivot2<D>::LeftHeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IPivot2)->get_LeftHeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IPivot2<D>::LeftHeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IPivot2)->put_LeftHeaderTemplate(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable impl_IPivot2<D>::RightHeader() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IPivot2)->get_RightHeader(put_abi(value)));
    return value;
}

template <typename D> void impl_IPivot2<D>::RightHeader(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IPivot2)->put_RightHeader(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IPivot2<D>::RightHeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(WINRT_SHIM(IPivot2)->get_RightHeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void impl_IPivot2<D>::RightHeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(WINRT_SHIM(IPivot2)->put_RightHeaderTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics2<D>::LeftHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics2)->get_LeftHeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics2<D>::LeftHeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics2)->get_LeftHeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics2<D>::RightHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics2)->get_RightHeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics2<D>::RightHeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics2)->get_RightHeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement impl_IPivot3<D>::HeaderFocusVisualPlacement() const
{
    Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement value {};
    check_hresult(WINRT_SHIM(IPivot3)->get_HeaderFocusVisualPlacement(&value));
    return value;
}

template <typename D> void impl_IPivot3<D>::HeaderFocusVisualPlacement(Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement value) const
{
    check_hresult(WINRT_SHIM(IPivot3)->put_HeaderFocusVisualPlacement(value));
}

template <typename D> bool impl_IPivot3<D>::IsHeaderItemsCarouselEnabled() const
{
    bool value {};
    check_hresult(WINRT_SHIM(IPivot3)->get_IsHeaderItemsCarouselEnabled(&value));
    return value;
}

template <typename D> void impl_IPivot3<D>::IsHeaderItemsCarouselEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(IPivot3)->put_IsHeaderItemsCarouselEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics3<D>::HeaderFocusVisualPlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics3)->get_HeaderFocusVisualPlacementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics3<D>::IsHeaderItemsCarouselEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotStatics3)->get_IsHeaderItemsCarouselEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable impl_IPivotItem<D>::Header() const
{
    Windows::Foundation::IInspectable value;
    check_hresult(WINRT_SHIM(IPivotItem)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void impl_IPivotItem<D>::Header(const Windows::Foundation::IInspectable & value) const
{
    check_hresult(WINRT_SHIM(IPivotItem)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotItemStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(WINRT_SHIM(IPivotItemStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PivotItem impl_IPivotItemFactory<D>::CreateInstance(const Windows::Foundation::IInspectable & outer, Windows::Foundation::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::PivotItem instance { nullptr };
    check_hresult(WINRT_SHIM(IPivotItemFactory)->abi_CreateInstance(get_abi(outer), put_abi(inner), put_abi(instance)));
    return instance;
}

inline AppBar::AppBar()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<AppBar, IAppBarFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty AppBar::IsOpenProperty()
{
    return get_activation_factory<AppBar, IAppBarStatics>().IsOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBar::IsStickyProperty()
{
    return get_activation_factory<AppBar, IAppBarStatics>().IsStickyProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBar::ClosedDisplayModeProperty()
{
    return get_activation_factory<AppBar, IAppBarStatics2>().ClosedDisplayModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBar::LightDismissOverlayModeProperty()
{
    return get_activation_factory<AppBar, IAppBarStatics4>().LightDismissOverlayModeProperty();
}

inline AppBarButton::AppBarButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<AppBarButton, IAppBarButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::LabelProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics>().LabelProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::IconProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics>().IconProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::IsCompactProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics>().IsCompactProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::LabelPositionProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics3>().LabelPositionProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::IsInOverflowProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics3>().IsInOverflowProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::DynamicOverflowOrderProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics3>().DynamicOverflowOrderProperty();
}

inline AppBarSeparator::AppBarSeparator()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<AppBarSeparator, IAppBarSeparatorFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty AppBarSeparator::IsCompactProperty()
{
    return get_activation_factory<AppBarSeparator, IAppBarSeparatorStatics>().IsCompactProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarSeparator::IsInOverflowProperty()
{
    return get_activation_factory<AppBarSeparator, IAppBarSeparatorStatics3>().IsInOverflowProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarSeparator::DynamicOverflowOrderProperty()
{
    return get_activation_factory<AppBarSeparator, IAppBarSeparatorStatics3>().DynamicOverflowOrderProperty();
}

inline AppBarToggleButton::AppBarToggleButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<AppBarToggleButton, IAppBarToggleButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::LabelProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics>().LabelProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::IconProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics>().IconProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::IsCompactProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics>().IsCompactProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::LabelPositionProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics3>().LabelPositionProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::IsInOverflowProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics3>().IsInOverflowProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::DynamicOverflowOrderProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics3>().DynamicOverflowOrderProperty();
}

inline AutoSuggestBox::AutoSuggestBox() :
    AutoSuggestBox(activate_instance<AutoSuggestBox>())
{}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::MaxSuggestionListHeightProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().MaxSuggestionListHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::IsSuggestionListOpenProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().IsSuggestionListOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::TextMemberPathProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().TextMemberPathProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::TextProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().TextProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::UpdateTextOnSelectProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().UpdateTextOnSelectProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::PlaceholderTextProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::HeaderProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::AutoMaximizeSuggestionAreaProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().AutoMaximizeSuggestionAreaProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::TextBoxStyleProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().TextBoxStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::QueryIconProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics2>().QueryIconProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::LightDismissOverlayModeProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics3>().LightDismissOverlayModeProperty();
}

inline AutoSuggestBoxQuerySubmittedEventArgs::AutoSuggestBoxQuerySubmittedEventArgs() :
    AutoSuggestBoxQuerySubmittedEventArgs(activate_instance<AutoSuggestBoxQuerySubmittedEventArgs>())
{}

inline AutoSuggestBoxSuggestionChosenEventArgs::AutoSuggestBoxSuggestionChosenEventArgs() :
    AutoSuggestBoxSuggestionChosenEventArgs(activate_instance<AutoSuggestBoxSuggestionChosenEventArgs>())
{}

inline AutoSuggestBoxTextChangedEventArgs::AutoSuggestBoxTextChangedEventArgs() :
    AutoSuggestBoxTextChangedEventArgs(activate_instance<AutoSuggestBoxTextChangedEventArgs>())
{}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBoxTextChangedEventArgs::ReasonProperty()
{
    return get_activation_factory<AutoSuggestBoxTextChangedEventArgs, IAutoSuggestBoxTextChangedEventArgsStatics>().ReasonProperty();
}

inline BackClickEventArgs::BackClickEventArgs() :
    BackClickEventArgs(activate_instance<BackClickEventArgs>())
{}

inline BitmapIcon::BitmapIcon()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<BitmapIcon, IBitmapIconFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty BitmapIcon::UriSourceProperty()
{
    return get_activation_factory<BitmapIcon, IBitmapIconStatics>().UriSourceProperty();
}

inline Border::Border() :
    Border(activate_instance<Border>())
{}

inline Windows::UI::Xaml::DependencyProperty Border::BorderBrushProperty()
{
    return get_activation_factory<Border, IBorderStatics>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty Border::BorderThicknessProperty()
{
    return get_activation_factory<Border, IBorderStatics>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty Border::BackgroundProperty()
{
    return get_activation_factory<Border, IBorderStatics>().BackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty Border::CornerRadiusProperty()
{
    return get_activation_factory<Border, IBorderStatics>().CornerRadiusProperty();
}

inline Windows::UI::Xaml::DependencyProperty Border::PaddingProperty()
{
    return get_activation_factory<Border, IBorderStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty Border::ChildTransitionsProperty()
{
    return get_activation_factory<Border, IBorderStatics>().ChildTransitionsProperty();
}

inline Button::Button()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<Button, IButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Button::FlyoutProperty()
{
    return get_activation_factory<Button, IButtonStaticsWithFlyout>().FlyoutProperty();
}

inline CalendarDatePicker::CalendarDatePicker()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<CalendarDatePicker, ICalendarDatePickerFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::DateProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().DateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::IsCalendarOpenProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().IsCalendarOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::DateFormatProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().DateFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::PlaceholderTextProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::HeaderProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::HeaderTemplateProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::CalendarViewStyleProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().CalendarViewStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::MinDateProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().MinDateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::MaxDateProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().MaxDateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::IsTodayHighlightedProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().IsTodayHighlightedProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::DisplayModeProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().DisplayModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::FirstDayOfWeekProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().FirstDayOfWeekProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::DayOfWeekFormatProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().DayOfWeekFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::CalendarIdentifierProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().CalendarIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::IsOutOfScopeEnabledProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().IsOutOfScopeEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::IsGroupLabelVisibleProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().IsGroupLabelVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::LightDismissOverlayModeProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics2>().LightDismissOverlayModeProperty();
}

inline CalendarView::CalendarView()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<CalendarView, ICalendarViewFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarIdentifierProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DayOfWeekFormatProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DayOfWeekFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::IsGroupLabelVisibleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().IsGroupLabelVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DisplayModeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DisplayModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstDayOfWeekProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstDayOfWeekProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::IsOutOfScopeEnabledProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().IsOutOfScopeEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::IsTodayHighlightedProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().IsTodayHighlightedProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MaxDateProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MaxDateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MinDateProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MinDateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::NumberOfWeeksInViewProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().NumberOfWeeksInViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectedDatesProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectedDatesProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectionModeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectionModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::TemplateSettingsProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().TemplateSettingsProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FocusBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FocusBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectedHoverBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectedHoverBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectedPressedBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectedPressedBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectedBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectedBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::HoverBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().HoverBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::PressedBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().PressedBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarItemBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarItemBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::OutOfScopeBackgroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().OutOfScopeBackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarItemBackgroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarItemBackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::PressedForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().PressedForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::TodayForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().TodayForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::BlackoutForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().BlackoutForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectedForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectedForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::OutOfScopeForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().OutOfScopeForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarItemForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarItemForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DayItemFontFamilyProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DayItemFontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DayItemFontSizeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DayItemFontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DayItemFontStyleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DayItemFontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DayItemFontWeightProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DayItemFontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::TodayFontWeightProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().TodayFontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfMonthLabelFontFamilyProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfMonthLabelFontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfMonthLabelFontSizeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfMonthLabelFontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfMonthLabelFontStyleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfMonthLabelFontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfMonthLabelFontWeightProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfMonthLabelFontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MonthYearItemFontFamilyProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MonthYearItemFontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MonthYearItemFontSizeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MonthYearItemFontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MonthYearItemFontStyleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MonthYearItemFontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MonthYearItemFontWeightProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MonthYearItemFontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfYearDecadeLabelFontFamilyProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfYearDecadeLabelFontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfYearDecadeLabelFontSizeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfYearDecadeLabelFontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfYearDecadeLabelFontStyleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfYearDecadeLabelFontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfYearDecadeLabelFontWeightProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfYearDecadeLabelFontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::HorizontalDayItemAlignmentProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().HorizontalDayItemAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::VerticalDayItemAlignmentProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().VerticalDayItemAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::HorizontalFirstOfMonthLabelAlignmentProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().HorizontalFirstOfMonthLabelAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::VerticalFirstOfMonthLabelAlignmentProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().VerticalFirstOfMonthLabelAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarItemBorderThicknessProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarItemBorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarViewDayItemStyleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarViewDayItemStyleProperty();
}

inline CalendarViewDayItem::CalendarViewDayItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<CalendarViewDayItem, ICalendarViewDayItemFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty CalendarViewDayItem::IsBlackoutProperty()
{
    return get_activation_factory<CalendarViewDayItem, ICalendarViewDayItemStatics>().IsBlackoutProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarViewDayItem::DateProperty()
{
    return get_activation_factory<CalendarViewDayItem, ICalendarViewDayItemStatics>().DateProperty();
}

inline Canvas::Canvas()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<Canvas, ICanvasFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Canvas::LeftProperty()
{
    return get_activation_factory<Canvas, ICanvasStatics>().LeftProperty();
}

inline double Canvas::GetLeft(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<Canvas, ICanvasStatics>().GetLeft(element);
}

inline void Canvas::SetLeft(const Windows::UI::Xaml::UIElement & element, double length)
{
    get_activation_factory<Canvas, ICanvasStatics>().SetLeft(element, length);
}

inline Windows::UI::Xaml::DependencyProperty Canvas::TopProperty()
{
    return get_activation_factory<Canvas, ICanvasStatics>().TopProperty();
}

inline double Canvas::GetTop(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<Canvas, ICanvasStatics>().GetTop(element);
}

inline void Canvas::SetTop(const Windows::UI::Xaml::UIElement & element, double length)
{
    get_activation_factory<Canvas, ICanvasStatics>().SetTop(element, length);
}

inline Windows::UI::Xaml::DependencyProperty Canvas::ZIndexProperty()
{
    return get_activation_factory<Canvas, ICanvasStatics>().ZIndexProperty();
}

inline int32_t Canvas::GetZIndex(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<Canvas, ICanvasStatics>().GetZIndex(element);
}

inline void Canvas::SetZIndex(const Windows::UI::Xaml::UIElement & element, int32_t value)
{
    get_activation_factory<Canvas, ICanvasStatics>().SetZIndex(element, value);
}

inline CaptureElement::CaptureElement() :
    CaptureElement(activate_instance<CaptureElement>())
{}

inline Windows::UI::Xaml::DependencyProperty CaptureElement::SourceProperty()
{
    return get_activation_factory<CaptureElement, ICaptureElementStatics>().SourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty CaptureElement::StretchProperty()
{
    return get_activation_factory<CaptureElement, ICaptureElementStatics>().StretchProperty();
}

inline CheckBox::CheckBox()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<CheckBox, ICheckBoxFactory>().CreateInstance(outer, inner));
}

inline ChoosingGroupHeaderContainerEventArgs::ChoosingGroupHeaderContainerEventArgs() :
    ChoosingGroupHeaderContainerEventArgs(activate_instance<ChoosingGroupHeaderContainerEventArgs>())
{}

inline ChoosingItemContainerEventArgs::ChoosingItemContainerEventArgs() :
    ChoosingItemContainerEventArgs(activate_instance<ChoosingItemContainerEventArgs>())
{}

inline ColumnDefinition::ColumnDefinition() :
    ColumnDefinition(activate_instance<ColumnDefinition>())
{}

inline Windows::UI::Xaml::DependencyProperty ColumnDefinition::WidthProperty()
{
    return get_activation_factory<ColumnDefinition, IColumnDefinitionStatics>().WidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ColumnDefinition::MaxWidthProperty()
{
    return get_activation_factory<ColumnDefinition, IColumnDefinitionStatics>().MaxWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ColumnDefinition::MinWidthProperty()
{
    return get_activation_factory<ColumnDefinition, IColumnDefinitionStatics>().MinWidthProperty();
}

inline ComboBox::ComboBox()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ComboBox, IComboBoxFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::IsDropDownOpenProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics>().IsDropDownOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::MaxDropDownHeightProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics>().MaxDropDownHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::HeaderProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics2>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::HeaderTemplateProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics2>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::PlaceholderTextProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics2>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::LightDismissOverlayModeProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics3>().LightDismissOverlayModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::IsTextSearchEnabledProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics3>().IsTextSearchEnabledProperty();
}

inline ComboBoxItem::ComboBoxItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ComboBoxItem, IComboBoxItemFactory>().CreateInstance(outer, inner));
}

inline CommandBar::CommandBar()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<CommandBar, ICommandBarFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::PrimaryCommandsProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics>().PrimaryCommandsProperty();
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::SecondaryCommandsProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics>().SecondaryCommandsProperty();
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::CommandBarOverflowPresenterStyleProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics2>().CommandBarOverflowPresenterStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::DefaultLabelPositionProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics3>().DefaultLabelPositionProperty();
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::OverflowButtonVisibilityProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics3>().OverflowButtonVisibilityProperty();
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::IsDynamicOverflowEnabledProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics3>().IsDynamicOverflowEnabledProperty();
}

inline CommandBarOverflowPresenter::CommandBarOverflowPresenter()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<CommandBarOverflowPresenter, ICommandBarOverflowPresenterFactory>().CreateInstance(outer, inner));
}

inline ContainerContentChangingEventArgs::ContainerContentChangingEventArgs() :
    ContainerContentChangingEventArgs(activate_instance<ContainerContentChangingEventArgs>())
{}

inline ContentControl::ContentControl()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ContentControl, IContentControlFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ContentControl::ContentProperty()
{
    return get_activation_factory<ContentControl, IContentControlStatics>().ContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentControl::ContentTemplateProperty()
{
    return get_activation_factory<ContentControl, IContentControlStatics>().ContentTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentControl::ContentTemplateSelectorProperty()
{
    return get_activation_factory<ContentControl, IContentControlStatics>().ContentTemplateSelectorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentControl::ContentTransitionsProperty()
{
    return get_activation_factory<ContentControl, IContentControlStatics>().ContentTransitionsProperty();
}

inline ContentDialog::ContentDialog()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ContentDialog, IContentDialogFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::TitleProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().TitleProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::TitleTemplateProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().TitleTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::FullSizeDesiredProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().FullSizeDesiredProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::PrimaryButtonTextProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().PrimaryButtonTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::SecondaryButtonTextProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().SecondaryButtonTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::PrimaryButtonCommandProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().PrimaryButtonCommandProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::SecondaryButtonCommandProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().SecondaryButtonCommandProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::PrimaryButtonCommandParameterProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().PrimaryButtonCommandParameterProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::SecondaryButtonCommandParameterProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().SecondaryButtonCommandParameterProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::IsPrimaryButtonEnabledProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().IsPrimaryButtonEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::IsSecondaryButtonEnabledProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().IsSecondaryButtonEnabledProperty();
}

inline ContentPresenter::ContentPresenter()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ContentPresenter, IContentPresenterFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::ContentProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().ContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::ContentTemplateProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().ContentTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::ContentTemplateSelectorProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().ContentTemplateSelectorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::ContentTransitionsProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().ContentTransitionsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::FontSizeProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().FontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::FontFamilyProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().FontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::FontWeightProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().FontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::FontStyleProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().FontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::FontStretchProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().FontStretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::CharacterSpacingProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().CharacterSpacingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::ForegroundProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().ForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::OpticalMarginAlignmentProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics2>().OpticalMarginAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::TextLineBoundsProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics2>().TextLineBoundsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::IsTextScaleFactorEnabledProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics3>().IsTextScaleFactorEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::TextWrappingProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().TextWrappingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::MaxLinesProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().MaxLinesProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::LineStackingStrategyProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().LineStackingStrategyProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::LineHeightProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().LineHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::BorderBrushProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::BorderThicknessProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::CornerRadiusProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().CornerRadiusProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::PaddingProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::BackgroundProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().BackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::HorizontalContentAlignmentProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().HorizontalContentAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::VerticalContentAlignmentProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().VerticalContentAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FontSizeProperty()
{
    return get_activation_factory<Control, IControlStatics>().FontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FontFamilyProperty()
{
    return get_activation_factory<Control, IControlStatics>().FontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FontWeightProperty()
{
    return get_activation_factory<Control, IControlStatics>().FontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FontStyleProperty()
{
    return get_activation_factory<Control, IControlStatics>().FontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FontStretchProperty()
{
    return get_activation_factory<Control, IControlStatics>().FontStretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::CharacterSpacingProperty()
{
    return get_activation_factory<Control, IControlStatics>().CharacterSpacingProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::ForegroundProperty()
{
    return get_activation_factory<Control, IControlStatics>().ForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::IsTabStopProperty()
{
    return get_activation_factory<Control, IControlStatics>().IsTabStopProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::IsEnabledProperty()
{
    return get_activation_factory<Control, IControlStatics>().IsEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::TabIndexProperty()
{
    return get_activation_factory<Control, IControlStatics>().TabIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::TabNavigationProperty()
{
    return get_activation_factory<Control, IControlStatics>().TabNavigationProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::TemplateProperty()
{
    return get_activation_factory<Control, IControlStatics>().TemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::PaddingProperty()
{
    return get_activation_factory<Control, IControlStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::HorizontalContentAlignmentProperty()
{
    return get_activation_factory<Control, IControlStatics>().HorizontalContentAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::VerticalContentAlignmentProperty()
{
    return get_activation_factory<Control, IControlStatics>().VerticalContentAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::BackgroundProperty()
{
    return get_activation_factory<Control, IControlStatics>().BackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::BorderThicknessProperty()
{
    return get_activation_factory<Control, IControlStatics>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::BorderBrushProperty()
{
    return get_activation_factory<Control, IControlStatics>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::DefaultStyleKeyProperty()
{
    return get_activation_factory<Control, IControlStatics>().DefaultStyleKeyProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FocusStateProperty()
{
    return get_activation_factory<Control, IControlStatics>().FocusStateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::IsTextScaleFactorEnabledProperty()
{
    return get_activation_factory<Control, IControlStatics2>().IsTextScaleFactorEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::UseSystemFocusVisualsProperty()
{
    return get_activation_factory<Control, IControlStatics3>().UseSystemFocusVisualsProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::IsTemplateFocusTargetProperty()
{
    return get_activation_factory<Control, IControlStatics3>().IsTemplateFocusTargetProperty();
}

inline bool Control::GetIsTemplateFocusTarget(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Control, IControlStatics3>().GetIsTemplateFocusTarget(element);
}

inline void Control::SetIsTemplateFocusTarget(const Windows::UI::Xaml::FrameworkElement & element, bool value)
{
    get_activation_factory<Control, IControlStatics3>().SetIsTemplateFocusTarget(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Control::IsFocusEngagementEnabledProperty()
{
    return get_activation_factory<Control, IControlStatics4>().IsFocusEngagementEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::IsFocusEngagedProperty()
{
    return get_activation_factory<Control, IControlStatics4>().IsFocusEngagedProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::RequiresPointerProperty()
{
    return get_activation_factory<Control, IControlStatics4>().RequiresPointerProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::XYFocusLeftProperty()
{
    return get_activation_factory<Control, IControlStatics4>().XYFocusLeftProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::XYFocusRightProperty()
{
    return get_activation_factory<Control, IControlStatics4>().XYFocusRightProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::XYFocusUpProperty()
{
    return get_activation_factory<Control, IControlStatics4>().XYFocusUpProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::XYFocusDownProperty()
{
    return get_activation_factory<Control, IControlStatics4>().XYFocusDownProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::ElementSoundModeProperty()
{
    return get_activation_factory<Control, IControlStatics4>().ElementSoundModeProperty();
}

inline ControlTemplate::ControlTemplate() :
    ControlTemplate(activate_instance<ControlTemplate>())
{}

inline DataTemplateSelector::DataTemplateSelector()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<DataTemplateSelector, IDataTemplateSelectorFactory>().CreateInstance(outer, inner));
}

inline DatePickedEventArgs::DatePickedEventArgs() :
    DatePickedEventArgs(activate_instance<DatePickedEventArgs>())
{}

inline DatePicker::DatePicker()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<DatePicker, IDatePickerFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::HeaderProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::HeaderTemplateProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::CalendarIdentifierProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().CalendarIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::DateProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().DateProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::DayVisibleProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().DayVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::MonthVisibleProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().MonthVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::YearVisibleProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().YearVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::DayFormatProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().DayFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::MonthFormatProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().MonthFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::YearFormatProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().YearFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::MinYearProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().MinYearProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::MaxYearProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().MaxYearProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::OrientationProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::LightDismissOverlayModeProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics2>().LightDismissOverlayModeProperty();
}

inline DatePickerFlyout::DatePickerFlyout() :
    DatePickerFlyout(activate_instance<DatePickerFlyout>())
{}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::CalendarIdentifierProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().CalendarIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::DateProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().DateProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::DayVisibleProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().DayVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::MonthVisibleProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().MonthVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::YearVisibleProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().YearVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::MinYearProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().MinYearProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::MaxYearProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().MaxYearProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::DayFormatProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics2>().DayFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::MonthFormatProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics2>().MonthFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::YearFormatProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics2>().YearFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyoutItem::PrimaryTextProperty()
{
    return get_activation_factory<DatePickerFlyoutItem, IDatePickerFlyoutItemStatics>().PrimaryTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyoutItem::SecondaryTextProperty()
{
    return get_activation_factory<DatePickerFlyoutItem, IDatePickerFlyoutItemStatics>().SecondaryTextProperty();
}

inline DragItemsStartingEventArgs::DragItemsStartingEventArgs() :
    DragItemsStartingEventArgs(activate_instance<DragItemsStartingEventArgs>())
{}

inline DynamicOverflowItemsChangingEventArgs::DynamicOverflowItemsChangingEventArgs() :
    DynamicOverflowItemsChangingEventArgs(activate_instance<DynamicOverflowItemsChangingEventArgs>())
{}

inline FlipView::FlipView()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<FlipView, IFlipViewFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty FlipView::UseTouchAnimationsForAllNavigationProperty()
{
    return get_activation_factory<FlipView, IFlipViewStatics2>().UseTouchAnimationsForAllNavigationProperty();
}

inline FlipViewItem::FlipViewItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<FlipViewItem, IFlipViewItemFactory>().CreateInstance(outer, inner));
}

inline Flyout::Flyout()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<Flyout, IFlyoutFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Flyout::ContentProperty()
{
    return get_activation_factory<Flyout, IFlyoutStatics>().ContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty Flyout::FlyoutPresenterStyleProperty()
{
    return get_activation_factory<Flyout, IFlyoutStatics>().FlyoutPresenterStyleProperty();
}

inline FlyoutPresenter::FlyoutPresenter()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<FlyoutPresenter, IFlyoutPresenterFactory>().CreateInstance(outer, inner));
}

inline FontIcon::FontIcon()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<FontIcon, IFontIconFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::GlyphProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics>().GlyphProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::FontSizeProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics>().FontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::FontFamilyProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics>().FontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::FontWeightProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics>().FontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::FontStyleProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics>().FontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::IsTextScaleFactorEnabledProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics2>().IsTextScaleFactorEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::MirroredWhenRightToLeftProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics3>().MirroredWhenRightToLeftProperty();
}

inline Frame::Frame()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<Frame, IFrameFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Frame::CacheSizeProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().CacheSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::CanGoBackProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().CanGoBackProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::CanGoForwardProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().CanGoForwardProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::CurrentSourcePageTypeProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().CurrentSourcePageTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::SourcePageTypeProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().SourcePageTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::BackStackDepthProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().BackStackDepthProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::BackStackProperty()
{
    return get_activation_factory<Frame, IFrameStatics2>().BackStackProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::ForwardStackProperty()
{
    return get_activation_factory<Frame, IFrameStatics2>().ForwardStackProperty();
}

inline Grid::Grid()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<Grid, IGridFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Grid::RowProperty()
{
    return get_activation_factory<Grid, IGridStatics>().RowProperty();
}

inline int32_t Grid::GetRow(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Grid, IGridStatics>().GetRow(element);
}

inline void Grid::SetRow(const Windows::UI::Xaml::FrameworkElement & element, int32_t value)
{
    get_activation_factory<Grid, IGridStatics>().SetRow(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Grid::ColumnProperty()
{
    return get_activation_factory<Grid, IGridStatics>().ColumnProperty();
}

inline int32_t Grid::GetColumn(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Grid, IGridStatics>().GetColumn(element);
}

inline void Grid::SetColumn(const Windows::UI::Xaml::FrameworkElement & element, int32_t value)
{
    get_activation_factory<Grid, IGridStatics>().SetColumn(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Grid::RowSpanProperty()
{
    return get_activation_factory<Grid, IGridStatics>().RowSpanProperty();
}

inline int32_t Grid::GetRowSpan(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Grid, IGridStatics>().GetRowSpan(element);
}

inline void Grid::SetRowSpan(const Windows::UI::Xaml::FrameworkElement & element, int32_t value)
{
    get_activation_factory<Grid, IGridStatics>().SetRowSpan(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Grid::ColumnSpanProperty()
{
    return get_activation_factory<Grid, IGridStatics>().ColumnSpanProperty();
}

inline int32_t Grid::GetColumnSpan(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Grid, IGridStatics>().GetColumnSpan(element);
}

inline void Grid::SetColumnSpan(const Windows::UI::Xaml::FrameworkElement & element, int32_t value)
{
    get_activation_factory<Grid, IGridStatics>().SetColumnSpan(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Grid::BorderBrushProperty()
{
    return get_activation_factory<Grid, IGridStatics2>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty Grid::BorderThicknessProperty()
{
    return get_activation_factory<Grid, IGridStatics2>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty Grid::CornerRadiusProperty()
{
    return get_activation_factory<Grid, IGridStatics2>().CornerRadiusProperty();
}

inline Windows::UI::Xaml::DependencyProperty Grid::PaddingProperty()
{
    return get_activation_factory<Grid, IGridStatics2>().PaddingProperty();
}

inline GridView::GridView()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<GridView, IGridViewFactory>().CreateInstance(outer, inner));
}

inline GridViewHeaderItem::GridViewHeaderItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<GridViewHeaderItem, IGridViewHeaderItemFactory>().CreateInstance(outer, inner));
}

inline GridViewItem::GridViewItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<GridViewItem, IGridViewItemFactory>().CreateInstance(outer, inner));
}

inline GroupItem::GroupItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<GroupItem, IGroupItemFactory>().CreateInstance(outer, inner));
}

inline GroupStyle::GroupStyle()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<GroupStyle, IGroupStyleFactory>().CreateInstance(outer, inner));
}

inline GroupStyleSelector::GroupStyleSelector()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<GroupStyleSelector, IGroupStyleSelectorFactory>().CreateInstance(outer, inner));
}

inline Hub::Hub()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<Hub, IHubFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Hub::HeaderProperty()
{
    return get_activation_factory<Hub, IHubStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::HeaderTemplateProperty()
{
    return get_activation_factory<Hub, IHubStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::OrientationProperty()
{
    return get_activation_factory<Hub, IHubStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::DefaultSectionIndexProperty()
{
    return get_activation_factory<Hub, IHubStatics>().DefaultSectionIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::SemanticZoomOwnerProperty()
{
    return get_activation_factory<Hub, IHubStatics>().SemanticZoomOwnerProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::IsActiveViewProperty()
{
    return get_activation_factory<Hub, IHubStatics>().IsActiveViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::IsZoomedInViewProperty()
{
    return get_activation_factory<Hub, IHubStatics>().IsZoomedInViewProperty();
}

inline HubSection::HubSection()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<HubSection, IHubSectionFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty HubSection::HeaderProperty()
{
    return get_activation_factory<HubSection, IHubSectionStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty HubSection::HeaderTemplateProperty()
{
    return get_activation_factory<HubSection, IHubSectionStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty HubSection::ContentTemplateProperty()
{
    return get_activation_factory<HubSection, IHubSectionStatics>().ContentTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty HubSection::IsHeaderInteractiveProperty()
{
    return get_activation_factory<HubSection, IHubSectionStatics>().IsHeaderInteractiveProperty();
}

inline HubSectionHeaderClickEventArgs::HubSectionHeaderClickEventArgs() :
    HubSectionHeaderClickEventArgs(activate_instance<HubSectionHeaderClickEventArgs>())
{}

inline HyperlinkButton::HyperlinkButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<HyperlinkButton, IHyperlinkButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty HyperlinkButton::NavigateUriProperty()
{
    return get_activation_factory<HyperlinkButton, IHyperlinkButtonStatics>().NavigateUriProperty();
}

inline Windows::UI::Xaml::DependencyProperty IconElement::ForegroundProperty()
{
    return get_activation_factory<IconElement, IIconElementStatics>().ForegroundProperty();
}

inline Image::Image() :
    Image(activate_instance<Image>())
{}

inline Windows::UI::Xaml::DependencyProperty Image::SourceProperty()
{
    return get_activation_factory<Image, IImageStatics>().SourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty Image::StretchProperty()
{
    return get_activation_factory<Image, IImageStatics>().StretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty Image::NineGridProperty()
{
    return get_activation_factory<Image, IImageStatics>().NineGridProperty();
}

inline Windows::UI::Xaml::DependencyProperty Image::PlayToSourceProperty()
{
    return get_activation_factory<Image, IImageStatics>().PlayToSourceProperty();
}

inline InkCanvas::InkCanvas()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkCanvas, IInkCanvasFactory>().CreateInstance(outer, inner));
}

inline InkToolbar::InkToolbar()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbar, IInkToolbarFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::InitialControlsProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().InitialControlsProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::ChildrenProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().ChildrenProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::ActiveToolProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().ActiveToolProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::InkDrawingAttributesProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().InkDrawingAttributesProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::IsRulerButtonCheckedProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().IsRulerButtonCheckedProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::TargetInkCanvasProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().TargetInkCanvasProperty();
}

inline InkToolbarBallpointPenButton::InkToolbarBallpointPenButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarBallpointPenButton, IInkToolbarBallpointPenButtonFactory>().CreateInstance(outer, inner));
}

inline InkToolbarCustomPenButton::InkToolbarCustomPenButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarCustomPenButton, IInkToolbarCustomPenButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarCustomPenButton::CustomPenProperty()
{
    return get_activation_factory<InkToolbarCustomPenButton, IInkToolbarCustomPenButtonStatics>().CustomPenProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarCustomPenButton::ConfigurationContentProperty()
{
    return get_activation_factory<InkToolbarCustomPenButton, IInkToolbarCustomPenButtonStatics>().ConfigurationContentProperty();
}

inline InkToolbarCustomToggleButton::InkToolbarCustomToggleButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarCustomToggleButton, IInkToolbarCustomToggleButtonFactory>().CreateInstance(outer, inner));
}

inline InkToolbarCustomToolButton::InkToolbarCustomToolButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarCustomToolButton, IInkToolbarCustomToolButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarCustomToolButton::ConfigurationContentProperty()
{
    return get_activation_factory<InkToolbarCustomToolButton, IInkToolbarCustomToolButtonStatics>().ConfigurationContentProperty();
}

inline InkToolbarEraserButton::InkToolbarEraserButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarEraserButton, IInkToolbarEraserButtonFactory>().CreateInstance(outer, inner));
}

inline InkToolbarHighlighterButton::InkToolbarHighlighterButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarHighlighterButton, IInkToolbarHighlighterButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::PaletteProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().PaletteProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::MinStrokeWidthProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().MinStrokeWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::MaxStrokeWidthProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().MaxStrokeWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::SelectedBrushProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().SelectedBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::SelectedBrushIndexProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().SelectedBrushIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::SelectedStrokeWidthProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().SelectedStrokeWidthProperty();
}

inline InkToolbarPenConfigurationControl::InkToolbarPenConfigurationControl()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarPenConfigurationControl, IInkToolbarPenConfigurationControlFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenConfigurationControl::PenButtonProperty()
{
    return get_activation_factory<InkToolbarPenConfigurationControl, IInkToolbarPenConfigurationControlStatics>().PenButtonProperty();
}

inline InkToolbarPencilButton::InkToolbarPencilButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarPencilButton, IInkToolbarPencilButtonFactory>().CreateInstance(outer, inner));
}

inline InkToolbarRulerButton::InkToolbarRulerButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarRulerButton, IInkToolbarRulerButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarRulerButton::RulerProperty()
{
    return get_activation_factory<InkToolbarRulerButton, IInkToolbarRulerButtonStatics>().RulerProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarToolButton::IsExtensionGlyphShownProperty()
{
    return get_activation_factory<InkToolbarToolButton, IInkToolbarToolButtonStatics>().IsExtensionGlyphShownProperty();
}

inline ItemClickEventArgs::ItemClickEventArgs() :
    ItemClickEventArgs(activate_instance<ItemClickEventArgs>())
{}

inline ItemsControl::ItemsControl()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ItemsControl, IItemsControlFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemsSourceProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemsSourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemTemplateProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemTemplateSelectorProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemTemplateSelectorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemsPanelProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemsPanelProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::DisplayMemberPathProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().DisplayMemberPathProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemContainerStyleProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemContainerStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemContainerStyleSelectorProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemContainerStyleSelectorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemContainerTransitionsProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemContainerTransitionsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::GroupStyleSelectorProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().GroupStyleSelectorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::IsGroupingProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().IsGroupingProperty();
}

inline Windows::UI::Xaml::Controls::ItemsControl ItemsControl::GetItemsOwner(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().GetItemsOwner(element);
}

inline Windows::UI::Xaml::Controls::ItemsControl ItemsControl::ItemsControlFromItemContainer(const Windows::UI::Xaml::DependencyObject & container)
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemsControlFromItemContainer(container);
}

inline ItemsPanelTemplate::ItemsPanelTemplate() :
    ItemsPanelTemplate(activate_instance<ItemsPanelTemplate>())
{}

inline ItemsPickedEventArgs::ItemsPickedEventArgs() :
    ItemsPickedEventArgs(activate_instance<ItemsPickedEventArgs>())
{}

inline ItemsPresenter::ItemsPresenter() :
    ItemsPresenter(activate_instance<ItemsPresenter>())
{}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::HeaderProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::HeaderTemplateProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::HeaderTransitionsProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics>().HeaderTransitionsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::PaddingProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::FooterProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics2>().FooterProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::FooterTemplateProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics2>().FooterTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::FooterTransitionsProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics2>().FooterTransitionsProperty();
}

inline ItemsStackPanel::ItemsStackPanel() :
    ItemsStackPanel(activate_instance<ItemsStackPanel>())
{}

inline Windows::UI::Xaml::DependencyProperty ItemsStackPanel::GroupPaddingProperty()
{
    return get_activation_factory<ItemsStackPanel, IItemsStackPanelStatics>().GroupPaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsStackPanel::OrientationProperty()
{
    return get_activation_factory<ItemsStackPanel, IItemsStackPanelStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsStackPanel::GroupHeaderPlacementProperty()
{
    return get_activation_factory<ItemsStackPanel, IItemsStackPanelStatics>().GroupHeaderPlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsStackPanel::CacheLengthProperty()
{
    return get_activation_factory<ItemsStackPanel, IItemsStackPanelStatics>().CacheLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsStackPanel::AreStickyGroupHeadersEnabledProperty()
{
    return get_activation_factory<ItemsStackPanel, IItemsStackPanelStatics2>().AreStickyGroupHeadersEnabledProperty();
}

inline ItemsWrapGrid::ItemsWrapGrid() :
    ItemsWrapGrid(activate_instance<ItemsWrapGrid>())
{}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::GroupPaddingProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().GroupPaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::OrientationProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::MaximumRowsOrColumnsProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().MaximumRowsOrColumnsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::ItemWidthProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().ItemWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::ItemHeightProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().ItemHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::GroupHeaderPlacementProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().GroupHeaderPlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::CacheLengthProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().CacheLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::AreStickyGroupHeadersEnabledProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics2>().AreStickyGroupHeadersEnabledProperty();
}

inline ListBox::ListBox()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ListBox, IListBoxFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ListBox::SelectionModeProperty()
{
    return get_activation_factory<ListBox, IListBoxStatics>().SelectionModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListBox::SingleSelectionFollowsFocusProperty()
{
    return get_activation_factory<ListBox, IListBoxStatics2>().SingleSelectionFollowsFocusProperty();
}

inline ListBoxItem::ListBoxItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ListBoxItem, IListBoxItemFactory>().CreateInstance(outer, inner));
}

inline ListPickerFlyout::ListPickerFlyout() :
    ListPickerFlyout(activate_instance<ListPickerFlyout>())
{}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::ItemsSourceProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().ItemsSourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::ItemTemplateProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().ItemTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::DisplayMemberPathProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().DisplayMemberPathProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::SelectionModeProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().SelectionModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::SelectedIndexProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().SelectedIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::SelectedItemProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().SelectedItemProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::SelectedValueProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().SelectedValueProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::SelectedValuePathProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().SelectedValuePathProperty();
}

inline ListView::ListView()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ListView, IListViewFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::SelectionModeProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().SelectionModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IsSwipeEnabledProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IsSwipeEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::CanDragItemsProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().CanDragItemsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::CanReorderItemsProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().CanReorderItemsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IsItemClickEnabledProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IsItemClickEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::DataFetchSizeProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().DataFetchSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IncrementalLoadingThresholdProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IncrementalLoadingThresholdProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IncrementalLoadingTriggerProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IncrementalLoadingTriggerProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::SemanticZoomOwnerProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().SemanticZoomOwnerProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IsActiveViewProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IsActiveViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IsZoomedInViewProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IsZoomedInViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::HeaderProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::HeaderTemplateProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::HeaderTransitionsProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().HeaderTransitionsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::ShowsScrollingPlaceholdersProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics2>().ShowsScrollingPlaceholdersProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::FooterProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics2>().FooterProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::FooterTemplateProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics2>().FooterTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::FooterTransitionsProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics2>().FooterTransitionsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::ReorderModeProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics3>().ReorderModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IsMultiSelectCheckBoxEnabledProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics4>().IsMultiSelectCheckBoxEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::SingleSelectionFollowsFocusProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics5>().SingleSelectionFollowsFocusProperty();
}

inline ListViewHeaderItem::ListViewHeaderItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ListViewHeaderItem, IListViewHeaderItemFactory>().CreateInstance(outer, inner));
}

inline ListViewItem::ListViewItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ListViewItem, IListViewItemFactory>().CreateInstance(outer, inner));
}

inline hstring ListViewPersistenceHelper::GetRelativeScrollPosition(const Windows::UI::Xaml::Controls::ListViewBase & listViewBase, const Windows::UI::Xaml::Controls::ListViewItemToKeyHandler & itemToKeyHandler)
{
    return get_activation_factory<ListViewPersistenceHelper, IListViewPersistenceHelperStatics>().GetRelativeScrollPosition(listViewBase, itemToKeyHandler);
}

inline Windows::Foundation::IAsyncAction ListViewPersistenceHelper::SetRelativeScrollPositionAsync(const Windows::UI::Xaml::Controls::ListViewBase & listViewBase, hstring_view relativeScrollPosition, const Windows::UI::Xaml::Controls::ListViewKeyToItemHandler & keyToItemHandler)
{
    return get_activation_factory<ListViewPersistenceHelper, IListViewPersistenceHelperStatics>().SetRelativeScrollPositionAsync(listViewBase, relativeScrollPosition, keyToItemHandler);
}

inline MediaElement::MediaElement() :
    MediaElement(activate_instance<MediaElement>())
{}

inline Windows::UI::Xaml::DependencyProperty MediaElement::PosterSourceProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().PosterSourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::SourceProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().SourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::IsMutedProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().IsMutedProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::IsAudioOnlyProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().IsAudioOnlyProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AutoPlayProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AutoPlayProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::VolumeProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().VolumeProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::BalanceProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().BalanceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::NaturalVideoHeightProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().NaturalVideoHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::NaturalVideoWidthProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().NaturalVideoWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::NaturalDurationProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().NaturalDurationProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::PositionProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().PositionProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::DownloadProgressProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().DownloadProgressProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::BufferingProgressProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().BufferingProgressProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::DownloadProgressOffsetProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().DownloadProgressOffsetProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::CurrentStateProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().CurrentStateProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::CanSeekProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().CanSeekProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::CanPauseProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().CanPauseProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AudioStreamCountProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AudioStreamCountProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AudioStreamIndexProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AudioStreamIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::PlaybackRateProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().PlaybackRateProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::IsLoopingProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().IsLoopingProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::PlayToSourceProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().PlayToSourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::DefaultPlaybackRateProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().DefaultPlaybackRateProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AspectRatioWidthProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AspectRatioWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AspectRatioHeightProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AspectRatioHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::RealTimePlaybackProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().RealTimePlaybackProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AudioCategoryProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AudioCategoryProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AudioDeviceTypeProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AudioDeviceTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::ProtectionManagerProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().ProtectionManagerProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::Stereo3DVideoPackingModeProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().Stereo3DVideoPackingModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::Stereo3DVideoRenderModeProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().Stereo3DVideoRenderModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::IsStereo3DVideoProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().IsStereo3DVideoProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::ActualStereo3DVideoPackingModeProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().ActualStereo3DVideoPackingModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AreTransportControlsEnabledProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics2>().AreTransportControlsEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::StretchProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics2>().StretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::IsFullWindowProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics2>().IsFullWindowProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::PlayToPreferredSourceUriProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics2>().PlayToPreferredSourceUriProperty();
}

inline MediaPlayerElement::MediaPlayerElement()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<MediaPlayerElement, IMediaPlayerElementFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::SourceProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().SourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::AreTransportControlsEnabledProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().AreTransportControlsEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::PosterSourceProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().PosterSourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::StretchProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().StretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::AutoPlayProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().AutoPlayProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::IsFullWindowProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().IsFullWindowProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::MediaPlayerProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().MediaPlayerProperty();
}

inline MediaPlayerPresenter::MediaPlayerPresenter()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<MediaPlayerPresenter, IMediaPlayerPresenterFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerPresenter::MediaPlayerProperty()
{
    return get_activation_factory<MediaPlayerPresenter, IMediaPlayerPresenterStatics>().MediaPlayerProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerPresenter::StretchProperty()
{
    return get_activation_factory<MediaPlayerPresenter, IMediaPlayerPresenterStatics>().StretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerPresenter::IsFullWindowProperty()
{
    return get_activation_factory<MediaPlayerPresenter, IMediaPlayerPresenterStatics>().IsFullWindowProperty();
}

inline MediaTransportControls::MediaTransportControls()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<MediaTransportControls, IMediaTransportControlsFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFullWindowButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFullWindowButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFullWindowEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFullWindowEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsZoomButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsZoomButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsZoomEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsZoomEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFastForwardButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFastForwardButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFastForwardEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFastForwardEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFastRewindButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFastRewindButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFastRewindEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFastRewindEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsStopButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsStopButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsStopEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsStopEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsVolumeButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsVolumeButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsVolumeEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsVolumeEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsPlaybackRateButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsPlaybackRateButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsPlaybackRateEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsPlaybackRateEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSeekBarVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsSeekBarVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSeekEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsSeekEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsCompactProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsCompactProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSkipForwardButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsSkipForwardButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSkipForwardEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsSkipForwardEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSkipBackwardButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsSkipBackwardButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSkipBackwardEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsSkipBackwardEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsNextTrackButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsNextTrackButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsPreviousTrackButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsPreviousTrackButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::FastPlayFallbackBehaviourProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().FastPlayFallbackBehaviourProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControlsHelper::DropoutOrderProperty()
{
    return get_activation_factory<MediaTransportControlsHelper, IMediaTransportControlsHelperStatics>().DropoutOrderProperty();
}

inline Windows::Foundation::IReference<int32_t> MediaTransportControlsHelper::GetDropoutOrder(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<MediaTransportControlsHelper, IMediaTransportControlsHelperStatics>().GetDropoutOrder(element);
}

inline void MediaTransportControlsHelper::SetDropoutOrder(const Windows::UI::Xaml::UIElement & element, const optional<int32_t> & value)
{
    get_activation_factory<MediaTransportControlsHelper, IMediaTransportControlsHelperStatics>().SetDropoutOrder(element, value);
}

inline MenuFlyout::MenuFlyout()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<MenuFlyout, IMenuFlyoutFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty MenuFlyout::MenuFlyoutPresenterStyleProperty()
{
    return get_activation_factory<MenuFlyout, IMenuFlyoutStatics>().MenuFlyoutPresenterStyleProperty();
}

inline MenuFlyoutItem::MenuFlyoutItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<MenuFlyoutItem, IMenuFlyoutItemFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty MenuFlyoutItem::TextProperty()
{
    return get_activation_factory<MenuFlyoutItem, IMenuFlyoutItemStatics>().TextProperty();
}

inline Windows::UI::Xaml::DependencyProperty MenuFlyoutItem::CommandProperty()
{
    return get_activation_factory<MenuFlyoutItem, IMenuFlyoutItemStatics>().CommandProperty();
}

inline Windows::UI::Xaml::DependencyProperty MenuFlyoutItem::CommandParameterProperty()
{
    return get_activation_factory<MenuFlyoutItem, IMenuFlyoutItemStatics>().CommandParameterProperty();
}

inline MenuFlyoutPresenter::MenuFlyoutPresenter()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<MenuFlyoutPresenter, IMenuFlyoutPresenterFactory>().CreateInstance(outer, inner));
}

inline MenuFlyoutSeparator::MenuFlyoutSeparator()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<MenuFlyoutSeparator, IMenuFlyoutSeparatorFactory>().CreateInstance(outer, inner));
}

inline MenuFlyoutSubItem::MenuFlyoutSubItem() :
    MenuFlyoutSubItem(activate_instance<MenuFlyoutSubItem>())
{}

inline Windows::UI::Xaml::DependencyProperty MenuFlyoutSubItem::TextProperty()
{
    return get_activation_factory<MenuFlyoutSubItem, IMenuFlyoutSubItemStatics>().TextProperty();
}

inline Page::Page()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<Page, IPageFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Page::FrameProperty()
{
    return get_activation_factory<Page, IPageStatics>().FrameProperty();
}

inline Windows::UI::Xaml::DependencyProperty Page::TopAppBarProperty()
{
    return get_activation_factory<Page, IPageStatics>().TopAppBarProperty();
}

inline Windows::UI::Xaml::DependencyProperty Page::BottomAppBarProperty()
{
    return get_activation_factory<Page, IPageStatics>().BottomAppBarProperty();
}

inline Windows::UI::Xaml::DependencyProperty Panel::BackgroundProperty()
{
    return get_activation_factory<Panel, IPanelStatics>().BackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty Panel::IsItemsHostProperty()
{
    return get_activation_factory<Panel, IPanelStatics>().IsItemsHostProperty();
}

inline Windows::UI::Xaml::DependencyProperty Panel::ChildrenTransitionsProperty()
{
    return get_activation_factory<Panel, IPanelStatics>().ChildrenTransitionsProperty();
}

inline PasswordBox::PasswordBox() :
    PasswordBox(activate_instance<PasswordBox>())
{}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::PasswordProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics>().PasswordProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::PasswordCharProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics>().PasswordCharProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::IsPasswordRevealButtonEnabledProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics>().IsPasswordRevealButtonEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::MaxLengthProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics>().MaxLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::HeaderProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics2>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::HeaderTemplateProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics2>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::PlaceholderTextProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics2>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::SelectionHighlightColorProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics2>().SelectionHighlightColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::PreventKeyboardDisplayOnProgrammaticFocusProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics2>().PreventKeyboardDisplayOnProgrammaticFocusProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::PasswordRevealModeProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics3>().PasswordRevealModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::TextReadingOrderProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics3>().TextReadingOrderProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::InputScopeProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics3>().InputScopeProperty();
}

inline PathIcon::PathIcon()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<PathIcon, IPathIconFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty PathIcon::DataProperty()
{
    return get_activation_factory<PathIcon, IPathIconStatics>().DataProperty();
}

inline PickerConfirmedEventArgs::PickerConfirmedEventArgs() :
    PickerConfirmedEventArgs(activate_instance<PickerConfirmedEventArgs>())
{}

inline PickerFlyout::PickerFlyout() :
    PickerFlyout(activate_instance<PickerFlyout>())
{}

inline Windows::UI::Xaml::DependencyProperty PickerFlyout::ContentProperty()
{
    return get_activation_factory<PickerFlyout, IPickerFlyoutStatics>().ContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty PickerFlyout::ConfirmationButtonsVisibleProperty()
{
    return get_activation_factory<PickerFlyout, IPickerFlyoutStatics>().ConfirmationButtonsVisibleProperty();
}

inline Pivot::Pivot()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<Pivot, IPivotFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Pivot::TitleProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().TitleProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::TitleTemplateProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().TitleTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::HeaderTemplateProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::SelectedIndexProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().SelectedIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::SelectedItemProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().SelectedItemProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::IsLockedProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().IsLockedProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::SlideInAnimationGroupProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().SlideInAnimationGroupProperty();
}

inline Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup Pivot::GetSlideInAnimationGroup(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Pivot, IPivotStatics>().GetSlideInAnimationGroup(element);
}

inline void Pivot::SetSlideInAnimationGroup(const Windows::UI::Xaml::FrameworkElement & element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup value)
{
    get_activation_factory<Pivot, IPivotStatics>().SetSlideInAnimationGroup(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Pivot::LeftHeaderProperty()
{
    return get_activation_factory<Pivot, IPivotStatics2>().LeftHeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::LeftHeaderTemplateProperty()
{
    return get_activation_factory<Pivot, IPivotStatics2>().LeftHeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::RightHeaderProperty()
{
    return get_activation_factory<Pivot, IPivotStatics2>().RightHeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::RightHeaderTemplateProperty()
{
    return get_activation_factory<Pivot, IPivotStatics2>().RightHeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::HeaderFocusVisualPlacementProperty()
{
    return get_activation_factory<Pivot, IPivotStatics3>().HeaderFocusVisualPlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::IsHeaderItemsCarouselEnabledProperty()
{
    return get_activation_factory<Pivot, IPivotStatics3>().IsHeaderItemsCarouselEnabledProperty();
}

inline PivotItem::PivotItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<PivotItem, IPivotItemFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty PivotItem::HeaderProperty()
{
    return get_activation_factory<PivotItem, IPivotItemStatics>().HeaderProperty();
}

inline PivotItemEventArgs::PivotItemEventArgs() :
    PivotItemEventArgs(activate_instance<PivotItemEventArgs>())
{}

inline ProgressBar::ProgressBar()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ProgressBar, IProgressBarFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ProgressBar::IsIndeterminateProperty()
{
    return get_activation_factory<ProgressBar, IProgressBarStatics>().IsIndeterminateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ProgressBar::ShowErrorProperty()
{
    return get_activation_factory<ProgressBar, IProgressBarStatics>().ShowErrorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ProgressBar::ShowPausedProperty()
{
    return get_activation_factory<ProgressBar, IProgressBarStatics>().ShowPausedProperty();
}

inline ProgressRing::ProgressRing() :
    ProgressRing(activate_instance<ProgressRing>())
{}

inline Windows::UI::Xaml::DependencyProperty ProgressRing::IsActiveProperty()
{
    return get_activation_factory<ProgressRing, IProgressRingStatics>().IsActiveProperty();
}

inline RadioButton::RadioButton()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<RadioButton, IRadioButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty RadioButton::GroupNameProperty()
{
    return get_activation_factory<RadioButton, IRadioButtonStatics>().GroupNameProperty();
}

inline RelativePanel::RelativePanel()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<RelativePanel, IRelativePanelFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::LeftOfProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().LeftOfProperty();
}

inline Windows::Foundation::IInspectable RelativePanel::GetLeftOf(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetLeftOf(element);
}

inline void RelativePanel::SetLeftOf(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetLeftOf(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AboveProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AboveProperty();
}

inline Windows::Foundation::IInspectable RelativePanel::GetAbove(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAbove(element);
}

inline void RelativePanel::SetAbove(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAbove(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::RightOfProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().RightOfProperty();
}

inline Windows::Foundation::IInspectable RelativePanel::GetRightOf(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetRightOf(element);
}

inline void RelativePanel::SetRightOf(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetRightOf(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::BelowProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().BelowProperty();
}

inline Windows::Foundation::IInspectable RelativePanel::GetBelow(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetBelow(element);
}

inline void RelativePanel::SetBelow(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetBelow(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignHorizontalCenterWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignHorizontalCenterWithProperty();
}

inline Windows::Foundation::IInspectable RelativePanel::GetAlignHorizontalCenterWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignHorizontalCenterWith(element);
}

inline void RelativePanel::SetAlignHorizontalCenterWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignHorizontalCenterWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignVerticalCenterWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignVerticalCenterWithProperty();
}

inline Windows::Foundation::IInspectable RelativePanel::GetAlignVerticalCenterWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignVerticalCenterWith(element);
}

inline void RelativePanel::SetAlignVerticalCenterWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignVerticalCenterWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignLeftWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignLeftWithProperty();
}

inline Windows::Foundation::IInspectable RelativePanel::GetAlignLeftWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignLeftWith(element);
}

inline void RelativePanel::SetAlignLeftWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignLeftWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignTopWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignTopWithProperty();
}

inline Windows::Foundation::IInspectable RelativePanel::GetAlignTopWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignTopWith(element);
}

inline void RelativePanel::SetAlignTopWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignTopWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignRightWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignRightWithProperty();
}

inline Windows::Foundation::IInspectable RelativePanel::GetAlignRightWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignRightWith(element);
}

inline void RelativePanel::SetAlignRightWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignRightWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignBottomWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignBottomWithProperty();
}

inline Windows::Foundation::IInspectable RelativePanel::GetAlignBottomWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignBottomWith(element);
}

inline void RelativePanel::SetAlignBottomWith(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignBottomWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignLeftWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignLeftWithPanelProperty();
}

inline bool RelativePanel::GetAlignLeftWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignLeftWithPanel(element);
}

inline void RelativePanel::SetAlignLeftWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignLeftWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignTopWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignTopWithPanelProperty();
}

inline bool RelativePanel::GetAlignTopWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignTopWithPanel(element);
}

inline void RelativePanel::SetAlignTopWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignTopWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignRightWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignRightWithPanelProperty();
}

inline bool RelativePanel::GetAlignRightWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignRightWithPanel(element);
}

inline void RelativePanel::SetAlignRightWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignRightWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignBottomWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignBottomWithPanelProperty();
}

inline bool RelativePanel::GetAlignBottomWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignBottomWithPanel(element);
}

inline void RelativePanel::SetAlignBottomWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignBottomWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignHorizontalCenterWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignHorizontalCenterWithPanelProperty();
}

inline bool RelativePanel::GetAlignHorizontalCenterWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignHorizontalCenterWithPanel(element);
}

inline void RelativePanel::SetAlignHorizontalCenterWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignHorizontalCenterWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignVerticalCenterWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignVerticalCenterWithPanelProperty();
}

inline bool RelativePanel::GetAlignVerticalCenterWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignVerticalCenterWithPanel(element);
}

inline void RelativePanel::SetAlignVerticalCenterWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignVerticalCenterWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::BorderBrushProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::BorderThicknessProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::CornerRadiusProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().CornerRadiusProperty();
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::PaddingProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().PaddingProperty();
}

inline RichEditBox::RichEditBox()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<RichEditBox, IRichEditBoxFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::IsReadOnlyProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().IsReadOnlyProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::AcceptsReturnProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().AcceptsReturnProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::TextAlignmentProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().TextAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::TextWrappingProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().TextWrappingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::IsSpellCheckEnabledProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().IsSpellCheckEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::IsTextPredictionEnabledProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().IsTextPredictionEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::InputScopeProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().InputScopeProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::HeaderProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::HeaderTemplateProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::PlaceholderTextProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::SelectionHighlightColorProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().SelectionHighlightColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::PreventKeyboardDisplayOnProgrammaticFocusProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().PreventKeyboardDisplayOnProgrammaticFocusProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::IsColorFontEnabledProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().IsColorFontEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::DesiredCandidateWindowAlignmentProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics3>().DesiredCandidateWindowAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::TextReadingOrderProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics3>().TextReadingOrderProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::ClipboardCopyFormatProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics4>().ClipboardCopyFormatProperty();
}

inline RichTextBlock::RichTextBlock() :
    RichTextBlock(activate_instance<RichTextBlock>())
{}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::FontSizeProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().FontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::FontFamilyProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().FontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::FontWeightProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().FontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::FontStyleProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().FontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::FontStretchProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().FontStretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::ForegroundProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().ForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextWrappingProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().TextWrappingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextTrimmingProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().TextTrimmingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextAlignmentProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().TextAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::PaddingProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::LineHeightProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().LineHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::LineStackingStrategyProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().LineStackingStrategyProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::CharacterSpacingProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().CharacterSpacingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::OverflowContentTargetProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().OverflowContentTargetProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::IsTextSelectionEnabledProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().IsTextSelectionEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::HasOverflowContentProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().HasOverflowContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::SelectedTextProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().SelectedTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextIndentProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().TextIndentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::MaxLinesProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().MaxLinesProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextLineBoundsProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().TextLineBoundsProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::SelectionHighlightColorProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().SelectionHighlightColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::OpticalMarginAlignmentProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().OpticalMarginAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::IsColorFontEnabledProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().IsColorFontEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextReadingOrderProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().TextReadingOrderProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::IsTextScaleFactorEnabledProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics3>().IsTextScaleFactorEnabledProperty();
}

inline RichTextBlockOverflow::RichTextBlockOverflow() :
    RichTextBlockOverflow(activate_instance<RichTextBlockOverflow>())
{}

inline Windows::UI::Xaml::DependencyProperty RichTextBlockOverflow::OverflowContentTargetProperty()
{
    return get_activation_factory<RichTextBlockOverflow, IRichTextBlockOverflowStatics>().OverflowContentTargetProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlockOverflow::PaddingProperty()
{
    return get_activation_factory<RichTextBlockOverflow, IRichTextBlockOverflowStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlockOverflow::HasOverflowContentProperty()
{
    return get_activation_factory<RichTextBlockOverflow, IRichTextBlockOverflowStatics>().HasOverflowContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlockOverflow::MaxLinesProperty()
{
    return get_activation_factory<RichTextBlockOverflow, IRichTextBlockOverflowStatics2>().MaxLinesProperty();
}

inline RowDefinition::RowDefinition() :
    RowDefinition(activate_instance<RowDefinition>())
{}

inline Windows::UI::Xaml::DependencyProperty RowDefinition::HeightProperty()
{
    return get_activation_factory<RowDefinition, IRowDefinitionStatics>().HeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty RowDefinition::MaxHeightProperty()
{
    return get_activation_factory<RowDefinition, IRowDefinitionStatics>().MaxHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty RowDefinition::MinHeightProperty()
{
    return get_activation_factory<RowDefinition, IRowDefinitionStatics>().MinHeightProperty();
}

inline ScrollContentPresenter::ScrollContentPresenter() :
    ScrollContentPresenter(activate_instance<ScrollContentPresenter>())
{}

inline ScrollViewer::ScrollViewer() :
    ScrollViewer(activate_instance<ScrollViewer>())
{}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalSnapPointsAlignmentProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().HorizontalSnapPointsAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalSnapPointsAlignmentProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().VerticalSnapPointsAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalSnapPointsTypeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().HorizontalSnapPointsTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalSnapPointsTypeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().VerticalSnapPointsTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ZoomSnapPointsTypeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ZoomSnapPointsTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalOffsetProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().HorizontalOffsetProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ViewportWidthProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ViewportWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ScrollableWidthProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ScrollableWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ComputedHorizontalScrollBarVisibilityProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ComputedHorizontalScrollBarVisibilityProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ExtentWidthProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ExtentWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalOffsetProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().VerticalOffsetProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ViewportHeightProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ViewportHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ScrollableHeightProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ScrollableHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ComputedVerticalScrollBarVisibilityProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ComputedVerticalScrollBarVisibilityProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ExtentHeightProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ExtentHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::MinZoomFactorProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().MinZoomFactorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::MaxZoomFactorProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().MaxZoomFactorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ZoomFactorProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ZoomFactorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ZoomSnapPointsProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ZoomSnapPointsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalScrollBarVisibilityProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().HorizontalScrollBarVisibilityProperty();
}

inline Windows::UI::Xaml::Controls::ScrollBarVisibility ScrollViewer::GetHorizontalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetHorizontalScrollBarVisibility(element);
}

inline void ScrollViewer::SetHorizontalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetHorizontalScrollBarVisibility(element, horizontalScrollBarVisibility);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalScrollBarVisibilityProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().VerticalScrollBarVisibilityProperty();
}

inline Windows::UI::Xaml::Controls::ScrollBarVisibility ScrollViewer::GetVerticalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetVerticalScrollBarVisibility(element);
}

inline void ScrollViewer::SetVerticalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetVerticalScrollBarVisibility(element, verticalScrollBarVisibility);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsHorizontalRailEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsHorizontalRailEnabledProperty();
}

inline bool ScrollViewer::GetIsHorizontalRailEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsHorizontalRailEnabled(element);
}

inline void ScrollViewer::SetIsHorizontalRailEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isHorizontalRailEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsHorizontalRailEnabled(element, isHorizontalRailEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsVerticalRailEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsVerticalRailEnabledProperty();
}

inline bool ScrollViewer::GetIsVerticalRailEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsVerticalRailEnabled(element);
}

inline void ScrollViewer::SetIsVerticalRailEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isVerticalRailEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsVerticalRailEnabled(element, isVerticalRailEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsHorizontalScrollChainingEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsHorizontalScrollChainingEnabledProperty();
}

inline bool ScrollViewer::GetIsHorizontalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsHorizontalScrollChainingEnabled(element);
}

inline void ScrollViewer::SetIsHorizontalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isHorizontalScrollChainingEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsHorizontalScrollChainingEnabled(element, isHorizontalScrollChainingEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsVerticalScrollChainingEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsVerticalScrollChainingEnabledProperty();
}

inline bool ScrollViewer::GetIsVerticalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsVerticalScrollChainingEnabled(element);
}

inline void ScrollViewer::SetIsVerticalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isVerticalScrollChainingEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsVerticalScrollChainingEnabled(element, isVerticalScrollChainingEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsZoomChainingEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsZoomChainingEnabledProperty();
}

inline bool ScrollViewer::GetIsZoomChainingEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsZoomChainingEnabled(element);
}

inline void ScrollViewer::SetIsZoomChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isZoomChainingEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsZoomChainingEnabled(element, isZoomChainingEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsScrollInertiaEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsScrollInertiaEnabledProperty();
}

inline bool ScrollViewer::GetIsScrollInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsScrollInertiaEnabled(element);
}

inline void ScrollViewer::SetIsScrollInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isScrollInertiaEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsScrollInertiaEnabled(element, isScrollInertiaEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsZoomInertiaEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsZoomInertiaEnabledProperty();
}

inline bool ScrollViewer::GetIsZoomInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsZoomInertiaEnabled(element);
}

inline void ScrollViewer::SetIsZoomInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isZoomInertiaEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsZoomInertiaEnabled(element, isZoomInertiaEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalScrollModeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().HorizontalScrollModeProperty();
}

inline Windows::UI::Xaml::Controls::ScrollMode ScrollViewer::GetHorizontalScrollMode(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetHorizontalScrollMode(element);
}

inline void ScrollViewer::SetHorizontalScrollMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetHorizontalScrollMode(element, horizontalScrollMode);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalScrollModeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().VerticalScrollModeProperty();
}

inline Windows::UI::Xaml::Controls::ScrollMode ScrollViewer::GetVerticalScrollMode(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetVerticalScrollMode(element);
}

inline void ScrollViewer::SetVerticalScrollMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetVerticalScrollMode(element, verticalScrollMode);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ZoomModeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ZoomModeProperty();
}

inline Windows::UI::Xaml::Controls::ZoomMode ScrollViewer::GetZoomMode(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetZoomMode(element);
}

inline void ScrollViewer::SetZoomMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ZoomMode zoomMode)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetZoomMode(element, zoomMode);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsDeferredScrollingEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsDeferredScrollingEnabledProperty();
}

inline bool ScrollViewer::GetIsDeferredScrollingEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsDeferredScrollingEnabled(element);
}

inline void ScrollViewer::SetIsDeferredScrollingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isDeferredScrollingEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsDeferredScrollingEnabled(element, isDeferredScrollingEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::BringIntoViewOnFocusChangeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().BringIntoViewOnFocusChangeProperty();
}

inline bool ScrollViewer::GetBringIntoViewOnFocusChange(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetBringIntoViewOnFocusChange(element);
}

inline void ScrollViewer::SetBringIntoViewOnFocusChange(const Windows::UI::Xaml::DependencyObject & element, bool bringIntoViewOnFocusChange)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetBringIntoViewOnFocusChange(element, bringIntoViewOnFocusChange);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::TopLeftHeaderProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics2>().TopLeftHeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::LeftHeaderProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics2>().LeftHeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::TopHeaderProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics2>().TopHeaderProperty();
}

inline ScrollViewerViewChangedEventArgs::ScrollViewerViewChangedEventArgs() :
    ScrollViewerViewChangedEventArgs(activate_instance<ScrollViewerViewChangedEventArgs>())
{}

inline SearchBox::SearchBox()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<SearchBox, ISearchBoxFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::SearchHistoryEnabledProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().SearchHistoryEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::SearchHistoryContextProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().SearchHistoryContextProperty();
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::PlaceholderTextProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::QueryTextProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().QueryTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::FocusOnKeyboardInputProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().FocusOnKeyboardInputProperty();
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::ChooseSuggestionOnEnterProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().ChooseSuggestionOnEnterProperty();
}

inline SearchBoxResultSuggestionChosenEventArgs::SearchBoxResultSuggestionChosenEventArgs() :
    SearchBoxResultSuggestionChosenEventArgs(activate_instance<SearchBoxResultSuggestionChosenEventArgs>())
{}

inline SelectionChangedEventArgs::SelectionChangedEventArgs(const Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> & removedItems, const Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> & addedItems)
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<SelectionChangedEventArgs, ISelectionChangedEventArgsFactory>().CreateInstanceWithRemovedItemsAndAddedItems(removedItems, addedItems, outer, inner));
}

inline SemanticZoom::SemanticZoom() :
    SemanticZoom(activate_instance<SemanticZoom>())
{}

inline Windows::UI::Xaml::DependencyProperty SemanticZoom::ZoomedInViewProperty()
{
    return get_activation_factory<SemanticZoom, ISemanticZoomStatics>().ZoomedInViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty SemanticZoom::ZoomedOutViewProperty()
{
    return get_activation_factory<SemanticZoom, ISemanticZoomStatics>().ZoomedOutViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty SemanticZoom::IsZoomedInViewActiveProperty()
{
    return get_activation_factory<SemanticZoom, ISemanticZoomStatics>().IsZoomedInViewActiveProperty();
}

inline Windows::UI::Xaml::DependencyProperty SemanticZoom::CanChangeViewsProperty()
{
    return get_activation_factory<SemanticZoom, ISemanticZoomStatics>().CanChangeViewsProperty();
}

inline Windows::UI::Xaml::DependencyProperty SemanticZoom::IsZoomOutButtonEnabledProperty()
{
    return get_activation_factory<SemanticZoom, ISemanticZoomStatics>().IsZoomOutButtonEnabledProperty();
}

inline SemanticZoomLocation::SemanticZoomLocation() :
    SemanticZoomLocation(activate_instance<SemanticZoomLocation>())
{}

inline SemanticZoomViewChangedEventArgs::SemanticZoomViewChangedEventArgs() :
    SemanticZoomViewChangedEventArgs(activate_instance<SemanticZoomViewChangedEventArgs>())
{}

inline SettingsFlyout::SettingsFlyout()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<SettingsFlyout, ISettingsFlyoutFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty SettingsFlyout::TitleProperty()
{
    return get_activation_factory<SettingsFlyout, ISettingsFlyoutStatics>().TitleProperty();
}

inline Windows::UI::Xaml::DependencyProperty SettingsFlyout::HeaderBackgroundProperty()
{
    return get_activation_factory<SettingsFlyout, ISettingsFlyoutStatics>().HeaderBackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty SettingsFlyout::HeaderForegroundProperty()
{
    return get_activation_factory<SettingsFlyout, ISettingsFlyoutStatics>().HeaderForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty SettingsFlyout::IconSourceProperty()
{
    return get_activation_factory<SettingsFlyout, ISettingsFlyoutStatics>().IconSourceProperty();
}

inline Slider::Slider()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<Slider, ISliderFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Slider::IntermediateValueProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().IntermediateValueProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::StepFrequencyProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().StepFrequencyProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::SnapsToProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().SnapsToProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::TickFrequencyProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().TickFrequencyProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::TickPlacementProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().TickPlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::OrientationProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::IsDirectionReversedProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().IsDirectionReversedProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::IsThumbToolTipEnabledProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().IsThumbToolTipEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::ThumbToolTipValueConverterProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().ThumbToolTipValueConverterProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::HeaderProperty()
{
    return get_activation_factory<Slider, ISliderStatics2>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::HeaderTemplateProperty()
{
    return get_activation_factory<Slider, ISliderStatics2>().HeaderTemplateProperty();
}

inline SplitView::SplitView()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<SplitView, ISplitViewFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty SplitView::ContentProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().ContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::PaneProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().PaneProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::IsPaneOpenProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().IsPaneOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::OpenPaneLengthProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().OpenPaneLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::CompactPaneLengthProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().CompactPaneLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::PanePlacementProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().PanePlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::DisplayModeProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().DisplayModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::TemplateSettingsProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().TemplateSettingsProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::PaneBackgroundProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().PaneBackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::LightDismissOverlayModeProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics2>().LightDismissOverlayModeProperty();
}

inline StackPanel::StackPanel()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<StackPanel, IStackPanelFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::AreScrollSnapPointsRegularProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics>().AreScrollSnapPointsRegularProperty();
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::OrientationProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::BorderBrushProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics2>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::BorderThicknessProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics2>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::CornerRadiusProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics2>().CornerRadiusProperty();
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::PaddingProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics2>().PaddingProperty();
}

inline StyleSelector::StyleSelector()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<StyleSelector, IStyleSelectorFactory>().CreateInstance(outer, inner));
}

inline SwapChainBackgroundPanel::SwapChainBackgroundPanel()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<SwapChainBackgroundPanel, ISwapChainBackgroundPanelFactory>().CreateInstance(outer, inner));
}

inline SwapChainPanel::SwapChainPanel()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<SwapChainPanel, ISwapChainPanelFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty SwapChainPanel::CompositionScaleXProperty()
{
    return get_activation_factory<SwapChainPanel, ISwapChainPanelStatics>().CompositionScaleXProperty();
}

inline Windows::UI::Xaml::DependencyProperty SwapChainPanel::CompositionScaleYProperty()
{
    return get_activation_factory<SwapChainPanel, ISwapChainPanelStatics>().CompositionScaleYProperty();
}

inline SymbolIcon::SymbolIcon() :
    SymbolIcon(activate_instance<SymbolIcon>())
{}

inline SymbolIcon::SymbolIcon(Windows::UI::Xaml::Controls::Symbol symbol) :
    SymbolIcon(get_activation_factory<SymbolIcon, ISymbolIconFactory>().CreateInstanceWithSymbol(symbol))
{}

inline Windows::UI::Xaml::DependencyProperty SymbolIcon::SymbolProperty()
{
    return get_activation_factory<SymbolIcon, ISymbolIconStatics>().SymbolProperty();
}

inline TextBlock::TextBlock() :
    TextBlock(activate_instance<TextBlock>())
{}

inline Windows::UI::Xaml::DependencyProperty TextBlock::FontSizeProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().FontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::FontFamilyProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().FontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::FontWeightProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().FontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::FontStyleProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().FontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::FontStretchProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().FontStretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::CharacterSpacingProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().CharacterSpacingProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::ForegroundProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().ForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextWrappingProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().TextWrappingProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextTrimmingProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().TextTrimmingProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextAlignmentProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().TextAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().TextProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::PaddingProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::LineHeightProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().LineHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::LineStackingStrategyProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().LineStackingStrategyProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::IsTextSelectionEnabledProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().IsTextSelectionEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::SelectedTextProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().SelectedTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::SelectionHighlightColorProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().SelectionHighlightColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::MaxLinesProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().MaxLinesProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextLineBoundsProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().TextLineBoundsProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::OpticalMarginAlignmentProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().OpticalMarginAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::IsColorFontEnabledProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().IsColorFontEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextReadingOrderProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().TextReadingOrderProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::IsTextScaleFactorEnabledProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics3>().IsTextScaleFactorEnabledProperty();
}

inline TextBox::TextBox()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<TextBox, ITextBoxFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty TextBox::TextProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().TextProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::MaxLengthProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().MaxLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::IsReadOnlyProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().IsReadOnlyProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::AcceptsReturnProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().AcceptsReturnProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::TextAlignmentProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().TextAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::TextWrappingProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().TextWrappingProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::IsSpellCheckEnabledProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().IsSpellCheckEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::IsTextPredictionEnabledProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().IsTextPredictionEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::InputScopeProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().InputScopeProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::HeaderProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::HeaderTemplateProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::PlaceholderTextProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::SelectionHighlightColorProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().SelectionHighlightColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::PreventKeyboardDisplayOnProgrammaticFocusProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().PreventKeyboardDisplayOnProgrammaticFocusProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::IsColorFontEnabledProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().IsColorFontEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::DesiredCandidateWindowAlignmentProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics3>().DesiredCandidateWindowAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::TextReadingOrderProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics3>().TextReadingOrderProperty();
}

inline TimePickedEventArgs::TimePickedEventArgs() :
    TimePickedEventArgs(activate_instance<TimePickedEventArgs>())
{}

inline TimePicker::TimePicker()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<TimePicker, ITimePickerFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::HeaderProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::HeaderTemplateProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::ClockIdentifierProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics>().ClockIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::MinuteIncrementProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics>().MinuteIncrementProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::TimeProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics>().TimeProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::LightDismissOverlayModeProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics2>().LightDismissOverlayModeProperty();
}

inline TimePickerFlyout::TimePickerFlyout() :
    TimePickerFlyout(activate_instance<TimePickerFlyout>())
{}

inline Windows::UI::Xaml::DependencyProperty TimePickerFlyout::ClockIdentifierProperty()
{
    return get_activation_factory<TimePickerFlyout, ITimePickerFlyoutStatics>().ClockIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePickerFlyout::TimeProperty()
{
    return get_activation_factory<TimePickerFlyout, ITimePickerFlyoutStatics>().TimeProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePickerFlyout::MinuteIncrementProperty()
{
    return get_activation_factory<TimePickerFlyout, ITimePickerFlyoutStatics>().MinuteIncrementProperty();
}

inline ToggleMenuFlyoutItem::ToggleMenuFlyoutItem()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ToggleMenuFlyoutItem, IToggleMenuFlyoutItemFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ToggleMenuFlyoutItem::IsCheckedProperty()
{
    return get_activation_factory<ToggleMenuFlyoutItem, IToggleMenuFlyoutItemStatics>().IsCheckedProperty();
}

inline ToggleSwitch::ToggleSwitch() :
    ToggleSwitch(activate_instance<ToggleSwitch>())
{}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::IsOnProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().IsOnProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::HeaderProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::HeaderTemplateProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::OnContentProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().OnContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::OnContentTemplateProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().OnContentTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::OffContentProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().OffContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::OffContentTemplateProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().OffContentTemplateProperty();
}

inline ToolTip::ToolTip()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<ToolTip, IToolTipFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ToolTip::HorizontalOffsetProperty()
{
    return get_activation_factory<ToolTip, IToolTipStatics>().HorizontalOffsetProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToolTip::IsOpenProperty()
{
    return get_activation_factory<ToolTip, IToolTipStatics>().IsOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToolTip::PlacementProperty()
{
    return get_activation_factory<ToolTip, IToolTipStatics>().PlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToolTip::PlacementTargetProperty()
{
    return get_activation_factory<ToolTip, IToolTipStatics>().PlacementTargetProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToolTip::VerticalOffsetProperty()
{
    return get_activation_factory<ToolTip, IToolTipStatics>().VerticalOffsetProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToolTipService::PlacementProperty()
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().PlacementProperty();
}

inline Windows::UI::Xaml::Controls::Primitives::PlacementMode ToolTipService::GetPlacement(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().GetPlacement(element);
}

inline void ToolTipService::SetPlacement(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::Primitives::PlacementMode value)
{
    get_activation_factory<ToolTipService, IToolTipServiceStatics>().SetPlacement(element, value);
}

inline Windows::UI::Xaml::DependencyProperty ToolTipService::PlacementTargetProperty()
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().PlacementTargetProperty();
}

inline Windows::UI::Xaml::UIElement ToolTipService::GetPlacementTarget(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().GetPlacementTarget(element);
}

inline void ToolTipService::SetPlacementTarget(const Windows::UI::Xaml::DependencyObject & element, const Windows::UI::Xaml::UIElement & value)
{
    get_activation_factory<ToolTipService, IToolTipServiceStatics>().SetPlacementTarget(element, value);
}

inline Windows::UI::Xaml::DependencyProperty ToolTipService::ToolTipProperty()
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().ToolTipProperty();
}

inline Windows::Foundation::IInspectable ToolTipService::GetToolTip(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().GetToolTip(element);
}

inline void ToolTipService::SetToolTip(const Windows::UI::Xaml::DependencyObject & element, const Windows::Foundation::IInspectable & value)
{
    get_activation_factory<ToolTipService, IToolTipServiceStatics>().SetToolTip(element, value);
}

inline UserControl::UserControl()
{
    Windows::Foundation::IInspectable outer, inner;
    impl_move(get_activation_factory<UserControl, IUserControlFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty UserControl::ContentProperty()
{
    return get_activation_factory<UserControl, IUserControlStatics>().ContentProperty();
}

inline VariableSizedWrapGrid::VariableSizedWrapGrid() :
    VariableSizedWrapGrid(activate_instance<VariableSizedWrapGrid>())
{}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::ItemHeightProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().ItemHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::ItemWidthProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().ItemWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::OrientationProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::HorizontalChildrenAlignmentProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().HorizontalChildrenAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::VerticalChildrenAlignmentProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().VerticalChildrenAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::MaximumRowsOrColumnsProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().MaximumRowsOrColumnsProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::RowSpanProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().RowSpanProperty();
}

inline int32_t VariableSizedWrapGrid::GetRowSpan(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().GetRowSpan(element);
}

inline void VariableSizedWrapGrid::SetRowSpan(const Windows::UI::Xaml::UIElement & element, int32_t value)
{
    get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().SetRowSpan(element, value);
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::ColumnSpanProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().ColumnSpanProperty();
}

inline int32_t VariableSizedWrapGrid::GetColumnSpan(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().GetColumnSpan(element);
}

inline void VariableSizedWrapGrid::SetColumnSpan(const Windows::UI::Xaml::UIElement & element, int32_t value)
{
    get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().SetColumnSpan(element, value);
}

inline Viewbox::Viewbox() :
    Viewbox(activate_instance<Viewbox>())
{}

inline Windows::UI::Xaml::DependencyProperty Viewbox::StretchProperty()
{
    return get_activation_factory<Viewbox, IViewboxStatics>().StretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty Viewbox::StretchDirectionProperty()
{
    return get_activation_factory<Viewbox, IViewboxStatics>().StretchDirectionProperty();
}

inline VirtualizingStackPanel::VirtualizingStackPanel() :
    VirtualizingStackPanel(activate_instance<VirtualizingStackPanel>())
{}

inline Windows::UI::Xaml::DependencyProperty VirtualizingStackPanel::AreScrollSnapPointsRegularProperty()
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().AreScrollSnapPointsRegularProperty();
}

inline Windows::UI::Xaml::DependencyProperty VirtualizingStackPanel::OrientationProperty()
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty VirtualizingStackPanel::VirtualizationModeProperty()
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().VirtualizationModeProperty();
}

inline Windows::UI::Xaml::Controls::VirtualizationMode VirtualizingStackPanel::GetVirtualizationMode(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().GetVirtualizationMode(element);
}

inline void VirtualizingStackPanel::SetVirtualizationMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::VirtualizationMode value)
{
    get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().SetVirtualizationMode(element, value);
}

inline Windows::UI::Xaml::DependencyProperty VirtualizingStackPanel::IsVirtualizingProperty()
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().IsVirtualizingProperty();
}

inline bool VirtualizingStackPanel::GetIsVirtualizing(const Windows::UI::Xaml::DependencyObject & o)
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().GetIsVirtualizing(o);
}

inline WebView::WebView() :
    WebView(activate_instance<WebView>())
{}

inline WebView::WebView(Windows::UI::Xaml::Controls::WebViewExecutionMode executionMode) :
    WebView(get_activation_factory<WebView, IWebViewFactory4>().CreateInstanceWithExecutionMode(executionMode))
{}

inline Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> WebView::AnyScriptNotifyUri()
{
    return get_activation_factory<WebView, IWebViewStatics>().AnyScriptNotifyUri();
}

inline Windows::UI::Xaml::DependencyProperty WebView::SourceProperty()
{
    return get_activation_factory<WebView, IWebViewStatics>().SourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::AllowedScriptNotifyUrisProperty()
{
    return get_activation_factory<WebView, IWebViewStatics>().AllowedScriptNotifyUrisProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::DataTransferPackageProperty()
{
    return get_activation_factory<WebView, IWebViewStatics>().DataTransferPackageProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::CanGoBackProperty()
{
    return get_activation_factory<WebView, IWebViewStatics2>().CanGoBackProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::CanGoForwardProperty()
{
    return get_activation_factory<WebView, IWebViewStatics2>().CanGoForwardProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::DocumentTitleProperty()
{
    return get_activation_factory<WebView, IWebViewStatics2>().DocumentTitleProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::DefaultBackgroundColorProperty()
{
    return get_activation_factory<WebView, IWebViewStatics2>().DefaultBackgroundColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::ContainsFullScreenElementProperty()
{
    return get_activation_factory<WebView, IWebViewStatics3>().ContainsFullScreenElementProperty();
}

inline Windows::UI::Xaml::Controls::WebViewExecutionMode WebView::DefaultExecutionMode()
{
    return get_activation_factory<WebView, IWebViewStatics4>().DefaultExecutionMode();
}

inline Windows::Foundation::IAsyncAction WebView::ClearTemporaryWebDataAsync()
{
    return get_activation_factory<WebView, IWebViewStatics4>().ClearTemporaryWebDataAsync();
}

inline Windows::UI::Xaml::DependencyProperty WebView::XYFocusLeftProperty()
{
    return get_activation_factory<WebView, IWebViewStatics5>().XYFocusLeftProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::XYFocusRightProperty()
{
    return get_activation_factory<WebView, IWebViewStatics5>().XYFocusRightProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::XYFocusUpProperty()
{
    return get_activation_factory<WebView, IWebViewStatics5>().XYFocusUpProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::XYFocusDownProperty()
{
    return get_activation_factory<WebView, IWebViewStatics5>().XYFocusDownProperty();
}

inline WebViewBrush::WebViewBrush() :
    WebViewBrush(activate_instance<WebViewBrush>())
{}

inline Windows::UI::Xaml::DependencyProperty WebViewBrush::SourceNameProperty()
{
    return get_activation_factory<WebViewBrush, IWebViewBrushStatics>().SourceNameProperty();
}

inline WrapGrid::WrapGrid() :
    WrapGrid(activate_instance<WrapGrid>())
{}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::ItemWidthProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().ItemWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::ItemHeightProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().ItemHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::OrientationProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::HorizontalChildrenAlignmentProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().HorizontalChildrenAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::VerticalChildrenAlignmentProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().VerticalChildrenAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::MaximumRowsOrColumnsProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().MaximumRowsOrColumnsProperty();
}

}

}

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBar>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBar & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBar2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBar2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBar3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBar3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBar4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBar4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarButton3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarButton3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarButtonStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarOverrides3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarOverrides3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarSeparator>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarSeparator & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarStatics4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarStatics4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarToggleButton3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAutoSuggestBox3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IBackClickEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IBackClickEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IBitmapIcon>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IBitmapIcon & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IBitmapIconFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IBitmapIconFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IBitmapIconStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IBorder>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IBorder & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IBorderStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IBorderStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IButtonWithFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IButtonWithFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarDatePicker2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarViewFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarViewFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICalendarViewStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICalendarViewStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICanvas>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICanvas & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICanvasFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICanvasFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICanvasStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICanvasStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICaptureElement>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICaptureElement & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICaptureElementStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICaptureElementStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICheckBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICheckBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICheckBoxFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICheckBoxFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IColumnDefinition>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IColumnDefinition & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IColumnDefinitionStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IColumnDefinitionStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IComboBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IComboBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IComboBox2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IComboBox2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IComboBox3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IComboBox3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IComboBoxFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IComboBoxFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IComboBoxItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IComboBoxItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IComboBoxItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IComboBoxItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IComboBoxOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IComboBoxOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IComboBoxStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IComboBoxStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IComboBoxStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IComboBoxStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBar>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBar & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBar2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBar2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBar3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBar3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBarElement>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBarElement & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBarElement2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBarElement2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBarFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBarFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBarStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBarStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ICommandBarStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ICommandBarStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentControl>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentControl & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentControl2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentControl2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentControlFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentControlFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentControlOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentControlOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentControlStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentControlStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentDialog>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentDialog & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentDialogFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentDialogFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentDialogStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentDialogStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentPresenter2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentPresenter2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentPresenter3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentPresenter3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentPresenter4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentPresenter4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentPresenterFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentPresenterFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentPresenterOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentPresenterOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContentPresenterStatics4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IContextMenuEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IContextMenuEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControl>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControl & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControl2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControl2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControl3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControl3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControl4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControl4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControlFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControlFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControlOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControlOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControlProtected>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControlProtected & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControlStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControlStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControlStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControlStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControlStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControlStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControlStatics4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControlStatics4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IControlTemplate>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IControlTemplate & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDataTemplateSelector2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePicker>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePicker & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePicker2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePicker2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerFlyout2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlipView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlipView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlipView2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlipView2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlipViewFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlipViewFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlipViewItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlipViewItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlipViewItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlipViewItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlipViewStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlipViewStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlyoutFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlyoutFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlyoutPresenterFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFlyoutStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFlyoutStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFontIcon>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFontIcon & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFontIcon2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFontIcon2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFontIcon3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFontIcon3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFontIconFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFontIconFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFontIconStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFontIconStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFontIconStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFontIconStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFontIconStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFontIconStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFrame>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFrame & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFrame2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFrame2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFrame3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFrame3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFrameFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFrameFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFrameStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFrameStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IFrameStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IFrameStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGrid>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGrid & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGrid2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGrid2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGridFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGridFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGridStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGridStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGridStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGridStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGridView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGridView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGridViewFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGridViewFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGridViewItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGridViewItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGridViewItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGridViewItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGroupItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGroupItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGroupItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGroupItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGroupStyle>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGroupStyle & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGroupStyle2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGroupStyle2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGroupStyleFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGroupStyleFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelector>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGroupStyleSelector & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IHub>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IHub & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IHubFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IHubFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IHubSection>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IHubSection & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IHubSectionFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IHubSectionFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IHubSectionStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IHubSectionStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IHubStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IHubStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IHyperlinkButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IHyperlinkButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IHyperlinkButtonStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IIconElement>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IIconElement & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IIconElementFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IIconElementFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IIconElementStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IIconElementStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IImage>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IImage & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IImage2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IImage2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IImage3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IImage3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IImageStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IImageStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkCanvas>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkCanvas & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkCanvasFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkCanvasFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbar>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbar & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPen>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPen & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IInsertionPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IInsertionPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemClickEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemClickEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemContainerGenerator>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemContainerGenerator & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemContainerMapping>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemContainerMapping & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsControl>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsControl & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsControl2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsControl2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsControl3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsControl3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsControlFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsControlFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsControlOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsControlOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsControlStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsControlStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsPanelTemplate>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsPanelTemplate & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsPickedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsPickedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsPresenter2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsPresenter2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsPresenterStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsStackPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsStackPanel2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsStackPanel2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsStackPanelStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsWrapGrid2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IItemsWrapGridStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListBox2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListBox2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListBoxFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListBoxFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListBoxItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListBoxItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListBoxItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListBoxItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListBoxStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListBoxStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListBoxStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListBoxStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListPickerFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListPickerFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListPickerFlyoutStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBase>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBase & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBase2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBase2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBase3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBase3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBase4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBase4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBase5>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBase5 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBaseFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBaseFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics5>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewBaseStatics5 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewHeaderItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewHeaderItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelper>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelper & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaElement>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaElement & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaElement2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaElement2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaElement3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaElement3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaElementStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaElementStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaElementStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElement>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaPlayerElement & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaPlayerElementStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaTransportControls & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaTransportControls2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaTransportControls2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelper & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyout2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyout2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::INavigate>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::INavigate & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::INotifyEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::INotifyEventArgs2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::INotifyEventArgs2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPage>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPage & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPageFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPageFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPageOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPageOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPageStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPageStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPanelFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPanelFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPanelStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPanelStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPasswordBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPasswordBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPasswordBox2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPasswordBox2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPasswordBox3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPasswordBox3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPasswordBoxStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPathIcon>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPathIcon & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPathIconFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPathIconFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPathIconStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPathIconStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPickerFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPickerFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPickerFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPickerFlyoutStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPickerFlyoutStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivot>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivot & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivot2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivot2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivot3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivot3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivotFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivotFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivotItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivotItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivotItemEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivotItemEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivotItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivotItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivotItemStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivotItemStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivotStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivotStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivotStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivotStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IPivotStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IPivotStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IProgressBar>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IProgressBar & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IProgressBarFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IProgressBarFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IProgressBarStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IProgressBarStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IProgressRing>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IProgressRing & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IProgressRingStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IProgressRingStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRadioButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRadioButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRadioButtonFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRadioButtonFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRadioButtonStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRadioButtonStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRelativePanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRelativePanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRelativePanelFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRelativePanelFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRelativePanelStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichEditBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichEditBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichEditBox2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichEditBox2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichEditBox3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichEditBox3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichEditBox4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichEditBox4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichEditBoxFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichEditBoxFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichEditBoxStatics4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichTextBlock>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichTextBlock & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichTextBlock2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichTextBlock2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichTextBlock3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichTextBlock3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflow2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRichTextBlockStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRowDefinition>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRowDefinition & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IRowDefinitionStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IRowDefinitionStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IScrollContentPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IScrollViewer>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IScrollViewer & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IScrollViewer2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IScrollViewer2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IScrollViewer3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IScrollViewer3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IScrollViewerStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IScrollViewerView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IScrollViewerView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISearchBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISearchBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISearchBoxFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISearchBoxFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISearchBoxStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISearchBoxStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISemanticZoom>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISemanticZoom & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISemanticZoomInformation>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISemanticZoomInformation & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISemanticZoomLocation>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISemanticZoomLocation & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISemanticZoomStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISemanticZoomStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISettingsFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISettingsFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISettingsFlyoutStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISlider>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISlider & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISlider2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISlider2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISliderFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISliderFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISliderStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISliderStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISliderStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISliderStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISplitView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISplitView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISplitView2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISplitView2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISplitViewFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISplitViewFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISplitViewStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISplitViewStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISplitViewStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IStackPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IStackPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IStackPanel2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IStackPanel2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IStackPanelFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IStackPanelFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IStackPanelStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IStackPanelStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IStackPanelStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IStyleSelector>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IStyleSelector & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IStyleSelectorFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IStyleSelectorFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IStyleSelectorOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IStyleSelectorOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISwapChainPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISwapChainPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISwapChainPanelFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISwapChainPanelStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISwapChainPanelStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISymbolIcon>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISymbolIcon & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISymbolIconFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISymbolIconFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ISymbolIconStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ISymbolIconStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBlock>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBlock & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBlock2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBlock2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBlock3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBlock3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBlock4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBlock4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBlockStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBlockStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBlockStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBlockStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBox2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBox2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBox3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBox3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBox4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBox4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBoxFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBoxFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBoxStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBoxStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBoxStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBoxStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITimePickedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITimePickedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITimePicker>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITimePicker & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITimePicker2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITimePicker2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITimePickerFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITimePickerFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITimePickerFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITimePickerStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITimePickerStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITimePickerStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToggleSwitch>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToggleSwitch & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToggleSwitchOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToggleSwitchOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToggleSwitchStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToggleSwitchStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToolTip>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToolTip & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToolTipFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToolTipFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToolTipService>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToolTipService & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToolTipServiceStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToolTipServiceStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IToolTipStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IToolTipStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IUIElementCollection>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IUIElementCollection & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IUserControl>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IUserControl & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IUserControlFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IUserControlFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IUserControlStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IUserControlStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IViewbox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IViewbox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IViewboxStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IViewboxStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IVirtualizingPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelFactory & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebView2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebView2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebView3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebView3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebView4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebView4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebView5>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebView5 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewBrush>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewBrush & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewBrushStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewBrushStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewFactory4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewFactory4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequest & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewSettings>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewSettings & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewStatics2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewStatics2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewStatics3>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewStatics3 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewStatics4>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewStatics4 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewStatics5>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewStatics5 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2 & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWrapGrid>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWrapGrid & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IWrapGridStatics>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IWrapGridStatics & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::AppBar>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::AppBar & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::AppBarButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::AppBarButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::AppBarSeparator>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::AppBarSeparator & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::AppBarToggleButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::AppBarToggleButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::AutoSuggestBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::AutoSuggestBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::BackClickEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::BackClickEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::BitmapIcon>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::BitmapIcon & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Border>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Border & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Button>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Button & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CalendarDatePicker>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CalendarDatePicker & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CalendarView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CalendarView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CalendarViewDayItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Canvas>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Canvas & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CaptureElement>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CaptureElement & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CheckBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CheckBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ColumnDefinition>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ColumnDefinition & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ColumnDefinitionCollection>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ColumnDefinitionCollection & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ComboBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ComboBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ComboBoxItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ComboBoxItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CommandBar>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CommandBar & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::CommandBarOverflowPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::CommandBarOverflowPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContentControl>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContentControl & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContentDialog>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContentDialog & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContentDialogClosingDeferral>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContentDialogClosingDeferral & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContentPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContentPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ContextMenuEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ContextMenuEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Control>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Control & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ControlTemplate>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ControlTemplate & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::DataTemplateSelector>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::DataTemplateSelector & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::DatePickedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::DatePickedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::DatePicker>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::DatePicker & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::DatePickerFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::DatePickerFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::DatePickerFlyoutItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::DatePickerFlyoutItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::DatePickerFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::DatePickerFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::DragItemsStartingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::FlipView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::FlipView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::FlipViewItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::FlipViewItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Flyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Flyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::FlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::FlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::FocusDisengagedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::FocusDisengagedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::FocusEngagedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::FocusEngagedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::FontIcon>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::FontIcon & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Frame>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Frame & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Grid>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Grid & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::GridView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::GridView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::GridViewHeaderItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::GridViewHeaderItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::GridViewItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::GridViewItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::GroupItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::GroupItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::GroupStyle>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::GroupStyle & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::GroupStyleSelector>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::GroupStyleSelector & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Hub>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Hub & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::HubSection>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::HubSection & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::HubSectionCollection>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::HubSectionCollection & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::HyperlinkButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::HyperlinkButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::IconElement>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::IconElement & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Image>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Image & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkCanvas>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkCanvas & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbar>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbar & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPen>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPen & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPenButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarCustomPenButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarCustomToolButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarCustomToolButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarEraserButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarEraserButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarHighlighterButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarHighlighterButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarPenButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarPenButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarPencilButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarPencilButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarRulerButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarRulerButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarToggleButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarToggleButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::InkToolbarToolButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::InkToolbarToolButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ItemClickEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ItemClickEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ItemCollection>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ItemCollection & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ItemContainerGenerator>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ItemContainerGenerator & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ItemsControl>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ItemsControl & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ItemsPanelTemplate>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ItemsPanelTemplate & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ItemsPickedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ItemsPickedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ItemsPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ItemsPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ItemsStackPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ItemsStackPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ItemsWrapGrid>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ItemsWrapGrid & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ListBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ListBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ListBoxItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ListBoxItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ListPickerFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ListPickerFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ListPickerFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ListPickerFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ListView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ListView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ListViewBase>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ListViewBase & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ListViewBaseHeaderItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ListViewBaseHeaderItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ListViewHeaderItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ListViewHeaderItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ListViewItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ListViewItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ListViewPersistenceHelper>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ListViewPersistenceHelper & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MediaElement>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MediaElement & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MediaPlayerElement>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MediaPlayerElement & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MediaPlayerPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MediaPlayerPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MediaTransportControls>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MediaTransportControls & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MediaTransportControlsHelper>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MediaTransportControlsHelper & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MenuFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MenuFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MenuFlyoutItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MenuFlyoutItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MenuFlyoutItemBase>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MenuFlyoutItemBase & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MenuFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MenuFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MenuFlyoutSeparator>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MenuFlyoutSeparator & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::MenuFlyoutSubItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::MenuFlyoutSubItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::NotifyEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::NotifyEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Page>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Page & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Panel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Panel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::PasswordBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::PasswordBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::PathIcon>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::PathIcon & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::PickerConfirmedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::PickerConfirmedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::PickerFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::PickerFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::PickerFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::PickerFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Pivot>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Pivot & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::PivotItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::PivotItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::PivotItemEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ProgressBar>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ProgressBar & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ProgressRing>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ProgressRing & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::RadioButton>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::RadioButton & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::RelativePanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::RelativePanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::RichEditBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::RichEditBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::RichTextBlock>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::RichTextBlock & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::RichTextBlockOverflow>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::RichTextBlockOverflow & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::RowDefinition>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::RowDefinition & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::RowDefinitionCollection>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::RowDefinitionCollection & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ScrollContentPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ScrollContentPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ScrollViewer>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ScrollViewer & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ScrollViewerView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ScrollViewerView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SearchBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SearchBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SelectionChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SelectionChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SemanticZoom>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SemanticZoom & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SemanticZoomLocation & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SettingsFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SettingsFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Slider>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Slider & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SplitView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SplitView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::StackPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::StackPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::StyleSelector>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::StyleSelector & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SwapChainBackgroundPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SwapChainBackgroundPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SwapChainPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SwapChainPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::SymbolIcon>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::SymbolIcon & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TextBlock>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TextBlock & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TextBox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TextBox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TextChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TextChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TextControlPasteEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TextControlPasteEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TimePickedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TimePickedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TimePicker>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TimePicker & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TimePickerFlyout>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TimePickerFlyout & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TimePickerFlyoutPresenter>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TimePickerFlyoutPresenter & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ToggleSwitch>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ToggleSwitch & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ToolTip>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ToolTip & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::ToolTipService>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::ToolTipService & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::UIElementCollection>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::UIElementCollection & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::UserControl>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::UserControl & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::VariableSizedWrapGrid>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::VariableSizedWrapGrid & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::Viewbox>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::Viewbox & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::VirtualizingPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::VirtualizingPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::VirtualizingStackPanel>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::VirtualizingStackPanel & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebView>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebView & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewBrush>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewBrush & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequest>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequest & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewSettings>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewSettings & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

template<>
struct std::hash<winrt::Windows::UI::Xaml::Controls::WrapGrid>
{
    size_t operator()(const winrt::Windows::UI::Xaml::Controls::WrapGrid & value) const noexcept
    {
        return winrt::impl::hash_unknown(value);
    }
};

WINRT_WARNING_POP
